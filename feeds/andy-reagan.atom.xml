<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>andy reagan - Andy Reagan</title><link href="https://andyreagan.github.io/" rel="alternate"></link><link href="https://andyreagan.github.io/feeds/andy-reagan.atom.xml" rel="self"></link><id>https://andyreagan.github.io/</id><updated>2024-07-03T00:00:00+02:00</updated><entry><title>Functional Threshold Work Rate</title><link href="https://andyreagan.github.io/2024/07/03/functional-threshold-work-rate/" rel="alternate"></link><published>2024-07-03T00:00:00+02:00</published><updated>2024-07-03T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2024-07-03:/2024/07/03/functional-threshold-work-rate/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Functional Threshold Work Rate (kcal/kg/h): The maximum Calorie output an athlete can achieve in 1 hour per kilogram of body weight.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You've got inputs and outputs,
some of which are measurable and some aren't.
Tools like indirect calorimeters use input/output gas exchange
to measure the human body's …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Functional Threshold Work Rate (kcal/kg/h): The maximum Calorie output an athlete can achieve in 1 hour per kilogram of body weight.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You've got inputs and outputs,
some of which are measurable and some aren't.
Tools like indirect calorimeters use input/output gas exchange
to measure the human body's processes,
while a direct calorimeter simply measures heat.&lt;/p&gt;
&lt;p&gt;Cyclists use power output.
It's easy to measure (these days)
and efficiency doesn't seem to vary much with training,
so this is a decent measure of input too.
FTP is in W/kg.
Since kJ of output is just power and time (a Joule is a Watt·Second),
we combine two fun facts to know that kJ of output is roughly the same as kcal of input.
First, 
  1 kJ = 4.184 kcal
.
Second, humans are about 25% efficient at taking the input calories to output work, and these two cancel!
To this end,
  FTWR = (W/kg) * 3600/1000/4.184
first converting W into J by multiplying by an hour of seconds,
converting the J to kJ,
then convering those kJ into kcal by dividing by the conversion.
Altogether,
  FTWR = FTP * .86 kcal/W/h
.&lt;/p&gt;
&lt;p&gt;Runners use pace.
Most apps or fitness trackers (garmin, etc)
will use the available data
to estimate Calories burned (capital C means kcal).
These take into account pace, gradient, and body weight (but not &lt;a href="https://en.wikipedia.org/wiki/Running_economy#:~:text=Running%20Economy%20is%20calculated%20by,by%20kilogram%20of%20body%20weight."&gt;efficiency&lt;/a&gt;.
Using these output Calorie estimates,
it's not so straightfoward to convert into FTWR: efficiency varies by relative pace of the athlete (&lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4555089/"&gt;Barnes 2015&lt;/a&gt;).
We're looking at a maximal effort here,
so at 5 calories burned per liter of oxygen
(&lt;a href="https://pubmed.ncbi.nlm.nih.gov/18500953/"&gt;Scott 2005&lt;/a&gt;)
and using efficiencies in the range of 15-30% (&lt;a href="https://pubmed.ncbi.nlm.nih.gov/29143929/"&gt;Hoogkamer 2019&lt;/a&gt;)
we'll just use 25% for easiest math and say:
  FTWR = Calories burned * .25 / kg
.
This isn't very satisfying, still.
If you go from pace -&amp;gt; power (W/kg),
you could do something like
* 10 min/mile or 6.2 min/km: ~3.5 - 4.0 W/kg
* 8 min/mile or 5.0 min/km: ~4.5 - 5.0 W/kg
* 6 min/mile or 3.7 min/km: ~6.0 - 7.0 W/kg
* ~4.5 min/mile or 2.8 min/km: ~7.5 - 8.5 W/kg
to account for the nonlinearity, and use the cycling formula.&lt;/p&gt;
&lt;p&gt;Weight training, albeit less commonly, uses velocity.
Newton's law: 
  F = m·a
,
so while VBT trackers have velocity,
with knowledge of the weight they also have power
and work.
The values likely aren't comparable to running/cycling over an hour 
(an hour of deadlifts...).&lt;/p&gt;
&lt;p&gt;All this leads me to think that we should measure this with the &lt;em&gt;input&lt;/em&gt; rather than the output.
Or maybe don't worry about comparing between sports: cycling we can measure output, running we have to measure inputs.&lt;/p&gt;</content><category term="misc"></category><category term="sweat science"></category></entry><entry><title>Remove Jeep Wrangler JL Location Tracking</title><link href="https://andyreagan.github.io/2024/05/30/remove-jeep-wrangler-jl-location-tracking/" rel="alternate"></link><published>2024-05-30T00:00:00+02:00</published><updated>2024-05-30T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2024-05-30:/2024/05/30/remove-jeep-wrangler-jl-location-tracking/</id><summary type="html">&lt;p&gt;Through a trending discussion on HN,
I learned that some companies give police location data without a warrant.
Including the parent company of a vehicle we recently got.
WAIT - HOW DO THEY HAVE MY LOCATION DATA?&lt;/p&gt;
&lt;p&gt;Turns out - the GPS used for Nav and the 4G attennae that can act …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Through a trending discussion on HN,
I learned that some companies give police location data without a warrant.
Including the parent company of a vehicle we recently got.
WAIT - HOW DO THEY HAVE MY LOCATION DATA?&lt;/p&gt;
&lt;p&gt;Turns out - the GPS used for Nav and the 4G attennae that can act as a hotspot "phone home" my location data to the dealer.
Being in the data space,
and being protective of my own data,
I haven't been personally worried like this before.
Google is reading my emails to serve ads, sure.
Presumably they're not evil.
But the location data feels like a step too far!&lt;/p&gt;
&lt;p&gt;In the same thread,
Jeep owners shared a few links on how to remove them.
Another win for the DIY jeep community.
Here are the links I found:&lt;/p&gt;
&lt;p&gt;https://www.jeepgladiatorforum.com/forum/threads/how-to-opt-out-of-jeep-data-harvesting-and-sharing.80411/&lt;/p&gt;
&lt;p&gt;https://www.jlwranglerforums.com/forum/threads/anyone-enjoy-a-level-of-privacy-from-u-connect.69289/#post-1456352&lt;/p&gt;
&lt;p&gt;When I got around to doing this...&lt;/p&gt;</content><category term="draft"></category></entry><entry><title>Marathon Checklist</title><link href="https://andyreagan.github.io/2024/05/19/marathon-checklist/" rel="alternate"></link><published>2024-05-19T00:00:00+02:00</published><updated>2024-05-19T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2024-05-19:/2024/05/19/marathon-checklist/</id><summary type="html">&lt;p&gt;Gearing up to run the VCM next weekend!&lt;/p&gt;
&lt;p&gt;We're staying a short 1 mile from the race,
which has a 7:15AM start.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;6AM&lt;/td&gt;
&lt;td&gt;Wake up&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6-6:30AM&lt;/td&gt;
&lt;td&gt;Coffee, breakfast, salt, dressed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6:30-6:45AM&lt;/td&gt;
&lt;td&gt;Walk to start&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6:45-7:15AM&lt;/td&gt;
&lt;td&gt;Wait around&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7:15AM&lt;/td&gt;
&lt;td&gt;Run run run …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;Gearing up to run the VCM next weekend!&lt;/p&gt;
&lt;p&gt;We're staying a short 1 mile from the race,
which has a 7:15AM start.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;6AM&lt;/td&gt;
&lt;td&gt;Wake up&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6-6:30AM&lt;/td&gt;
&lt;td&gt;Coffee, breakfast, salt, dressed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6:30-6:45AM&lt;/td&gt;
&lt;td&gt;Walk to start&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6:45-7:15AM&lt;/td&gt;
&lt;td&gt;Wait around&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7:15AM&lt;/td&gt;
&lt;td&gt;Run run run&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Checklist, perhaps in very rough order of importance:&lt;/p&gt;
&lt;p&gt;[x] Shoes
[ ] Socks (in wash)
[ ] Shorts (in wash)
[x] Shirt
[x] Salt (4+ packs of LMNT, for night before, morning)
[x] Body glide
[ ] Phone belt
[ ] Garmin charger (pack this later in week)
[x] Sunglasses
[ ] Hat (find the Ciele one)
[ ] Sunscreen
[x] Baking soda gel (Amp stuff)
[x] Bottle with [fast medicine]
[x] Bottle with superstarch
[ ] Whoop charger (pack later in week)
[x] Extra carbs (Precision Fuel 90g)&lt;/p&gt;</content><category term="misc"></category><category term="race report"></category></entry><entry><title>Tools For Thought</title><link href="https://andyreagan.github.io/2024/05/11/tools-for-thought/" rel="alternate"></link><published>2024-05-11T00:00:00+02:00</published><updated>2024-05-11T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2024-05-11:/2024/05/11/tools-for-thought/</id><content type="html">&lt;p&gt;https://getcahier.com/&lt;/p&gt;
&lt;p&gt;Obsidian&lt;/p&gt;
&lt;p&gt;Roam&lt;/p&gt;
&lt;p&gt;Adjacent possible tool using google?&lt;/p&gt;</content><category term="draft"></category></entry><entry><title>It's All Stress</title><link href="https://andyreagan.github.io/2024/05/01/its-all-stress/" rel="alternate"></link><published>2024-05-01T00:00:00+02:00</published><updated>2024-05-01T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2024-05-01:/2024/05/01/its-all-stress/</id><summary type="html">&lt;p&gt;Training stress, that is. 
If we want to measure the impact of training on performance,
we need a way to quantify the training.
This is not a new problem.
Methods like Bannister's TRIMP have been around since the 1970's,
while new takes like &lt;a href="https://www.researchgate.net/profile/Elisabet-Borsheim/publication/9025532_Effect_of_Exercise_Intensity_Duration_and_Mode_on_Post-Exercise_Oxygen_Consumption/links/09e41510bf1c033340000000/Effect-of-Exercise-Intensity-Duration-and-Mode-on-Post-Exercise-Oxygen-Consumption.pdf"&gt;FirstBeat's EPOC&lt;/a&gt; estimation are relatively new.&lt;/p&gt;
&lt;p&gt;The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Training stress, that is. 
If we want to measure the impact of training on performance,
we need a way to quantify the training.
This is not a new problem.
Methods like Bannister's TRIMP have been around since the 1970's,
while new takes like &lt;a href="https://www.researchgate.net/profile/Elisabet-Borsheim/publication/9025532_Effect_of_Exercise_Intensity_Duration_and_Mode_on_Post-Exercise_Oxygen_Consumption/links/09e41510bf1c033340000000/Effect-of-Exercise-Intensity-Duration-and-Mode-on-Post-Exercise-Oxygen-Consumption.pdf"&gt;FirstBeat's EPOC&lt;/a&gt; estimation are relatively new.&lt;/p&gt;
&lt;p&gt;The basic formula has to incorporate the basics of exercise science: frequency, intensity, and duration (&lt;a href="https://a.co/d/0iazKMj"&gt;ACSM's Guidelines for Exercise Testing and Prescription&lt;/a&gt;).
An hour of work, at a given intensity (say aerobic threshold), can be given a score of 100.
From there, we can scale the score based on intensity (non-linearly), and duration (linearly).
These are rough models, and will never fully capture how the human body responds to stress (),
but still serve as good gaurd rails.
Training peaks has a nice overview of &lt;a href="https://help.trainingpeaks.com/hc/en-us/articles/204071944-Training-Stress-Scores-TSS-Explained"&gt;TSS and it's variation&lt;/a&gt;,
and I'd highly recommend Dr. Skiba's &lt;a href="https://a.co/d/5jrUdaE"&gt;Scientific Training for Endurance Athletes&lt;/a&gt; for a more thorough overview of the space.&lt;/p&gt;
&lt;h2&gt;Internal vs external measures&lt;/h2&gt;
&lt;p&gt;If you can measure output directly, like in cycling with a power meter, than these measure can be pretty "hard".
With only internal measurements, things will be more approximate, but still relative to yourself: 
my HR of 168 may have a very different &lt;em&gt;output&lt;/em&gt; in kCal running or biking than Tadej Pogacar on the bike at 168 HR,
but the relative stress to ourselves may be similar.&lt;/p&gt;
&lt;h2&gt;Scaling of intensity&lt;/h2&gt;
&lt;p&gt;Strava has a simple formula for their "&lt;a href="https://support.strava.com/hc/en-us/articles/360000197364-Relative-Effort"&gt;relative effort&lt;/a&gt;" (they used to call it suffer score),
it's been reverse engineered &lt;a href="https://www.alessandroaime.com/2017/03/03/reverse-engineering-the-strava-suffer-score-algorithm"&gt;multiple&lt;/a&gt; &lt;a href="https://djconnel.blogspot.com/2011/08/strava-suffer-score-decoded.html"&gt;times&lt;/a&gt;.
I haven't tried to reverse engineer Whoop's Strain score,
but I'm sure it's very similar 
(they suggest as much in their patent, and I'm not too interested to violate their terms of service to determine the coefficients).
Complaints about the scaling parameters abound: is a 5 hour ride in Z2 really harder than a 20min FTP test?
Any reduction to a single number will have these issues.
Cyclists will of course be familiar with Normalized Power,
which takes the raw output and scales it by raising to the fourth power, and then taking the fourth root:
this makes harder efforts have a bigger relative impact (a perfectly steady ride will have the same average power and NP).
Since this more closely aligns with the impact on the body in practice, NP is a very useful metric.&lt;/p&gt;
&lt;p&gt;On Strava's simple formula's, 
worth pointing out that their weekly effort recommendations are simply the weighted average of the past three weeks
(1/6, 1/3, 1/2, respectively) for the sum of the relative effort.
The target range is 60-120% of these past three weeks; with 60-90% as maintaining, 90-120% building, and 120-150% overreeaching (labels mine).
They get &lt;a href="https://communityhub.strava.com/t5/ideas/display-weekly-relative-effort-score-based-on-last-7-days/idi-p/8958"&gt;some flak&lt;/a&gt; for showing the weekly target, instead of the rolling 7 days 
Maybe rolling 10 days would even better, to smooth out weekends.&lt;/p&gt;
&lt;p&gt;Many years ago I had a garmin watch's auto recommendations for steps turned on, and every day it wanted me to get more than the last.
That was fine until it was suggesting every day I get 18K steps!
It would give me a repreive once I missed the target, 
but then push me again.
There should be some upper range... (so I like the 60-120% from Strava).
Maybe if we threw in the CDC minimum and recommendation for some context,
we'd have a system for the people (&lt;a href="https://a.co/d/0iazKMj"&gt;ACSM's Guidelines for Exercise Testing and Prescription&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Any attempt to quantify health and fitness (remember: these are the &lt;a href="https://library.crossfit.com/free/pdf/CFJ-trial.pdf"&gt;same thing&lt;/a&gt;)
can be improved by striving for measures that more closely reflect our biology.
We can use a pedometer in the same way we use a power meter (strain gauge!) or an indirect calorimeter
as a proxy for stress.
Contextualized recommendations that consider calendary cycles (weeks) 
and reasonable upper bounds can work,
with our work/stress proxy,
to build a system that offers actionable, personalized insights.&lt;/p&gt;</content><category term="misc"></category><category term="sweat science"></category></entry><entry><title>Django Static Site Generators</title><link href="https://andyreagan.github.io/2024/04/30/django-static-site-generators/" rel="alternate"></link><published>2024-04-30T00:00:00+02:00</published><updated>2024-04-30T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2024-04-30:/2024/04/30/django-static-site-generators/</id><summary type="html">&lt;p&gt;I've been thinking about moving this Pelican blog that you're reading over to Django.&lt;/p&gt;
&lt;p&gt;Parts of it already come from a Django database: 
the publications list and CV depend on a version of a Django app that once powered vermontcomplexsystems.org.&lt;/p&gt;
&lt;p&gt;I looked around on the internet, and of course …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been thinking about moving this Pelican blog that you're reading over to Django.&lt;/p&gt;
&lt;p&gt;Parts of it already come from a Django database: 
the publications list and CV depend on a version of a Django app that once powered vermontcomplexsystems.org.&lt;/p&gt;
&lt;p&gt;I looked around on the internet, and of course this isn't a new idea.
Here a few examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/meeb/django-distill"&gt;django-distill&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;✅ up to date, with &lt;a href="https://github.com/meeb/django-distill-example/tree/master"&gt;example project&lt;/a&gt; that is &lt;a href="https://django-distill-example.meeb.org/"&gt;deployed to netlify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://snyk.io/advisor/python/django-distill"&gt;47/100 on snyk&lt;/a&gt;, much lower than I would have thought!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/palewire/django-bakery"&gt;django-bakery&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;✅ up to date&lt;/li&gt;
&lt;li&gt;Built and maintained (originally) by &lt;a href="http://datadesk.latimes.com/posts/2012/03/introducing-django-bakery/"&gt;Los Angeles Times Data Desk&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://snyk.io/advisor/python/django-bakery"&gt;66/100 on snyk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fabiocaccamo/django-freeze"&gt;django-freeze&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;✅ up to date&lt;/li&gt;
&lt;li&gt;&lt;a href="https://snyk.io/advisor/python/django-freeze"&gt;72/100 on snyk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mishbahr/django-staticgen"&gt;django-staticgen&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;🚫 very out ot date&lt;/li&gt;
&lt;li&gt;39/100, should be lower? Django scores a 94, so that's good.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/eudicots/Cactus"&gt;Cactus&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;🚫 very out ot date&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mtigas/django-medusa?tab=readme-ov-file"&gt;django-medusa&lt;/a&gt; that I saw referenced by (a very old version of) &lt;a href="https://docs.wagtail.org/en/v1.1/reference/contrib/staticsitegen.html"&gt;wagtail cms&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;🚫 From the README on the project, which is archived: &lt;em&gt;Note: This project is largely unmaintained since 2014 and may be broken.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Recommends &lt;a href="https://github.com/alsoicode/django-medusa"&gt;The alsoicode/django-medusa fork&lt;/a&gt;, by Brandon Taylor.&lt;ul&gt;
&lt;li&gt;🚫 Still very out of date&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;could just use &lt;a href="https://www.michelepasin.org/blog/2021/10/29/django-wget-static-site/index.html"&gt;wget&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few of the examples I found from "jamstack", like this: https://jamstack.org/generators/cactus/.
Interesting project itself.&lt;/p&gt;
&lt;p&gt;Looks like &lt;code&gt;django-distill&lt;/code&gt; is quite nice!&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Django + Fitbit</title><link href="https://andyreagan.github.io/2024/03/27/django-fitbit/" rel="alternate"></link><published>2024-03-27T00:00:00+01:00</published><updated>2024-03-27T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2024-03-27:/2024/03/27/django-fitbit/</id><summary type="html">&lt;p&gt;I finally got around to publishing the Fitbit module of my personal dashboard!&lt;/p&gt;
&lt;p&gt;It's here: https://github.com/andyreagan/django-fitbit-healthkit&lt;/p&gt;
&lt;p&gt;Some fun facts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It automatically deploys to PyPI on tagged releases (so hopefully, I never have to remember how to do this!)&lt;/li&gt;
&lt;li&gt;It &lt;em&gt;might&lt;/em&gt; be useful to plug into some …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I finally got around to publishing the Fitbit module of my personal dashboard!&lt;/p&gt;
&lt;p&gt;It's here: https://github.com/andyreagan/django-fitbit-healthkit&lt;/p&gt;
&lt;p&gt;Some fun facts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It automatically deploys to PyPI on tagged releases (so hopefully, I never have to remember how to do this!)&lt;/li&gt;
&lt;li&gt;It &lt;em&gt;might&lt;/em&gt; be useful to plug into some of what we built for MassMutual's &lt;a href="https://www.massmutual.com/well"&gt;WELL Rider&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;We rolled our own module, but it could be nice to separate this out so we can test it independently.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's some notes that I made this morning when considering some open issues for the Fitbit integration that we wrote.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Maybe we did do a proper search when starting this project 18 months ago, but I've forgotten. I'll take another look in case anything has shown up, and document what I find.&lt;/p&gt;
&lt;p&gt;The one &lt;a href="https://dev.fitbit.com/build/reference/web-api/developer-guide/libraries-and-sample-code/"&gt;recommended by fitbit&lt;/a&gt; for Python is 5 years old, the django version is &lt;a href="https://github.com/orcasgit/django-fitbit"&gt;8 years of date&lt;/a&gt;, and Synk gives it a &lt;a href="https://snyk.io/advisor/python/django-fitbit"&gt;score of 39/100&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In fact, there were only two python projects that had been updated in the past 6 months:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A auto-generated set of APIs based on Swagger definition from fitbit: https://github.com/chemelli74/fitbit-web-api&lt;/li&gt;
&lt;li&gt;A Deta app that pulls heart rate (which I think just happens to be recent) https://github.com/eggplants/heartbeat-status&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this project, we rolled our own, and yes it wasn't impossible, since fitbit's API is relatively simple. Almost all of the work deals with "business logic" of mapping fitbit API responses to our specific data model.
&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="misc"></category></entry><entry><title>Sharing code</title><link href="https://andyreagan.github.io/2022/07/22/sharing-code/" rel="alternate"></link><published>2022-07-22T00:00:00+02:00</published><updated>2022-07-22T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2022-07-22:/2022/07/22/sharing-code/</id><summary type="html">&lt;p&gt;Let’s say you have a codebase X, and a codebase Y. X produces some results or does some logic that are needed by codebase Y. What should we do to get the results (for this exercise, let’s say it’s a JSON file) from X to Y?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shared …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Let’s say you have a codebase X, and a codebase Y. X produces some results or does some logic that are needed by codebase Y. What should we do to get the results (for this exercise, let’s say it’s a JSON file) from X to Y?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shared file store (box, onedrive, s3).&lt;/li&gt;
&lt;li&gt;Live service (e.g., an API).&lt;/li&gt;
&lt;li&gt;Monorepo: Y can run X’s code from the same repo to get the JSON.&lt;/li&gt;
&lt;li&gt;Distribution packaging (pypi, internal artifactory, cran, npm): Y can import X, run it.&lt;/li&gt;
&lt;li&gt;Many repos on a single computer: Y and X are next to each other, run X separately and get the files or import it locally. I've seen this done without the use of &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules"&gt;git submodules&lt;/a&gt;, but this is the use case for submodules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where I work, we use all of these strategies when the situation calls for it. Each situation is different, so let’s outline some of the considerations that may come up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Security and permissions: can the user of Y have the inputs to X? The code for X?&lt;/li&gt;
&lt;li&gt;Is there a team to support an API?&lt;/li&gt;
&lt;li&gt;Does the organization and the users have the structure necessary to handle a monorepo?&lt;/li&gt;
&lt;li&gt;How many people using Y need the output from X? Is it just some code functionality they need?&lt;/li&gt;
&lt;li&gt;Are you in a place to &lt;a href="https://cutlefish.substack.com/p/tbm-3052-why-do-we-have-no-strategy"&gt;plan and maintain a strategy&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In lieu of telling you how to chose,
I'll just leave the options and those questions to help you decide!&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>AI-powered Fitness Training</title><link href="https://andyreagan.github.io/2022/07/21/ai-powered-fitness-training/" rel="alternate"></link><published>2022-07-21T00:00:00+02:00</published><updated>2022-07-21T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2022-07-21:/2022/07/21/ai-powered-fitness-training/</id><summary type="html">&lt;p&gt;Last year Alex Hutchinson, in his generally excellent Sweat Science series, &lt;a href="https://www.outsideonline.com/health/training-performance/training-data-analytics-framework/"&gt;discovered the four level framework&lt;/a&gt; for data analytics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Descriptive: What happened?&lt;/li&gt;
&lt;li&gt;Diagnostic: Why did it happen?&lt;/li&gt;
&lt;li&gt;Predictive: What will happen?&lt;/li&gt;
&lt;li&gt;Prescriptive: How do we make it happen?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This isn't news for people who work in data, and yet he …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last year Alex Hutchinson, in his generally excellent Sweat Science series, &lt;a href="https://www.outsideonline.com/health/training-performance/training-data-analytics-framework/"&gt;discovered the four level framework&lt;/a&gt; for data analytics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Descriptive: What happened?&lt;/li&gt;
&lt;li&gt;Diagnostic: Why did it happen?&lt;/li&gt;
&lt;li&gt;Predictive: What will happen?&lt;/li&gt;
&lt;li&gt;Prescriptive: How do we make it happen?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This isn't news for people who work in data, and yet he concludes that have yet to see prescriptive analysis. I think he's wrong, the &lt;a href="https://journals.humankinetics.com/view/journals/ijspp/16/11/article-p1719.xml"&gt;research paper didn't do much research&lt;/a&gt;, and I said as much on Twitter:&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Good to know. There are a bunch of AI-powered training plans starting to emerge these days (e.g. from Training Peaks, SVEXA, and others). The hard part is evaluating how well they work in the real world!&lt;/p&gt;&amp;mdash; Alex Hutchinson (@sweatscience) &lt;a href="https://twitter.com/sweatscience/status/1458472680059965440?ref_src=twsrc%5Etfw"&gt;November 10, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;In part because I think it would be fun to write the machine learning algorithm (an idea I've been spinning on for years),
I set out to list what algorithms are already out there.
Turns out, there are a lot! I compiled all of the ones that I found into &lt;a href="https://docs.google.com/spreadsheets/d/1E0ai5oE9FKay2u8rbSqTDKquDFzqNBMXTAprup9TXRI/edit?usp=sharing"&gt;a big list on a Google Sheets&lt;/a&gt; and I'll highlight the biggest names below which seem to be basing their approach on data.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.trainerroad.com/adaptive-training/"&gt;TrainerRoad&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The leader in this category seems like TR,
with their adaptive training system for cycling,
all based on power meter data.
Miss a workout, fail to hit your power targets, or mark a session as easier than the algorithm expected and it will adjust your future session difficulty in response.
Cycling is a great place to start with clear quantitative data (power) on which to based the training.
As a part of this research,
I have started using TR and am enjoying it.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://tridot.com/"&gt;triDot&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I've seen these folks mostly from their advertisements, and can't speak much more to how well their system works or whether it's truly adaptive.
They certainly mention AI in their materials.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.garmin.com/en-US/blog/fitness/daily-workout-suggestions-for-runners/"&gt;Garmin + FirstBeat&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A stalwart in the endurance tech space, Garmin has partenered with FirstBeat
(whom they now own, I recall)
to build a recommendation engine using a workout library and some adaptation of the Bannister model
(reading between the lines in their linked PR).
Disclaimer: I have been using Garmin watches to train for running and cycling for many years,
and as such have developed a positive bias here.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://triq.ai"&gt;TRIQ-App&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;They have some research on sports science &lt;a href="https://triq.ai/triathlon-knowledge/sports-science"&gt;here&lt;/a&gt;.
Maybe they have based their rules engine on data that shows performance improvements?&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://aiendurance.com/blog/which-training-really-works"&gt;AI Endurance&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With a lot of material on their blog and relatively transparent materials from the researcher behind their system (Markus Rummel),
this one deserves a mention with the top.
Though they don't appear to big yet,
it doesn't appear that they are just using AI as a hype word.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.xertonline.com"&gt;Xert&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The folks at Xert have been doing this for a long time in the cycling space.
They have plans that adjust based on performance,
and really they seem like the first in this space.
&lt;a href="https://baronbiosys.com/xert-training-advisor-first-introduction/"&gt;Link to science behind the training advisor&lt;/a&gt;.
Like AI Endurance, their marketing does not seem to rival TR or triDot.&lt;/p&gt;
&lt;h2&gt;Others: Ultra Trail Coaching, SVEXA, 2PEAK, TrainAsONE, Training Peaks, Sparta Science, Humango, Althetica, Perform, Vert.run, and more&lt;/h2&gt;
&lt;p&gt;With all of the others,
it's hard to separate marketing from whether an algorithm is actually optimized on training data to improve performance.
It would seem like Training Peaks would have the right data,
but it's not clear that their entry in the market here (coaching-focused, perhaps to be expected) is based on data or whether it's a just a rules-based system.
SVEXA sounds fancy but doesn't have a consumer product.&lt;/p&gt;
&lt;p&gt;Not even making the list are popular endurance training platforms that haven't mentioned dynamic training: Today's Plan, Training Tilt, Final Surge, and many many more.&lt;/p&gt;
&lt;h1&gt;The list&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;Name&lt;/th&gt;
&lt;th style="text-align: left;"&gt;URI&lt;/th&gt;
&lt;th style="text-align: left;"&gt;&lt;div style="width:350px"&gt;Tagline&lt;/div&gt;&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Notes&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Cost&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;TrainerRoad&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://www.trainerroad.com/adaptive-training/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;TrainerRoad is a cycling training system designed to make you faster with science-based, goal-driven training. Adaptive Training uses machine learning and science-based coaching principles to continually assess your performance and intelligently adjust your training plan. It trains you as an individual and makes you a faster cyclist.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;a href="https://www.trainerroad.com/forum/t/trainingpeaks-announcing-adaptative-training/22081/84"&gt;Interesting commentary in the forums about TrainingPeaks&lt;/a&gt;. Not too much detail on how it works, &lt;a href="https://www.youtube.com/watch?v=d-Z_mim17Dk"&gt;here’s an overview video&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;$20/month&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Xert&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://www.xertonline.com&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Welcome to a new generation of training tools and technology.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Adaptive training, see &lt;a href="https://baronbiosys.com/xert-training-advisor-first-introduction/"&gt;how “training advisor” works&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;triDot&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://tridot.com/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;DATA OPTIMIZED TRAINING™ powered by your genetics &amp;amp; training data and our AI &amp;amp; predictive analys&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Owned by &lt;a href="https://predictive.fit"&gt;Predictive Fitness Inc.&lt;/a&gt;. &lt;a href="https://patents.google.com/patent/US20130040272A1/en?q=tridot&amp;amp;oq=tridot"&gt;Patent 1: System and method for producing customized training plans for multi-discipline …&lt;/a&gt; &lt;a href="https://patents.google.com/patent/US20210308522A1/en?q=tridot&amp;amp;oq=tridot"&gt;Patent 2: System and method for real-time environmentally normalized endurance athletic …&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;$10-$400 per month&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;TRIQ-App&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://triq.ai&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Plan triathlon training smarter: With TRIQ. It’s a revolutionary, dynamic app that uses a groundbreaking algorithm to adjust your training in real-time.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Adaptive training plans; Cost not clear; &lt;a href="https://triq.ai/triathlon-knowledge/sports-science"&gt;Articles on the sports science&lt;/a&gt;.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Garmin + FirstBeat&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://www.garmin.com/en-US/blog/fitness/daily-workout-suggestions-for-runners/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Adaptive plans delivered right to the watch.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;AI Endurance&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://aiendurance.com/blog/which-training-really-works&lt;/td&gt;
&lt;td style="text-align: left;"&gt;At AI Endurance, we believe in a modern way of endurance training. A more personalized, scientific approach to help athletes of all skill levels unlock new potential. We’re passionate about it, and our mission is to personalize training. We specialise in artificial intelligence and we're here to bring it to the forefront of training. We're excited to simplify training through our program and break the mold of “one size fits all” training plans.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Propreitary algorithm for dynamic training.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Ultra Trail Coaching&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://www.ultratrailcoaching.com&lt;/td&gt;
&lt;td style="text-align: left;"&gt;The personalized, adaptive training platform for trail and ultra running&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Not much detail on what exactly they do&lt;/td&gt;
&lt;td style="text-align: left;"&gt;40pounds per month&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;2PEAK&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://2peak.com/triathlon-training-plan/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Dynamic Triathlon and Duathlon Training Plans&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Doesn’t look like there is any AI involved, but they do have dynamically adjusting training plans&lt;/td&gt;
&lt;td style="text-align: left;"&gt;72-360 eu per year&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;TrainAsONE&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://www.trainasone.com/training-plans/marathon/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;The AI Running App: intelligent training plans for runners of all abilities.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Adaptive training plans&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Free to $10/month.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;SVEXA&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://www.svexa.com/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;SVEXA is an exercise intelligence company combining expertise in physiology, precision health and data science with a deep understanding in technology.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Training Plan Optimization (MIMIR). Simulate thousands of potential training programs to get the optimal for the specific athlete. The above is one of a handful of bespoke products&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Training Peaks&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://www.trainingpeaks.com/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Featuring plans from expert coaches like Matt Fitzgerald, David Glover and Joe Friel. Take the Training Plan Quiz. Skip the search and find the perfect plan for you! Color-coded workouts. Easy performance analysis. Customizable dashboard.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Adaptive training plans - coaching focused. See https://help.trainingpeaks.com/hc/en-us/articles/204072414-Dynamic-Training-Plans and https://www.stayonpace.com/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Free to $10/month.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Sparta Science&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://spartascience.com&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Helping the world Move Better.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://spartascience.com/drphilwagner/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Humango&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://humango.ai/athletes/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Humango for focus, fitness – and fun Humango™ is a unique platform designed to improve athletic motivation and performance. And whether you’re an elite athlete or simply enjoy getting outdoors to exercise, it will help you train more efficiently than ever before.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;App with AI Coaching Assistant for running and triathlon&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Athletica&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://athletica.ai/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Athletica is a premium coaching plan that adapts to your current sport, fitness levels, goals, training sessions and life, allowing you to reach new levels of health and performance you never thought possible – all at an affordable price of $20/month.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://athletica.ai/about/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;$20/month.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Perform&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://joinperform.com/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;The most personalized running program, ever. Perform matches you with a personal running coach and uses AI to help you reach your running goals. Adaptive training plans, workouts, and feedback. Made just for you.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Vert.run&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://vert.run/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;THE TRAINING PLATFORM FOR TRAIL + ULTRA RUNNING. Let’s unlock your full potential.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;You’re unique--so is your plan: Your training plan adapts to your level of experience, current fitness, changing schedule, training conditions and goals.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Runna&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://www.runna.com/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Just training plans?&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Zing&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://zing.coach/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Zing Coach™ combines human experience and AI technology to give you the best of what people and technology can offer. By harnessing the power of AI, Zing designs personalized workouts tailored to your needs, goals, gender, age, lifestyle, interests, current condition, and emotional well-being. Every fitness program is adjusted in real-time based on your Metabolism, Energy level, Availability of time &amp;amp; equipment, Feedback from each exercise&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;RunGap&lt;/td&gt;
&lt;td style="text-align: left;"&gt;http://www.rungap.com/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Workout Data Manager for iOS.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;RunMotion&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://en.run-motion.com/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Personalised &amp;amp; Adaptive training plans. Achieve your running goals with the RunMotion Coach app like 88% of our users. All you have to do is run!&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Your current fitness level: the app assesses your form and adapts your plan&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Vitesse&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://vitesserunning.com/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Bringing Coworkers together: The platform that makes corporate wellness easy and time spend with colleagues fun.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;RunningCoach&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://apps.apple.com/us/app/running-coach-run-walk/id1520213665&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Run and walk whenever and wherever you want with your Running Coach. Set your goal, track your stats including elevation, pace, calories and more and observe your progress directly from your phone. Put your shoes on, get ready and go! Discover all our features including: - Real-time audio feedback: get motivated during your run. - Real time tracker with GPS: see your route and do it again if you want to. - Complete statistics: including elevation, pace, calories, elevation and more. - Register your activity: observe your progress throughout the time. This app uses HealthKit to track and log your workouts and workout routes.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Run with Hal&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://www.halhigdon.com/apps/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Made by trainingpeaks folks, limited adjustments&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Nike Run Club&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://www.nike.com/nrc-app&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Not clear how dynamic things are.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;The Breakaway&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://www.breakaway.app/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Cycling focused workouts&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Training Today&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://trainingtodayapp.com/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Readiness focused&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Rewire&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://rewirefitness.app/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Daily readiness metrics (e.g., like whoop)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Athlytic&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://apps.apple.com/us/app/athlytic-ai-fitness-coach/id1543571755&lt;/td&gt;
&lt;td style="text-align: left;"&gt;HRV-based recommendations for training&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Strive&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://strive.ai/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Really just for tracking&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Runkeeper&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://runkeeper.com/cms/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Really just for tracking&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Strava&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://www.strava.com/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Really just for tracking&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Today's Plan&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://www.todaysplan.com.au/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Human coaching focused&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Training Tilt&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://trainingtilt.com/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Human coaching focused&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Final Surge&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://www.finalsurge.com/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Human coaching focused&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Future&lt;/td&gt;
&lt;td style="text-align: left;"&gt;https://www.future.co/&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Human coaching focused&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;style&gt;
table {
 border-collapse: collapse;
 margin: 25px 0;
 font-size: 0.9em;
 font-family: sans-serif;
 min-width: 400px;
 box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
}

thead tr {
 background-color: #009879;
 color: #ffffff;
 text-align: left;
}

th,
td {
 padding: 12px 15px;
}

tbody tr.active-row {
 font-weight: bold;
 color: #009879;
}
tbody tr {
 border-bottom: 1px solid #dddddd;
}

tbody tr:nth-of-type(even) {
 background-color: #f3f3f3;
}

tbody tr:last-of-type {
 border-bottom: 2px solid #009879;
}
&lt;/style&gt;

&lt;p&gt;For a more complete list that includes training data collection apps, see the list here: https://endurancebikeandrun.com/blog/2020/2/6/the-best-running-and-cycling-training-diary-planning-and-analysis-applications.&lt;/p&gt;</content><category term="Fitness"></category><category term="running"></category><category term="sweat science"></category></entry><entry><title>2022 Boston Marathon</title><link href="https://andyreagan.github.io/2022/07/01/2022-boston-marathon/" rel="alternate"></link><published>2022-07-01T00:00:00+02:00</published><updated>2022-07-01T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2022-07-01:/2022/07/01/2022-boston-marathon/</id><content type="html">&lt;p&gt;Didn't hit the mark this year,
and likely went too hot for the first half.
Bonus: either caught COVID during the race, or dampened the immune system enough to allow the infection that I was fighting already to go full force.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.strava.com/activities/7003274855"&gt;Strava result&lt;/a&gt;&lt;/p&gt;
&lt;div class='strava-embed-placeholder' data-embed-type='activity' data-embed-id='7003274855'&gt;&lt;/div&gt;
&lt;script src='https://strava-embeds.com/embed.js'&gt;&lt;/script&gt;</content><category term="Fitness"></category><category term="running"></category><category term="race report"></category></entry><entry><title>Non-SQL in your DBT pipeline</title><link href="https://andyreagan.github.io/2022/03/31/non-sql-in-your-dbt-pipeline/" rel="alternate"></link><published>2022-03-31T00:00:00+02:00</published><updated>2022-03-31T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2022-03-31:/2022/03/31/non-sql-in-your-dbt-pipeline/</id><summary type="html">&lt;p&gt;DBT forces you to use SQL, even when Python or R transformations are clearer.&lt;/p&gt;
&lt;p&gt;DBT makes a lot of sense for 80% of data pipelines, but there are steps that it just isn’t worth forcing into SQL (even when that is possible!). If the code is simpler and easier …&lt;/p&gt;</summary><content type="html">&lt;p&gt;DBT forces you to use SQL, even when Python or R transformations are clearer.&lt;/p&gt;
&lt;p&gt;DBT makes a lot of sense for 80% of data pipelines, but there are steps that it just isn’t worth forcing into SQL (even when that is possible!). If the code is simpler and easier to understand in a more extensible programming language (e.g., R or Python), then the code should stay there. While DBT forces good practices for keeping pipelines in SQL most of the time, this can be an anti-pattern when we add complexity just to stay in SQL-land.&lt;/p&gt;
&lt;p&gt;Many Google searches later, and I found Claire Carroll lays out the scenario very clearly in her post on the DBT forum &lt;a href="https://discourse.getdbt.com/t/representing-non-sql-models-in-a-dbt-dag/2083"&gt;Representing non-SQL models in a dbt DAG&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes, there’s a table in your DAG that might be created via a non-SQL process, and it would be useful for your dbt project to “know” about it. For example, let’s say you have a table, &lt;code&gt;customers_predicted_ltvs&lt;/code&gt;, with one record per &lt;code&gt;customer_id&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;customer_id&lt;/th&gt;
&lt;th&gt;predicted_ltv&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;1&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;2&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This table of estimates is created by a machine learning model, and uses transformations which can’t be done in SQL — we’re going to call it a non-SQL model. The non-SQL model uses some dbt models as inputs. Further, you want to use the output of this non-SQL model in other dbt models.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;She is not the first person to ask the &lt;a href="https://stackoverflow.com/questions/63419289/how-to-use-python-dependency-injection-or-hooks-with-dbt"&gt;this question&lt;/a&gt;, and she proposes a useful answer, to “hack” the model into the pipeline with an ephemeral model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;materialized&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ephemeral&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;
&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;This table is created by a non-SQL process (you should probably add more info IRL),&lt;/span&gt;
&lt;span class="cm"&gt;which selects from the following dbt models:&lt;/span&gt;
&lt;span class="cm"&gt;{{ ref(&amp;#39;customers&amp;#39;) }}&lt;/span&gt;
&lt;span class="cm"&gt;{{ ref(&amp;#39;orders&amp;#39;) }}&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customers_predicted_ltv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I’ll add that you can make this more generic by dynamically populating the table and schema names:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;materialized&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ephemeral&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;schema&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this is what we’re left with. You don’t &lt;em&gt;need&lt;/em&gt; this hacked-in node if you just run the pipeline up to this point, and then after it (splitting it in two), but this placeholder does allow you build the full DAG picture. Even with this in place, you’ll still need to run your pipeline in two steps anyway. First, everything up to this model, then you external process, then everything after it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dbt&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;+customers_predicted_ltv
python&lt;span class="w"&gt; &lt;/span&gt;my_process.py
Rscript&lt;span class="w"&gt; &lt;/span&gt;my_process.R
dbt&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;customers_predicted_ltv+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One tool sounds promising, called &lt;a href="https://github.com/fal-ai/fal"&gt;fal&lt;/a&gt;, ̶b̶u̶t̶ ̶f̶o̶r̶ ̶n̶o̶w̶ ̶t̶h̶i̶s̶ ̶o̶n̶l̶y̶ ̶a̶l̶l̶o̶w̶s̶ ̶y̶o̶u̶ ̶t̶o̶ ̶r̶u̶n̶ ̶s̶c̶r̶i̶p̶t̶s̶ ̶b̶e̶f̶o̶r̶e̶ ̶o̶r̶ ̶a̶f̶t̶e̶r̶ ̶y̶o̶u̶r̶ ̶D̶A̶G̶,̶ ̶n̶o̶t̶ ̶i̶n̶ ̶t̶h̶e̶ ̶m̶i̶d̶d̶l̶e̶ as I published this, the fal team released just such a feature: &lt;a href="https://blog.fal.ai/python-or-sql-why-not-both/"&gt;check it out&lt;/a&gt;. I also found a tool called &lt;a href="https://medium.com/@jordan_volz/add-machine-learning-to-your-dbt-workflows-with-continual-27f609c7c76d"&gt;Continual&lt;/a&gt;, which looks similar to &lt;code&gt;fal&lt;/code&gt;, with somewhat less documentation.&lt;/p&gt;
&lt;style&gt;
table {
    border-collapse: collapse;
    margin: 25px 0;
    font-size: 0.9em;
    font-family: sans-serif;
    min-width: 400px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
}

thead tr {
    background-color: #009879;
    color: #ffffff;
    text-align: left;
}

th,
td {
    padding: 12px 15px;
}

tbody tr.active-row {
    font-weight: bold;
    color: #009879;
}
tbody tr {
    border-bottom: 1px solid #dddddd;
}

tbody tr:nth-of-type(even) {
    background-color: #f3f3f3;
}

tbody tr:last-of-type {
    border-bottom: 2px solid #009879;
}
&lt;/style&gt;</content><category term="Programming"></category><category term="python"></category><category term="dbt"></category></entry><entry><title>The “Pandas Way” is the functional API</title><link href="https://andyreagan.github.io/2022/03/30/the-pandas-way-is-the-functional-api/" rel="alternate"></link><published>2022-03-30T00:00:00+02:00</published><updated>2022-03-30T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2022-03-30:/2022/03/30/the-pandas-way-is-the-functional-api/</id><summary type="html">&lt;p&gt;With Pandas ≥ 1.0, the functional API is powerful and should be the new standard.&lt;/p&gt;
&lt;p&gt;Someone just pointed me to the &lt;code&gt;pyjanitor&lt;/code&gt; package, which I don't actually think is very useful with &lt;a href="https://pandas.pydata.org/pandas-docs/version/1.0.0/whatsnew/v1.0.0.html"&gt;Pandas &amp;gt;= 1.0&lt;/a&gt;, because the functional API for Pandas is quite powerful these days. The examples that the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;With Pandas ≥ 1.0, the functional API is powerful and should be the new standard.&lt;/p&gt;
&lt;p&gt;Someone just pointed me to the &lt;code&gt;pyjanitor&lt;/code&gt; package, which I don't actually think is very useful with &lt;a href="https://pandas.pydata.org/pandas-docs/version/1.0.0/whatsnew/v1.0.0.html"&gt;Pandas &amp;gt;= 1.0&lt;/a&gt;, because the functional API for Pandas is quite powerful these days. The examples that the &lt;code&gt;pyjanitor&lt;/code&gt; developers give &lt;a href="https://github.com/pyjanitor-devs/pyjanitor"&gt;on their README are helpful&lt;/a&gt;. First, they show "standard" Pandas code, which I'd argue shouldn't be the standard anymore.&lt;/p&gt;
&lt;p&gt;However, this is no longer the The Pandas Way, this is the The OLD Pandas Way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# The Pandas Way&lt;/span&gt;
&lt;span class="c1"&gt;# 1. Create a pandas DataFrame from the company_sales dictionary&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;company_sales&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 2. Delete a column from the DataFrame. Say &amp;#39;Company1&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Company1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 3. Drop rows that have empty values in columns &amp;#39;Company2&amp;#39; and &amp;#39;Company3&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Company2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Company3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# 4. Rename &amp;#39;Company2&amp;#39; to &amp;#39;Amazon&amp;#39; and &amp;#39;Company3&amp;#39; to &amp;#39;Facebook&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Company2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Amazon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Company3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Facebook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 5. Let&amp;#39;s add some data for another company. Say &amp;#39;Google&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Google&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;450.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;550.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;800.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then they note that “Slightly more advanced users might take advantage of the functional API” like this, but with the power of the functional API, this should now be the The Pandas Way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;company_sales&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Company1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Company2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Company3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Company2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Amazon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Company3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Facebook&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Google&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;450.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;550.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;800.0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and that’s great! The above should be the standard for writing Pandas code.&lt;/p&gt;
&lt;p&gt;I would avoid using pyjanitor, which gives you this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;company_sales&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_columns&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Company1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Company2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Company3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Company2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Amazon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Company3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Facebook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Google&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;450.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;550.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;800.0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;because (1) it’s not any more readable, IMO, and (2) breaks from the pandas API (which has direct parallels on cuDF, polars, etc) to make your code less portable. But if pyjanitor helps you, then don’t let me dissuade you entirely!&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="pandas"></category></entry><entry><title>Business logic in DBT</title><link href="https://andyreagan.github.io/2022/03/14/business-logic-in-dbt/" rel="alternate"></link><published>2022-03-14T00:00:00+01:00</published><updated>2022-03-14T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2022-03-14:/2022/03/14/business-logic-in-dbt/</id><summary type="html">&lt;p&gt;There are many possibilities for implementing custom logic, and this framework can help you sort through the options.&lt;/p&gt;
&lt;p&gt;I have been really enjoying using the &lt;a href="https://www.getdbt.com/"&gt;DBT&lt;/a&gt; to structure data pipelines,
the framework it enforces requires you to structure your pipelines in a standardized way.
The tool meets perfectly in the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are many possibilities for implementing custom logic, and this framework can help you sort through the options.&lt;/p&gt;
&lt;p&gt;I have been really enjoying using the &lt;a href="https://www.getdbt.com/"&gt;DBT&lt;/a&gt; to structure data pipelines,
the framework it enforces requires you to structure your pipelines in a standardized way.
The tool meets perfectly in the middle of data engineering and data science,
where it provides a way for dynamic coding for the former and constrains the latter.
As a data scientist,
I have spent years dynamically generating complex SQL code from running python processes,
inside and outside of data pipelines.
Templates are a second nature for this free-flowing data science work,
and DBT exposes this tooling for data engineers alongside a structure that works for most pipelines.&lt;/p&gt;
&lt;p&gt;The meat of data engineering is business logic:
transformations that,
in themselves,
contain crucial information to unlock the data.
For our examples here,
let’s recode a &lt;code&gt;state&lt;/code&gt; column to a &lt;code&gt;region&lt;/code&gt; in the US:
one of the four &lt;a href="https://en.wikipedia.org/wiki/List_of_regions_of_the_United_States#Census_Bureau-designated_regions_and_divisions"&gt;Census Bereau Designated Regions&lt;/a&gt; of
northeast, south, midwest, and west.
To help us decide between the various options for structuring this pipeline,
let’s lay out what we care about:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Human readability: we should be able understand the logic and see where the values are coming from.&lt;/li&gt;
&lt;li&gt;Flexbility: we want to be ready for changes in this mappings, e.g. a new state joins the US or an existing state switches regions.&lt;/li&gt;
&lt;li&gt;Machine readability and DRY: this logic should be interpretable by a program, such that we don’t need to repeat hard-coded values.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Option 1: leave your business logic hard-coded in SQL&lt;/h2&gt;
&lt;p&gt;This is less than ideal for all of the reasons,
but it’s likely a starting point.
It might look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;CASE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;WHEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;IN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Northeast&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;WHEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;IN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;IL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;IN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Midwest&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;ELSE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You could only code three of the regions,
letting the &lt;code&gt;ELSE&lt;/code&gt; statement catch the fourth region.
We’ll code all four:
explicit beats implicit.
With this hard-coded logic,
every change requires a code change.
If your logic isn’t hard-coded in SQL already,
shoot for option 2 or 3.
Let’s not belabor this method,
and move forward to solutions that better on each point.&lt;/p&gt;
&lt;h2&gt;Option 2: put that logic in a table, and use a JOIN to execute it&lt;/h2&gt;
&lt;p&gt;Here’s an idea that I can get behind.
Your code is your code:
it creates the region column from the state column.
If the exact mapping changes,
the data needs to be update,
but not your code!
This data can be managed in many different ways,
and even by a business stakeholder or downstream user.
To be concrete,
here’s what this would look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;JOIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fact_schema&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lookup_table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lookup&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;USING&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This works well with our goals, and now we need a way store the logic itself.
I see three options:&lt;/p&gt;
&lt;h3&gt;Option 2(a): use a DBT seed csv&lt;/h3&gt;
&lt;p&gt;Seeds in dbt are csv files that dbt loads into the database, to be used downstream.
This keeps the csv files in version control, and it’s a cool feature for this use case.
This is really the intended use of the seed functionality within dbt,
and I agree with their advice &lt;a href="https://docs.getdbt.com/docs/building-a-dbt-project/seeds"&gt;in the documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Seeds are CSV files in your dbt project (typically in your seeds directory), that dbt can load into your data warehouse using the dbt seed command.&lt;/p&gt;
&lt;p&gt;Seeds can be referenced in downstream models the same way as referencing models — by using the ref function.&lt;/p&gt;
&lt;p&gt;Because these CSV files are located in your dbt repository, they are version controlled and code reviewable. Seeds are best suited to static data which changes infrequently.&lt;/p&gt;
&lt;p&gt;Good use-cases for seeds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A list of mappings of country codes to country names&lt;/li&gt;
&lt;li&gt;A list of test emails to exclude from analysis&lt;/li&gt;
&lt;li&gt;A list of employee account IDs&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Option 2(b): store it in a SQL file as a series of &lt;code&gt;INSERT&lt;/code&gt;s&lt;/h2&gt;
&lt;p&gt;This option stinks,
so I won’t say much more. T
o be clear, what I mean is writing a &lt;code&gt;.sql&lt;/code&gt; file that inserts the data directly into the table.
You could do this within dbt,
and here’s a hacky version to illustrate the idea as &lt;code&gt;lookup_table.sql&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CT&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Northeast&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ME&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Northeast&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;IL&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Midwest&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;IN&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Midwest&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Option 2(c): store in python/R and push directly to the database&lt;/h2&gt;
&lt;p&gt;The main problem here is that you’re breaking your project into two parts:
the pre-dbt step and dbt step.
While there are cases that this makes sense, we can easily accomplish this step within dbt,
so let’s not pursue this option.&lt;/p&gt;
&lt;h2&gt;Option 3: use a DBT variable in a dynamic query&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;dbt_project.yml&lt;/code&gt; you can define &lt;a href="https://docs.getdbt.com/reference/dbt-jinja-functions/var"&gt;variables&lt;/a&gt;,
and then &lt;a href="https://docs.getdbt.com/docs/building-a-dbt-project/jinja-macros"&gt;use those in queries&lt;/a&gt;.
We can store our data in the yaml as a variable like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;s&lt;/span&gt;&lt;span class="kc"&gt;tate&lt;/span&gt;&lt;span class="err"&gt;_lookup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;Nor&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;heas&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;CT&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ME&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;Midwes&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;IL&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;IN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we would have our SQL being generated dynamically as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;CASE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;state_lookup&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;WHEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{{ t }}&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;}{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endfor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}}{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endfor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;ELSE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The middle part here is just building a comma-separated list,
and writing a function for that would make it look nicer.
Let’s just see that quickly with a csl filter (comma-separated-list):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;CASE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;state_lookup&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;WHEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;csl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;THEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}}{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endfor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;ELSE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is readable by both human and machine (yay for yaml!),
and it’s flexible,
making this my favorite of any choice so far. May your data pipelines be clear, and your pager alerts be few!&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="dbt"></category></entry><entry><title>Whoop Heart Rate Accuracy</title><link href="https://andyreagan.github.io/2021/12/27/whoop-heart-rate-accuracy/" rel="alternate"></link><published>2021-12-27T00:00:00+01:00</published><updated>2021-12-27T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2021-12-27:/2021/12/27/whoop-heart-rate-accuracy/</id><summary type="html">&lt;p&gt;In the fall of 2020,
I was curious about Whoop and hearing good things from some of the people I follow (&lt;a href="https://www.iamtedking.com/"&gt;Ted King&lt;/a&gt;).
In the spirit of amateur fitness enthusiasm and research adjacent to MassMutual's wearables program,
I ordered a 3.0 band in the October 2020.&lt;/p&gt;
&lt;p&gt;Overall,
I have …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the fall of 2020,
I was curious about Whoop and hearing good things from some of the people I follow (&lt;a href="https://www.iamtedking.com/"&gt;Ted King&lt;/a&gt;).
In the spirit of amateur fitness enthusiasm and research adjacent to MassMutual's wearables program,
I ordered a 3.0 band in the October 2020.&lt;/p&gt;
&lt;p&gt;Overall,
I have been really impressed with the Whoop platform and enjoy using it day to day.
The heart rated based data is accurate,
with one caveat (bicep strap),
the sleep tracking accuracy is incredible,
and I have learned some basic things about how I recover and train.&lt;/p&gt;
&lt;p&gt;In the spirit of &lt;a href="https://www.dcrainmaker.com/"&gt;DCR&lt;/a&gt; I recorded many runs and workouts with HR from Whoop alongside a Wahoo Tickr strap, a Scosche band, and my Garmin Fenix 5.
The devices that I've used to record data from each HR source have varied,
and I quickly generated more data that I was ready to analyze.
Very quickly, I was able to see while using the Whoop and a chest strap that the wrist placement of the Whoop generated awful readings while running.
I had the band tight, and a few centimeters from my wrist, but no luck.
On the top or bottom of the wrist, I mostly recorded running cadence.
However, I have found the bicep strap to be much more accurate.
As such, if it can better record HR on the bicep, it's likely going to get better HRV, respiratory rate on the bicep as well, so I leave it there full-time now.&lt;/p&gt;
&lt;p&gt;While I could probably do well with the DCR analyzer to make sense of all my data,
I did get around to comparing a couple by hand.&lt;/p&gt;
&lt;p&gt;First, here's a quick screenshot illustrating why not to use the band on the wrist for running (&lt;a href="https://redd.it/ramoiz"&gt;Link on reddit r/whoop&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2021-12-27-whoop-heart-rate-accuracy/wrist-tracking-cadence.jpeg" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;And next, here's a show of how accurate it is on the bicep for running (&lt;a href="https://redd.it/n5qohq"&gt;Link on reddit r/whoop&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2021-12-27-whoop-heart-rate-accuracy/whoop.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;You can get really cool graphs while interval training when the HR is accurate via the bicep strap as well (&lt;a href="https://redd.it/nqsrd4"&gt;Link on reddit r/whoop&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2021-12-27-whoop-heart-rate-accuracy/structured-workout.jpeg" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;The notebook that I used to generate the direct overlay comparison (image #2 above) is &lt;a href="https://colab.research.google.com/drive/1qynWK0S7HsdgvuhSzhw3IOrWF0mlS43F?usp=sharing"&gt;here&lt;/a&gt; on google collab.&lt;/p&gt;</content><category term="Fitness"></category><category term="whoop"></category><category term="dcr"></category></entry><entry><title>Jenkins blocking job</title><link href="https://andyreagan.github.io/2021/12/17/jenkins-blocking-job/" rel="alternate"></link><published>2021-12-17T00:00:00+01:00</published><updated>2021-12-17T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2021-12-17:/2021/12/17/jenkins-blocking-job/</id><summary type="html">&lt;p&gt;Say you have a job, that depends on three other jobs having been completed.
They all run at the same time,
and are not explicitly a part of your pipeline (you can't put them as a single multijob step).
You need you job to depend on at least one of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Say you have a job, that depends on three other jobs having been completed.
They all run at the same time,
and are not explicitly a part of your pipeline (you can't put them as a single multijob step).
You need you job to depend on at least one of them as upstream,
but then to make sure the others aren't still running.
So you create another job, which is triggered by 1 of those upstream jobs explicitly,
then watches the others.
Your job is then downstream of this "blocker" job, that will wait for completion
of &lt;em&gt;all&lt;/em&gt; of the upstreams.
This is weird "hack" to get a Jenkins job to wait for a set of jobs (or a single one) to be not in a running state.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$JOBS_TO_WAIT_FOR&lt;/span&gt;
&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$JENKINS_URI&lt;/span&gt;

&lt;span class="c1"&gt;# setup python environment&lt;/span&gt;
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;requests

&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import json&lt;/span&gt;
&lt;span class="s2"&gt;import requests&lt;/span&gt;
&lt;span class="s2"&gt;import time&lt;/span&gt;
&lt;span class="s2"&gt;jobs = &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JOB_TO_WAIT_FOR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;.strip().split(&amp;#39;,&amp;#39;)&lt;/span&gt;
&lt;span class="s2"&gt;anime = [True for job in jobs]&lt;/span&gt;

&lt;span class="s2"&gt;# wait for completion&lt;/span&gt;
&lt;span class="s2"&gt;while sum(anime) &amp;gt; 0:&lt;/span&gt;
&lt;span class="s2"&gt;    for i, job in enumerate(jobs):&lt;/span&gt;
&lt;span class="s2"&gt;        if anime[i]:&lt;/span&gt;
&lt;span class="s2"&gt;            r = requests.get(&amp;#39;{JENKINS_URI}/job/{job}/api/json?pretty=true&amp;#39;.format(job=job))&lt;/span&gt;
&lt;span class="s2"&gt;            print(r.content)&lt;/span&gt;
&lt;span class="s2"&gt;            x = json.loads(r.content.decode(&amp;#39;utf-8&amp;#39;))&lt;/span&gt;
&lt;span class="s2"&gt;            print(x)&lt;/span&gt;
&lt;span class="s2"&gt;            anime[i] = (&amp;#39;anime&amp;#39; in x[&amp;#39;color&amp;#39;])&lt;/span&gt;
&lt;span class="s2"&gt;    time.sleep(5)&lt;/span&gt;

&lt;span class="s2"&gt;# now check that they all had a successful last run (optional, of course)&lt;/span&gt;
&lt;span class="s2"&gt;time.sleep(5)&lt;/span&gt;
&lt;span class="s2"&gt;for job in jobs:&lt;/span&gt;
&lt;span class="s2"&gt;    r = requests.get(&amp;#39;{JENKINS_URI}/job/{job}/api/json?pretty=true&amp;#39;.format(job=job))&lt;/span&gt;
&lt;span class="s2"&gt;    print(r.content)&lt;/span&gt;
&lt;span class="s2"&gt;    x = json.loads(r.content.decode(&amp;#39;utf-8&amp;#39;))&lt;/span&gt;
&lt;span class="s2"&gt;    print(&amp;#39;-&amp;#39;*80)&lt;/span&gt;
&lt;span class="s2"&gt;    print(x)&lt;/span&gt;
&lt;span class="s2"&gt;    # make sure it was a success&lt;/span&gt;
&lt;span class="s2"&gt;    assert x[&amp;#39;lastCompletedBuild&amp;#39;][&amp;#39;number&amp;#39;] == x[&amp;#39;lastSuccessfulBuild&amp;#39;][&amp;#39;number&amp;#39;]&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I noted down this idea a couple years ago, with source code here: https://gist.github.com/andyreagan/ce25939367bcb2e6be9ce4f41a5edd8f.&lt;/p&gt;
&lt;p&gt;Merry hacking!&lt;/p&gt;</content><category term="Programming"></category><category term="jenkins"></category><category term="python"></category><category term="shell"></category></entry><entry><title>Programming with dplyr</title><link href="https://andyreagan.github.io/2021/11/09/programming-with-dplyr/" rel="alternate"></link><published>2021-11-09T00:00:00+01:00</published><updated>2021-11-09T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2021-11-09:/2021/11/09/programming-with-dplyr/</id><summary type="html">&lt;p&gt;This post is &lt;a href="https://towardsdatascience.com/programming-with-dplyr-a8161c03d947"&gt;published on Medium&lt;/a&gt; and available as an &lt;a href="https://gist.github.com/andyreagan/2a24f30a28ded04fef83d7abb0815f70"&gt;Rmd notebook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;dplyr&lt;/code&gt; version 1.0, there are new ways that you can write functions.
The &lt;a href="https://dplyr.tidyverse.org/articles/programming.html"&gt;programming with dplyr&lt;/a&gt; vignette with the docs is the best reference.&lt;/p&gt;
&lt;p&gt;If you're familiar with using &lt;code&gt;sym&lt;/code&gt; and converting from standard to nonstandard …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is &lt;a href="https://towardsdatascience.com/programming-with-dplyr-a8161c03d947"&gt;published on Medium&lt;/a&gt; and available as an &lt;a href="https://gist.github.com/andyreagan/2a24f30a28ded04fef83d7abb0815f70"&gt;Rmd notebook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;dplyr&lt;/code&gt; version 1.0, there are new ways that you can write functions.
The &lt;a href="https://dplyr.tidyverse.org/articles/programming.html"&gt;programming with dplyr&lt;/a&gt; vignette with the docs is the best reference.&lt;/p&gt;
&lt;p&gt;If you're familiar with using &lt;code&gt;sym&lt;/code&gt; and converting from standard to nonstandard form,
the following progression may be useful.
If you’re familiar with using &lt;code&gt;sym&lt;/code&gt; and converting from standard to nonstandard form, the following progression should show you how to replace (and extend) your code.
It should be mostly find-replace!
If you have a function that takes a character vector and uses an &lt;code&gt;_at&lt;/code&gt; verb, see the difference between the corresponding old option
(here, option 1 with &lt;code&gt;_at&lt;/code&gt; )
and see how this is changed for the "Super version" at the bottom.&lt;/p&gt;
&lt;h2&gt;Old option 1: use &lt;code&gt;*_at&lt;/code&gt; verbs&lt;/h2&gt;
&lt;p&gt;This is the old way of writing a dplyr function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;max_by_at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;group_by_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;summarise_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;na.rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's try it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That worked great, but it won't work for env variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;testthat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;expect_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;testthat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;expect_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;testthat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;expect_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Old(ish) option 2: use &lt;code&gt;across&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This works for characters and character vectors, but not for env variables.
Using &lt;code&gt;across&lt;/code&gt; is a replacement for using &lt;code&gt;*_at&lt;/code&gt;, and it has the same functionality:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;max_by_across&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;na.rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;.groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;keep&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;testthat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;expect_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;testthat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;expect_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;testthat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;expect_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Old option 3: Convert from character to env var by &lt;code&gt;sym&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;max_by_1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nf"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maximum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nf"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;na.rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It doesn't work for passing in env variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;testthat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;expect_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;testthat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;expect_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It does work for strings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But, it doesn't work for lists (so, it's less general than &lt;code&gt;across&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;testthat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;expect_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;testthat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;expect_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Better with braces&lt;/h1&gt;
&lt;p&gt;Check out this improved version!&lt;/p&gt;
&lt;p&gt;It works for env vars,
so we can use it like a dplyr function with non standard eval,
as well as pass in &lt;code&gt;sym&lt;/code&gt; variables.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;max_by_2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maximum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;na.rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It does work for env variables!&lt;/p&gt;
&lt;p&gt;Which is pretty cool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It does not work for strings out of the box:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can work around this with &lt;code&gt;sym&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nf"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It does not work for lists of env vars:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;testthat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;expect_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Super version&lt;/h1&gt;
&lt;p&gt;We'll use &lt;code&gt;across()&lt;/code&gt; to allow strings, lists of env vars, and even lists of strings.
The default for &lt;code&gt;by=()&lt;/code&gt; becomes an empty list and we simple wrap the &lt;code&gt;{{}}&lt;/code&gt; with &lt;code&gt;across()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;max_by_3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;.names&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;max_{.col}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;na.rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;.groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;keep&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works for env variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works for strings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works for lists of env variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works for character lists:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;starwars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max_by_3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you've seen how to write some very flexible functions using the new powers of dplyr programming.
Enjoy!&lt;/p&gt;</content><category term="Programming"></category><category term="R"></category><category term="dplyr"></category></entry><entry><title>Hartford Marathon</title><link href="https://andyreagan.github.io/2021/10/09/hartford-marathon/" rel="alternate"></link><published>2021-10-09T00:00:00+02:00</published><updated>2021-10-09T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2021-10-09:/2021/10/09/hartford-marathon/</id><summary type="html">&lt;p&gt;&lt;img src="/images/2021-10-09-hartford-marathon/2021-10-09-hartford-marathon.jpg" class="img-responsive" alt="me running the marathon"&gt;&lt;/p&gt;
&lt;p&gt;Joining in with Nick Symmonds and Ryan Hall's challenge to &lt;a href="https://www.youtube.com/watch?v=mmF94BHmL0k"&gt;deadlift 500 pounds and run a mile in under 5 minutes&lt;/a&gt;,
I was signed up for a marathon and couldn't resist going for a max pull the morning of.&lt;/p&gt;
&lt;p&gt;Cleared 225, 275, and 295 for my max lift at 5AM …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="/images/2021-10-09-hartford-marathon/2021-10-09-hartford-marathon.jpg" class="img-responsive" alt="me running the marathon"&gt;&lt;/p&gt;
&lt;p&gt;Joining in with Nick Symmonds and Ryan Hall's challenge to &lt;a href="https://www.youtube.com/watch?v=mmF94BHmL0k"&gt;deadlift 500 pounds and run a mile in under 5 minutes&lt;/a&gt;,
I was signed up for a marathon and couldn't resist going for a max pull the morning of.&lt;/p&gt;
&lt;p&gt;Cleared 225, 275, and 295 for my max lift at 5AM, then hit the road for Hartford.
I only had 10lb plates, so I failed 315 twice...though over 300 would have been a nice number!&lt;/p&gt;
&lt;p&gt;Had a great run,
despite falling apart at the end.
Maybe I just didn't have the fitness to run 26 at pace,
maybe I didn't take enough fluids,
or maybe I got carried away on the front a big group for miles 13-16,
but I held it together for 20 and had a lot of fun the whole time.&lt;/p&gt;
&lt;iframe height='405' width='590' frameborder='0' allowtransparency='true' scrolling='no' src='https://www.strava.com/activities/6087768988/embed/4f5c596860c660cba32936f9589bf5d06c2ce25d'&gt;&lt;/iframe&gt;</content><category term="Fitness"></category><category term="running"></category><category term="race report"></category></entry><entry><title>Embed Observable Notebooks</title><link href="https://andyreagan.github.io/2021/07/02/embed-observable-notebooks/" rel="alternate"></link><published>2021-07-02T00:00:00+02:00</published><updated>2021-07-02T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2021-07-02:/2021/07/02/embed-observable-notebooks/</id><summary type="html">&lt;p&gt;TL;DR: Use all of the cool examples with your own data, while keeping that data local or inside your network.&lt;/p&gt;
&lt;p&gt;If you haven’t heard of it,
&lt;a href="https://observablehq.com/trending"&gt;Observable&lt;/a&gt; is a platform for interactive coding brought to the world by Mike Bostock, creator of d3.
It embodies a bold vision …&lt;/p&gt;</summary><content type="html">&lt;p&gt;TL;DR: Use all of the cool examples with your own data, while keeping that data local or inside your network.&lt;/p&gt;
&lt;p&gt;If you haven’t heard of it,
&lt;a href="https://observablehq.com/trending"&gt;Observable&lt;/a&gt; is a platform for interactive coding brought to the world by Mike Bostock, creator of d3.
It embodies a bold vision of &lt;a href="https://www.youtube.com/watch?v=8pTEmbeENF4"&gt;reactive programming from Bret Victor&lt;/a&gt; and frankly,
I think it’s cool as hell.
One drawback:
I’m not the best at Javascript, the core language.
I’m pretty darn good at it,
don’t get me wrong,
but I’m continually impressed at the things people do on Observable.
At the risk of repeating the excellent guides from the Observable team,
I’ll just share a concrete example.&lt;/p&gt;
&lt;p&gt;If you get stuck on my guide, the definitive references are
&lt;a href="https://observablehq.com/@observablehq/introduction-to-embedding"&gt;Introduction to Embedding&lt;/a&gt;,
&lt;a href="https://observablehq.com/@observablehq/downloading-and-embedding-notebooks?collection=@observablehq/embed-trail"&gt;Advanced Embedding and Downloading&lt;/a&gt;,
and &lt;a href="https://observablehq.com/@observablehq/troubleshooting-embedding?collection=@observablehq/embedding-notebooks"&gt;Troubleshooting Embedding&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now let’s get going.
There are two excellent example visualizations from Mike Bostock showcasing d3:
&lt;a href="https://observablehq.com/@d3/line-chart-with-tooltip"&gt;Line Chart with Tooltip&lt;/a&gt; and
&lt;a href="https://observablehq.com/@d3/calendar-view"&gt;Calendar View&lt;/a&gt;.
I was showing my UC Berkeley MIDS class the latter,
and we were curious what the data shown in the calendar view would look like in the line chart.
Start by downloading the data from the calendar view:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2021-07-02-embed-observable-notebooks/1.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;Now that we have the data,
let’s create the embed.
From the line chart,
click the three dots in the top right and select embed:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2021-07-02-embed-observable-notebooks/2.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;Now we just want the chart,
so select only the chart.
Make sure get “Runtime with JavaScript” so we can override the data.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2021-07-02-embed-observable-notebooks/3.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;You should now have that snippet of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;observablehq-chart-22ee36d2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Credit: &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://observablehq.com/@d3/line-chart-with-tooltip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Line Chart with Tooltip by D3&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Inspector&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://cdn.jsdelivr.net/npm/@observablehq/runtime@4/dist/runtime.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://api.observablehq.com/@d3/line-chart-with-tooltip.js?v=3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Inspector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#observablehq-chart-22ee36d2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fire up an empty &lt;code&gt;index.html&lt;/code&gt; next to the &lt;code&gt;data.json&lt;/code&gt; that you already downloaded,
and we’ll wrap that embed in an HTML container
(in my Atom editor, I just type html and use the completion to get the “shell”).
It should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ltr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;observablehq-chart-b01c95fe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Inspector&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://cdn.jsdelivr.net/npm/@observablehq/runtime@4/dist/runtime.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://api.observablehq.com/@d3/line-chart-with-tooltip.js?v=3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Inspector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#observablehq-chart-b01c95fe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yAxis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bisect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  xAxis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;line&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we’ll load the data, by first loading the d3 library and using it to get the JSON file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ltr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;observablehq-chart-b01c95fe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://d3js.org/d3.v7.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Inspector&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://cdn.jsdelivr.net/npm/@observablehq/runtime@4/dist/runtime.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://api.observablehq.com/@d3/line-chart-with-tooltip.js?v=3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Inspector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#observablehq-chart-b01c95fe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yAxis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bisect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  xAxis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;line&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;goes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;here&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Okay, I did more than just load d3 and the data.
See what else?
I also stuck the runtime in a variable that I called "main" with &lt;code&gt;const main = ...&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally,
we just need to override the data on that runtime,
once it’s loaded.
To avoid repeating the whole block of code again,
we’ll just replace &lt;code&gt;[next bit goes here]&lt;/code&gt; with our override.
Let’s do it,
first making &lt;code&gt;Date&lt;/code&gt; objects out of the dates and adding the axis label,
then overriding the data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;newData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;})),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$ Close&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redefine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;newData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And it should work!
Since we’re requesting &lt;code&gt;data.json&lt;/code&gt; from the local filesystem,
to view the &lt;code&gt;index.html&lt;/code&gt; file you’ll need a local server
(your browser is protecting you from malicious JS files!).
Out of ease, I usually just spin up a python server with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;http.server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;while navigating on over to http://localhost:8000/ to see the finished product:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2021-07-02-embed-observable-notebooks/4.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;</content><category term="Programming"></category><category term="observable"></category><category term="W209"></category><category term="web development"></category></entry><entry><title>Homebrew and Pyenv Python Playing Pleasantly in Partnership</title><link href="https://andyreagan.github.io/2020/10/14/homebrew-and-pyenv-python-playing-pleasantly-in-partnership/" rel="alternate"></link><published>2020-10-14T00:00:00+02:00</published><updated>2020-10-14T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2020-10-14:/2020/10/14/homebrew-and-pyenv-python-playing-pleasantly-in-partnership/</id><summary type="html">&lt;p&gt;Like &lt;a href="https://towardsdatascience.com/how-to-setup-a-python-environment-for-machine-learning-354d6c29a264"&gt;many&lt;/a&gt; &lt;a href="https://towardsdatascience.com/power-up-your-python-projects-with-visual-studio-code-401f78dd97eb"&gt;data&lt;/a&gt; &lt;a href="https://towardsdatascience.com/the-python-dreamteam-27f6f9f08c34"&gt;scientists&lt;/a&gt; and &lt;a href="https://towardsdatascience.com/guide-of-choosing-package-management-tool-for-data-science-project-809a093efd46"&gt;Python&lt;/a&gt; &lt;a href="https://towardsdatascience.com/how-to-setup-an-awesome-python-environment-for-data-science-or-anything-else-35d358cc95d5"&gt;developers&lt;/a&gt; &lt;a href="https://towardsdatascience.com/managing-virtual-environment-with-pyenv-ae6f3fb835f8"&gt;before&lt;/a&gt; &lt;a href="https://towardsdatascience.com/power-up-your-python-projects-with-visual-studio-code-401f78dd97eb"&gt;me&lt;/a&gt;,
&lt;a href="https://towardsdatascience.com/setting-up-your-data-science-work-bench-4a8d3a28205c"&gt;I've&lt;/a&gt; &lt;a href="https://towardsdatascience.com/python-environment-101-1d68bda3094d"&gt;given&lt;/a&gt; &lt;a href="https://towardsdatascience.com/venvs-pyenvs-pipenvs-oh-my-2411149e2f43"&gt;up&lt;/a&gt; &lt;a href="https://towardsdatascience.com/the-top-4-virtual-environments-in-python-for-data-scientists-5db1c01fd779"&gt;on&lt;/a&gt; managing my own Python builds and turned to &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; (links to chronological posts in Towards Data Science).
At various points in time, I built Python versions &lt;a href="https://www.python.org/downloads/source/"&gt;from source myself&lt;/a&gt; or used the &lt;a href="https://www.python.org/downloads/mac-osx/"&gt;prebuilt Framework installers&lt;/a&gt; on OSX …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Like &lt;a href="https://towardsdatascience.com/how-to-setup-a-python-environment-for-machine-learning-354d6c29a264"&gt;many&lt;/a&gt; &lt;a href="https://towardsdatascience.com/power-up-your-python-projects-with-visual-studio-code-401f78dd97eb"&gt;data&lt;/a&gt; &lt;a href="https://towardsdatascience.com/the-python-dreamteam-27f6f9f08c34"&gt;scientists&lt;/a&gt; and &lt;a href="https://towardsdatascience.com/guide-of-choosing-package-management-tool-for-data-science-project-809a093efd46"&gt;Python&lt;/a&gt; &lt;a href="https://towardsdatascience.com/how-to-setup-an-awesome-python-environment-for-data-science-or-anything-else-35d358cc95d5"&gt;developers&lt;/a&gt; &lt;a href="https://towardsdatascience.com/managing-virtual-environment-with-pyenv-ae6f3fb835f8"&gt;before&lt;/a&gt; &lt;a href="https://towardsdatascience.com/power-up-your-python-projects-with-visual-studio-code-401f78dd97eb"&gt;me&lt;/a&gt;,
&lt;a href="https://towardsdatascience.com/setting-up-your-data-science-work-bench-4a8d3a28205c"&gt;I've&lt;/a&gt; &lt;a href="https://towardsdatascience.com/python-environment-101-1d68bda3094d"&gt;given&lt;/a&gt; &lt;a href="https://towardsdatascience.com/venvs-pyenvs-pipenvs-oh-my-2411149e2f43"&gt;up&lt;/a&gt; &lt;a href="https://towardsdatascience.com/the-top-4-virtual-environments-in-python-for-data-scientists-5db1c01fd779"&gt;on&lt;/a&gt; managing my own Python builds and turned to &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; (links to chronological posts in Towards Data Science).
At various points in time, I built Python versions &lt;a href="https://www.python.org/downloads/source/"&gt;from source myself&lt;/a&gt; or used the &lt;a href="https://www.python.org/downloads/mac-osx/"&gt;prebuilt Framework installers&lt;/a&gt; on OSX, all while managing the links in &lt;code&gt;/usr/local/bin&lt;/code&gt; by hand.
With either of those methods, I had no problem spinning virtual environments from any of the installed versions, but most recently my PATH and me got mixed up on whether we were using Homebrew's &lt;code&gt;python@3.8&lt;/code&gt; or the Framework version I had installed.
Enter pyenv.
If you're looking for how to set up pyenv, &lt;a href="https://amaral.northwestern.edu/resources/guides/pyenv-tutorial"&gt;there&lt;/a&gt; &lt;a href="https://opensource.com/article/20/4/pyenv"&gt;are&lt;/a&gt; &lt;a href="https://www.liquidweb.com/kb/how-to-install-pyenv-on-ubuntu-18-04/"&gt;no&lt;/a&gt; &lt;a href="https://wilsonmar.github.io/pyenv/"&gt;shortage&lt;/a&gt; &lt;a href="https://mungingdata.com/python/how-pyenv-works-shims/"&gt;of&lt;/a&gt; &lt;a href="https://realpython.com/intro-to-pyenv/"&gt;articles&lt;/a&gt; &lt;a href="https://medium.com/python-every-day/python-development-on-macos-with-pyenv-2509c694a808"&gt;or&lt;/a&gt; &lt;a href="https://medium.com/@weights_biases/pyenv-tutorial-for-machine-learning-9638e43a790f"&gt;blog&lt;/a&gt; &lt;a href="https://sourabhbajaj.com/mac-setup/Python/"&gt;posts&lt;/a&gt; &lt;a href="https://anil.io/blog/python/pyenv/using-pyenv-to-install-multiple-python-versions-tox/"&gt;on&lt;/a&gt; &lt;a href="https://stackabuse.com/managing-python-environments-with-direnv-and-pyenv/"&gt;how&lt;/a&gt; &lt;a href="https://duncanleung.com/set-up-python-pyenv-virtualenv-poetry/"&gt;to&lt;/a&gt; &lt;a href="https://binx.io/blog/2019/04/12/installing-pyenv-on-macos/"&gt;install&lt;/a&gt; &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-manage-python-with-pyenv-and-direnv"&gt;it&lt;/a&gt;, however, I'd recommend sticking to the official documentation.
As some of these articles mention, there are many ways to get Python on your OSX systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There's the built in Python 2.7.x (note: Python 2 is deprecated as of Dec 2019).&lt;/li&gt;
&lt;li&gt;Homebrew will provide a Python 3 build to satisfy it's own dependencies.&lt;/li&gt;
&lt;li&gt;You could have the Framework versions.&lt;/li&gt;
&lt;li&gt;You could have built it from source.&lt;/li&gt;
&lt;li&gt;Or as many would recommend, you can use pyenv to manage the versions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your system needs the built-in, and Homebrew is really only going to keep a single version of Python 3 for you, so you need to pick between the last three if you want to manage specific versions of Python 2 or 3.
I omitted Anaconda since I haven't needed it or taken the time to really understand how it works, but I have heard success stories for Windows users.
Here, we'll choose pyenv to manage python versions, but in doing so, we'll initially have multiple versions of both Python 2 and Python 3 on our system (those from pyenv in addition to the builtin version 2 and homebrew version 3).
Again, there's nothing we can do with the Python 2 builtin, OSX needs it.
&lt;strong&gt;For Python 3, we can have Homebrew &lt;em&gt;use&lt;/em&gt; one of pyenv's Python versions to eliminate that source of redundancy.&lt;/strong&gt;
Before we get started, it's worth noting that you're &lt;a href="https://stackoverflow.com/questions/32018969/coexistence-of-homebrew-and-pyenv-on-macosx-yosemite/64364243#64364243"&gt;unlikely to experience conflicts&lt;/a&gt; between pyenv and homebrew if you use your &lt;code&gt;PATH&lt;/code&gt; like pyenv recommends, and &lt;a href="https://docs.brew.sh/Homebrew-and-Python"&gt;Homebrew warns against it&lt;/a&gt;; you're wading into the territory of relying on your own understanding to support this use case (as Homebrew states in their post).&lt;/p&gt;
&lt;h2&gt;Use pyenv's Python to satisfy Homebrew dependencies&lt;/h2&gt;
&lt;p&gt;These &lt;a href="https://stackoverflow.com/questions/30499795/how-can-i-make-homebrews-python-and-pyenv-live-together"&gt;Stack Overflow answers&lt;/a&gt; have the right idea of using symbolic links (symlinks), but from what I can tell they don't get the links quite right.
Let's get them right!&lt;/p&gt;
&lt;p&gt;If you already have any traces of Homebrew's python3, first get rid of them (&lt;code&gt;brew unlink python3&lt;/code&gt; and &lt;code&gt;brew uninstall python3&lt;/code&gt;). If you already had python@3.8 from Homebrew, when uninstalling it, note the packages that depended on it (for example, &lt;code&gt;ffmpeg&lt;/code&gt;), and reinstall them after.&lt;/p&gt;
&lt;p&gt;As of this post, Homebrew is expected Python 3.8.6 for it's python@3.8, so first install that version with pyenv &lt;a href="https://github.com/pyenv/pyenv"&gt;following their documentation&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That will put (by default) the actual Python install in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~/.pyenv/versions/3.8.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we just need to add one link, and then let brew do the rest. I'll use full paths here, so you can run this from anywhere (and remember to read &lt;code&gt;ln -s ... ...&lt;/code&gt; in your head as "&lt;u&gt;l&lt;/u&gt;ink -&lt;u&gt;s&lt;/u&gt;ymbolic [target] [linkname]"):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;~/.pyenv/versions/3.8.6&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;cellar&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="k"&gt;)&lt;/span&gt;/3.8.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With the &lt;code&gt;-f&lt;/code&gt; flag, you could have omitted the trailing &lt;code&gt;/3.8.6&lt;/code&gt;, as &lt;code&gt;ln&lt;/code&gt; will use the name of the target. To be as explicit as possible on the link, you should have&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;~/.pyenv/versions/3.8.6&lt;span class="w"&gt; &lt;/span&gt;/usr/local/Cellar/python@3.8/3.8.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's what the result should look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;➜&lt;span class="w"&gt;  &lt;/span&gt;~&lt;span class="w"&gt; &lt;/span&gt;ll&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;--cellar&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="k"&gt;)&lt;/span&gt;
total&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
lrwxr-xr-x&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;my&lt;span class="w"&gt; &lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;admin&lt;span class="w"&gt;    &lt;/span&gt;36B&lt;span class="w"&gt; &lt;/span&gt;Oct&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;:52&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.8.6&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;
/Users/&lt;span class="o"&gt;[&lt;/span&gt;my&lt;span class="w"&gt; &lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt;/.pyenv/versions/3.8.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, let Homebrew manage the rest of necessary linking:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew&lt;span class="w"&gt; &lt;/span&gt;link&lt;span class="w"&gt; &lt;/span&gt;python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This article was inspired by my own exploration of how to make it work and that the answer to this question on Stack Overflow went unanswered (&lt;a href="https://stackoverflow.com/a/64364156/2577988"&gt;I answered it, I think!&lt;/a&gt;).&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="development environment"></category></entry><entry><title>Accessing the D3 documentation for older versions</title><link href="https://andyreagan.github.io/2020/09/18/accessing-the-d3-documentation-for-older-versions/" rel="alternate"></link><published>2020-09-18T00:00:00+02:00</published><updated>2020-09-18T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2020-09-18:/2020/09/18/accessing-the-d3-documentation-for-older-versions/</id><summary type="html">&lt;p&gt;D3 moves fast:&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Whew, D3 6.0 is out! Here are the detailed release notes, hot off the press. 😅 &lt;a href="https://t.co/XJMBHvoNG0"&gt;https://t.co/XJMBHvoNG0&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mike Bostock (@mbostock) &lt;a href="https://twitter.com/mbostock/status/1299025739807784960?ref_src=twsrc%5Etfw"&gt;August 27, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;I try to keep up, but inevitably have lots of production code,
tutorials,
and examples still in older versions (the biggest …&lt;/p&gt;</summary><content type="html">&lt;p&gt;D3 moves fast:&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Whew, D3 6.0 is out! Here are the detailed release notes, hot off the press. 😅 &lt;a href="https://t.co/XJMBHvoNG0"&gt;https://t.co/XJMBHvoNG0&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mike Bostock (@mbostock) &lt;a href="https://twitter.com/mbostock/status/1299025739807784960?ref_src=twsrc%5Etfw"&gt;August 27, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;I try to keep up, but inevitably have lots of production code,
tutorials,
and examples still in older versions (the biggest project I maintain, &lt;a href="https://hedonometer.org/timeseries/en_all/"&gt;hedonometer.org&lt;/a&gt;, is on v3...eek!).
Keeping all of that running would be impossible without the documentation for that code,
and thankfully we can still access everything because of how well the D3 team uses git, git tags, and the GitHub releases feature.&lt;/p&gt;
&lt;p&gt;You can access any older, or the current version of d3 itself through npmjs, &lt;a href="https://www.npmjs.com/package/d3/v/4.13.0"&gt;here’s the link to v4.13&lt;/a&gt;.
The instructions there show you how to use that version through npm, through cdnjs, etc.&lt;/p&gt;
&lt;p&gt;D3 itself, if you've made it this far you know, is a collection of submodules.
The main repository on GitHub is: &lt;a href="https://github.com/d3/d3"&gt;https://github.com/d3/d3&lt;/a&gt;.
This bundles most, but not all, of the submodules (notes on how to add additional modules are in the npmjs instruction above and in the readme on the GitHub).&lt;/p&gt;
&lt;p&gt;For accessing the older version of d3 on GitHub, you can click on the “tags” button, and scroll back to version &lt;code&gt;v4.13&lt;/code&gt;, you’ll end up on this link to the tag itself: &lt;a href="https://github.com/d3/d3/releases/tag/v4.13.0"&gt;https://github.com/d3/d3/releases/tag/v4.13.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you go from there to click on the commit tag (it looks like &lt;code&gt;dd87262&lt;/code&gt;), you’ll be here: &lt;a href="https://github.com/d3/d3/commit/dd8726223d70fd13056ba3e967c1f748928fb2cf"&gt;https://github.com/d3/d3/commit/dd87262...&lt;/a&gt;
and then you can click “browse files” to get back to the main repo pack at that specific release commit: &lt;a href="https://github.com/d3/d3/tree/dd8726223d70fd13056ba3e967c1f748928fb2cf"&gt;https://github.com/d3/d3/tree/dd87262...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From that version of the repo, you can access the API doc by clicking on the &lt;code&gt;API.md&lt;/code&gt; file, so that’s the docs for &lt;code&gt;v4.13&lt;/code&gt;!
If you didn’t follow all of the clicks, here it is: &lt;a href="https://github.com/d3/d3/blob/dd8726223d70fd13056ba3e967c1f748928fb2cf/API.md"&gt;https://github.com/d3/d3/blob/dd87262/API.md&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, some of the references in there refer you to the submodules, like clicking &lt;code&gt;d3.selection&lt;/code&gt;, it will send you here: &lt;a href="https://github.com/d3/d3-selection/blob/master/README.md#selection"&gt;https://github.com/d3/d3-selection/blob/master/README.md#selection&lt;/a&gt;.
Well, damn, that’s the latest release of &lt;code&gt;d3-selection&lt;/code&gt;, not the one bundled in d3 &lt;code&gt;v4.13&lt;/code&gt;.
But not to worry,
back on the main repo pack for the v4.13 commit,
navigate to the &lt;code&gt;index.js&lt;/code&gt; file and you’ll see all of the pinned dependencies.
For &lt;code&gt;d3-selection&lt;/code&gt;, it’s this line:
&lt;a href="https://github.com/d3/d3/blob/dd8726223d70fd13056ba3e967c1f748928fb2cf/package.json#L66"&gt;https://github.com/d3/d3/blob/dd87262/package.json#L66&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Phew,
now on the &lt;code&gt;d3-selection&lt;/code&gt; repo,
you can follow the same steps:
- Go to tags,
- scroll to version &lt;code&gt;1.3.0&lt;/code&gt;,
- click that one,
- click the commit tag,
- click browse files.
You’re back at &lt;code&gt;v1.3.0&lt;/code&gt; of &lt;code&gt;d3-selection&lt;/code&gt; with the code and documentation as it was when &lt;code&gt;v1.3.0&lt;/code&gt; was released.&lt;/p&gt;
&lt;p&gt;A bit of a saga, but in short you can find any version of d3,
the submodules,
and their documentation through GitHub.
It’s a good exercise in getting familiar with tagging releases with git
(&lt;code&gt;git tag v0.0.1; git push origin --tags;&lt;/code&gt;),
just how powerful that can be if done right,
and navigating around GitHub.&lt;/p&gt;</content><category term="Programming"></category><category term="javascript"></category><category term="d3"></category></entry><entry><title>Vectorizing code matters</title><link href="https://andyreagan.github.io/2020/09/17/vectorizing-code-matters/" rel="alternate"></link><published>2020-09-17T00:00:00+02:00</published><updated>2020-09-17T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2020-09-17:/2020/09/17/vectorizing-code-matters/</id><summary type="html">&lt;p&gt;I come from the world of MATLAB and numerical computing,
where for loops are shorn and vectors are king.
During my PhD at UVM,
&lt;a href="http://www.cems.uvm.edu/~tlakoba/"&gt;Professor Lakoba&lt;/a&gt;'s Numerical Analysis class was one of the most challenging courses I took
and the deep knowledge of numerical code still sticks with me …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I come from the world of MATLAB and numerical computing,
where for loops are shorn and vectors are king.
During my PhD at UVM,
&lt;a href="http://www.cems.uvm.edu/~tlakoba/"&gt;Professor Lakoba&lt;/a&gt;'s Numerical Analysis class was one of the most challenging courses I took
and the deep knowledge of numerical code still sticks with me.
My favorite example of a vectorization is when a colleague shared his Lorenz 96 code with me,
after writing a really cool paper about it that footnoted the massive amount of computation involved.
Well, vectorizing the inner loop was about 4x faster,
so now the footnote is a just a carbon footprint.&lt;/p&gt;
&lt;p&gt;Fast numerical code is what makes machine learning even possible these days,
though I'm not sure how many of the kids these days can write a &lt;a href="https://www.academia.edu/4902724/Numerical_Recipes_in_C_The_Art_of_Scientific_Computing_2nd_Ed_William_H_Press"&gt;QR decomposition in C&lt;/a&gt;.
I'm kidding, because I haven't done it, but I sure as heck could write it in MATLAB (at one point)
or in Numpy or Julia now (I'll stick to just magrittr and dplyr in R).
A lot of the work I do at MassMutual is fundamentally numerical computation,
and the difference of a pipeline that takes hours, even minutes from one that takes seconds is a big deal.
Seconds means we can iterate, try more options, and move faster.
Still, a lot of numerical code is written in pure Python (no Cython, no Numba),
for the &lt;em&gt;flexibility&lt;/em&gt;.
I'm going to argue that this is a bad idea!
Here's a paraphrased email from a colleague:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In pseudocode, this is the 'actuarial' coding dilemma I ran into months back:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;EOM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;months&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;years&lt;/span&gt;:
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;PREM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;BOM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;EOM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;PREM&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;WIT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;EOM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;BOM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;–&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;WIT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A simple example, but I think shows the BOM/EOM interdependence (there are a few other variables with a similar relationship.)
You can’t vectorize BOM without knowing EOM, and you can’t vectorize EOM until you know BOM.
Then you might have situations where IF WIT &amp;gt; 0 , PREM = 0.
Basically a lot of inter-dependence emerges.
Now a lot of the function is not appear easily vectorizable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, I can vectorize this, and I did.
Here's the non-vectorized version in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="n"&gt;years&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;bom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;years&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;eom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;years&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;prem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
    &lt;span class="n"&gt;bom&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eom&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;prem&lt;/span&gt;
    &lt;span class="n"&gt;wit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="n"&gt;eom&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bom&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;wit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here's the vectorized version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="n"&gt;years&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;prem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="n"&gt;wit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="n"&gt;eom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;years&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;prem&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;years&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;wit&lt;/span&gt;
&lt;span class="c1"&gt;# and if you still want bom as an array:&lt;/span&gt;
&lt;span class="n"&gt;bom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eom&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;years&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;wit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I also wrote the for-loop even more flexibly (read: as slow as I could think to) by using a list of dicts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;years&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;prem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="n"&gt;wit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;inner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;prem&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;wit&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This one above returns a different type of thing,
a list of dicts...not two arrays.&lt;/p&gt;
&lt;p&gt;We can also import Pandas to stuff results into for all three of the above (so they're consistent outputs, we could save to excel, etc).
If we have Pandas loaded,
we could use an empty dataframe for iteration,
so one more option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;years&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;prem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="n"&gt;wit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;years&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;years&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterrows&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bom&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;wit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With all of those types of iteration,
and with the the option to return a dataframe as the result,
this is what we get:&lt;/p&gt;
&lt;style&gt;td, th { padding-left: 15px; }&lt;/style&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;vectorized&lt;/th&gt;
&lt;th style="text-align: left;"&gt;return_type&lt;/th&gt;
&lt;th style="text-align: left;"&gt;iterate_type&lt;/th&gt;
&lt;th style="text-align: left;"&gt;time&lt;/th&gt;
&lt;th style="text-align: right;"&gt;slowdown&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;True&lt;/td&gt;
&lt;td style="text-align: left;"&gt;numpy&lt;/td&gt;
&lt;td style="text-align: left;"&gt;--&lt;/td&gt;
&lt;td style="text-align: left;"&gt;0.607289&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;False&lt;/td&gt;
&lt;td style="text-align: left;"&gt;numpy&lt;/td&gt;
&lt;td style="text-align: left;"&gt;numpy&lt;/td&gt;
&lt;td style="text-align: left;"&gt;15.2983&lt;/td&gt;
&lt;td style="text-align: right;"&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;False&lt;/td&gt;
&lt;td style="text-align: left;"&gt;list(dict)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;dict&lt;/td&gt;
&lt;td style="text-align: left;"&gt;9.2112&lt;/td&gt;
&lt;td style="text-align: right;"&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;True&lt;/td&gt;
&lt;td style="text-align: left;"&gt;pandas&lt;/td&gt;
&lt;td style="text-align: left;"&gt;--&lt;/td&gt;
&lt;td style="text-align: left;"&gt;37.8838&lt;/td&gt;
&lt;td style="text-align: right;"&gt;62&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;False&lt;/td&gt;
&lt;td style="text-align: left;"&gt;pandas&lt;/td&gt;
&lt;td style="text-align: left;"&gt;numpy&lt;/td&gt;
&lt;td style="text-align: left;"&gt;47.0335&lt;/td&gt;
&lt;td style="text-align: right;"&gt;77&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;False&lt;/td&gt;
&lt;td style="text-align: left;"&gt;pandas&lt;/td&gt;
&lt;td style="text-align: left;"&gt;dict&lt;/td&gt;
&lt;td style="text-align: left;"&gt;1717.72&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2828&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;False&lt;/td&gt;
&lt;td style="text-align: left;"&gt;pandas&lt;/td&gt;
&lt;td style="text-align: left;"&gt;pandas&lt;/td&gt;
&lt;td style="text-align: left;"&gt;77.5634&lt;/td&gt;
&lt;td style="text-align: right;"&gt;127&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;False&lt;/td&gt;
&lt;td style="text-align: left;"&gt;list&lt;/td&gt;
&lt;td style="text-align: left;"&gt;list&lt;/td&gt;
&lt;td style="text-align: left;"&gt;1.80763&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;False&lt;/td&gt;
&lt;td style="text-align: left;"&gt;numpy&lt;/td&gt;
&lt;td style="text-align: left;"&gt;numpy&lt;/td&gt;
&lt;td style="text-align: left;"&gt;14.6285&lt;/td&gt;
&lt;td style="text-align: right;"&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;False&lt;/td&gt;
&lt;td style="text-align: left;"&gt;list&lt;/td&gt;
&lt;td style="text-align: left;"&gt;c array&lt;/td&gt;
&lt;td style="text-align: left;"&gt;0.663318&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Addendum&lt;/h2&gt;
&lt;p&gt;I also add a few &lt;a href="https://cython.readthedocs.io/en/latest/src/tutorial/cython_tutorial.html"&gt;Cython&lt;/a&gt; versions of the code,
showing that you can get vectorized performance without numpy,
by using C.
This might indeed strike the best balance between readability (keep the for-loop!) and
speed.&lt;/p&gt;
&lt;p&gt;Numba may also retain the same speedups (it may be as fast as Cython/Vectorized Numpy).
In both cases (Cython/Numba),
you have to be careful about which datatypes you're using (no dicts or pandas!).
I think that it would be possible to make the Cython + Numpy loop just as fast
as vectorized numpy if you are &lt;a href="https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html#memoryviews"&gt;smarter about how to integrate them&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All of the code, including the Cython, is available here: &lt;a href="https://github.com/andyreagan/vectorizing-matters"&gt;https://github.com/andyreagan/vectorizing-matters&lt;/a&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="numpy"></category></entry><entry><title>Observable with local files and Flask</title><link href="https://andyreagan.github.io/2020/09/15/observable-with-local-files-and-flask/" rel="alternate"></link><published>2020-09-15T00:00:00+02:00</published><updated>2020-09-15T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2020-09-15:/2020/09/15/observable-with-local-files-and-flask/</id><summary type="html">&lt;p&gt;We're relying heavily on &lt;a href="https://observablehq.com/@berkeleyvis"&gt;Observable&lt;/a&gt; for the most recent edition of Berkeley MIDS W209: Information Visualization.
While Observable is a hosted tool, there are a handful of tricks that make is useful for enterprise applications (where data needs to reside locally).
One of these is relying on locally accessible data …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We're relying heavily on &lt;a href="https://observablehq.com/@berkeleyvis"&gt;Observable&lt;/a&gt; for the most recent edition of Berkeley MIDS W209: Information Visualization.
While Observable is a hosted tool, there are a handful of tricks that make is useful for enterprise applications (where data needs to reside locally).
One of these is relying on locally accessible data: Observable runs in &lt;em&gt;your browser&lt;/em&gt;, so it can access local files if you serve them or an entire local webapp or API.
Here, we'll connect an observable front-end to a both some simple file-serving web servers and to a Python Flask server running on my laptop to demonstrate how this is possible.&lt;/p&gt;
&lt;h2&gt;Basic Flask setup&lt;/h2&gt;
&lt;p&gt;For more details, follow along with the &lt;a href="https://flask.palletsprojects.com/en/1.1.x/quickstart/"&gt;Flask quickstart&lt;/a&gt;.
We'll start with the hello world app there:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# hello.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which we run in debug mode with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;FLASK_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;development&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hello.py&lt;span class="w"&gt; &lt;/span&gt;flask&lt;span class="w"&gt; &lt;/span&gt;run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;skip the &lt;code&gt;FLASK_ENV&lt;/code&gt; option if you don't want debug mode.
Now that's not doing much for us,
so let's make a API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/api/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/api/&amp;lt;filename&amp;gt;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# you could go load a file&lt;/span&gt;
        &lt;span class="c1"&gt;# json.loads(Path(filename).read_text())&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# maybe go query a database?&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;query_result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;

    &lt;span class="c1"&gt;# we just need to return the dict object&lt;/span&gt;
    &lt;span class="c1"&gt;# flask will treat returned dict objects as json responses&lt;/span&gt;
    &lt;span class="c1"&gt;# (flask will treat returned strings, like from hello_world(), as response bodies with default headers and content type)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cool, now we have an API in Flask.
In the response header, it set the &lt;code&gt;Content-Type: application/json&lt;/code&gt; (rather than the standard HTML page type of &lt;code&gt;Content-Type: text/html; charset=utf-8&lt;/code&gt;; FWIW I just copied both of those from the Network tab of Chrome's Inspector tool).
Of course you could do anything you want inside of &lt;code&gt;api()&lt;/code&gt; or &lt;code&gt;hello_world()&lt;/code&gt; functions,
like run a &lt;a href="https://www.tensorflow.org/"&gt;Tensorflow model&lt;/a&gt; on some data that was just uploaded via POST request,
and return the score from the model as an JSON "API" response.&lt;/p&gt;
&lt;h2&gt;CORS&lt;/h2&gt;
&lt;p&gt;The first thing we'll have to think about is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;Cross-Origin Resource Sharing&lt;/a&gt;.
Web browsers protect users by not allowing a website to host the content of a different site unless that site specifically allows it.
That means that I can't run githubb.com, show the github.com site's pages, and collect all of the details entered through my proxy site.
The github.com pages come back with headers that don't explicitly allow my site, githubb.com, and so it's not allowed (this operates as a white list).&lt;/p&gt;
&lt;p&gt;All this to say that our local site that hosting files will need to allow specifically &lt;code&gt;observablehq.com&lt;/code&gt; to use them!
We can be a little more relaxed and just allow any site to use our locally hosted files, by allowing &lt;code&gt;*&lt;/code&gt; if we want (these are only visible on our computer).&lt;/p&gt;
&lt;p&gt;Options for &lt;a href="https://flask.palletsprojects.com/en/1.1.x/quickstart/#about-responses"&gt;CORS with Flask&lt;/a&gt;:
- Just return &lt;code&gt;(response, {'Access-Control-Allow-Origin', 'observablehq.com'})&lt;/code&gt;.
- Or if you're included the status, &lt;code&gt;(response, 200, {'Access-Control-Allow-Origin', '*'})&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For our hello world, that would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Access-Control-Allow-Origin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Options for CORS just serving files with node &lt;a href="https://www.npmjs.com/package/http-server"&gt;http-server&lt;/a&gt;:
- Just set the &lt;code&gt;--cors&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;For CORS just serving files with &lt;code&gt;python3 -m http.server&lt;/code&gt;, there is &lt;a href="https://stackoverflow.com/a/21957017/2577988"&gt;no simple option&lt;/a&gt;.
You can wrap the simple server, but at this point, I'd recommend just using one of the two above.
Since we don't need to allow &lt;code&gt;*&lt;/code&gt; and we're setting the header directly, we'll just allow Observable.
The &lt;a href="https://docs.python.org/3/library/http.server.html"&gt;Python http.server documentation&lt;/a&gt; shows us how we can do it (note, this is a bit simpler than the solution provided in the SO post linked to above):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;http.server&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SimpleHTTPRequestHandler&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CORSRequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SimpleHTTPRequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;end_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Access-Control-Allow-Origin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;observablehq.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;SimpleHTTPRequestHandler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;CORSRequestHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;SSL&lt;/h2&gt;
&lt;p&gt;Again for our own good, most browsers won't allow a site running in HTTPS mode (a site that served content encrypted by SSL) to load assets from HTTP endpoints.
If they did, it might look like a site is secure with the "lock" icon, all while it's making unencrypted transactions with our data under the hood.
Observable is only serving on HTTPS, so we also need to serve with HTTPS.&lt;/p&gt;
&lt;p&gt;Flask, http-server, and Python3's simple server all serve without SSL by default.
For any of these, we can wrap them in &lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt;.
This is probably the simplest solution for development:
- Go create an account at &lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt;.
- Download the executable for your platform.
- &lt;code&gt;mv ngrok /usr/local/bin&lt;/code&gt; (or somewhere on your &lt;code&gt;PATH&lt;/code&gt;).
- Set you authtoken: &lt;code&gt;ngrok authtoken 1h3V...&lt;/code&gt;.
- Run it: &lt;code&gt;ngrok http 8080&lt;/code&gt;, using the port of the service you want to expose.&lt;/p&gt;
&lt;p&gt;Done! Only the final step is necessary each time you want to use it.&lt;/p&gt;
&lt;p&gt;To get started with SSL in any other option,
first we can generate a local key pair by &lt;a href="https://gist.github.com/cecilemuller/9492b848eb8fe46d462abeb26656c4f8"&gt;following instructions here&lt;/a&gt;.
First, I create a file &lt;code&gt;domains.ext&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;authorityKeyIdentifier&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;keyid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;issuer&lt;/span&gt;
&lt;span class="n"&gt;basicConstraints&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nl"&gt;CA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;FALSE&lt;/span&gt;
&lt;span class="n"&gt;keyUsage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;digitalSignature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nonRepudiation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keyEncipherment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dataEncipherment&lt;/span&gt;
&lt;span class="n"&gt;subjectAltName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@alt_names&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alt_names&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;DNS&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;
&lt;span class="n"&gt;DNS&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fake1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;
&lt;span class="n"&gt;DNS&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fake2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then run the following 5 commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;openssl&lt;span class="w"&gt; &lt;/span&gt;req&lt;span class="w"&gt; &lt;/span&gt;-x509&lt;span class="w"&gt; &lt;/span&gt;-nodes&lt;span class="w"&gt; &lt;/span&gt;-new&lt;span class="w"&gt; &lt;/span&gt;-sha256&lt;span class="w"&gt; &lt;/span&gt;-days&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-newkey&lt;span class="w"&gt; &lt;/span&gt;rsa:2048&lt;span class="w"&gt; &lt;/span&gt;-keyout&lt;span class="w"&gt; &lt;/span&gt;RootCA.key&lt;span class="w"&gt; &lt;/span&gt;-out&lt;span class="w"&gt; &lt;/span&gt;RootCA.pem&lt;span class="w"&gt; &lt;/span&gt;-subj&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/C=US/CN=W209-CA&amp;quot;&lt;/span&gt;
openssl&lt;span class="w"&gt; &lt;/span&gt;x509&lt;span class="w"&gt; &lt;/span&gt;-outform&lt;span class="w"&gt; &lt;/span&gt;pem&lt;span class="w"&gt; &lt;/span&gt;-in&lt;span class="w"&gt; &lt;/span&gt;RootCA.pem&lt;span class="w"&gt; &lt;/span&gt;-out&lt;span class="w"&gt; &lt;/span&gt;RootCA.crt
openssl&lt;span class="w"&gt; &lt;/span&gt;req&lt;span class="w"&gt; &lt;/span&gt;-new&lt;span class="w"&gt; &lt;/span&gt;-nodes&lt;span class="w"&gt; &lt;/span&gt;-newkey&lt;span class="w"&gt; &lt;/span&gt;rsa:2048&lt;span class="w"&gt; &lt;/span&gt;-keyout&lt;span class="w"&gt; &lt;/span&gt;localhost.key&lt;span class="w"&gt; &lt;/span&gt;-out&lt;span class="w"&gt; &lt;/span&gt;localhost.csr&lt;span class="w"&gt; &lt;/span&gt;-subj&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/C=US/ST=Massachusetts/L=Amherst/O=Example-Certificates/CN=localhost.local&amp;quot;&lt;/span&gt;
openssl&lt;span class="w"&gt; &lt;/span&gt;x509&lt;span class="w"&gt; &lt;/span&gt;-req&lt;span class="w"&gt; &lt;/span&gt;-sha256&lt;span class="w"&gt; &lt;/span&gt;-days&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-in&lt;span class="w"&gt; &lt;/span&gt;localhost.csr&lt;span class="w"&gt; &lt;/span&gt;-CA&lt;span class="w"&gt; &lt;/span&gt;RootCA.pem&lt;span class="w"&gt; &lt;/span&gt;-CAkey&lt;span class="w"&gt; &lt;/span&gt;RootCA.key&lt;span class="w"&gt; &lt;/span&gt;-CAcreateserial&lt;span class="w"&gt; &lt;/span&gt;-extfile&lt;span class="w"&gt; &lt;/span&gt;domains.ext&lt;span class="w"&gt; &lt;/span&gt;-out&lt;span class="w"&gt; &lt;/span&gt;localhost.crt
open&lt;span class="w"&gt; &lt;/span&gt;RootCA.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last command opens the cert in Mac's Keychain Access.
You need to double click the new key,
open the "Trust" section,
and always trust this CA.&lt;/p&gt;
&lt;p&gt;Options for SSL just serving files with node &lt;a href="https://www.npmjs.com/package/http-server"&gt;http-server&lt;/a&gt;:
- We can just set the &lt;code&gt;--ssl/S&lt;/code&gt; flag, and pass cert/key with &lt;code&gt;--cert&lt;/code&gt; and &lt;code&gt;--key&lt;/code&gt; options.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http-server&lt;span class="w"&gt; &lt;/span&gt;-S&lt;span class="w"&gt; &lt;/span&gt;--cert&lt;span class="w"&gt; &lt;/span&gt;localhost.crt&lt;span class="w"&gt; &lt;/span&gt;--key&lt;span class="w"&gt; &lt;/span&gt;localhost.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Options for SSL with Python's simple server (&lt;a href="https://blog.anvileight.com/posts/simple-python-http-server/#python-3-x-1"&gt;ref&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;http.server&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SimpleHTTPRequestHandler&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ssl&lt;/span&gt;


&lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4443&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;SimpleHTTPRequestHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrap_socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;keyfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost.key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;certfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost.crt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server_side&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or we can switch to using Python &lt;a href="https://twistedmatrix.com/trac/"&gt;Twisted&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;twistd&lt;span class="w"&gt; &lt;/span&gt;-no&lt;span class="w"&gt; &lt;/span&gt;web&lt;span class="w"&gt; &lt;/span&gt;--path
&lt;span class="c1"&gt;# with SSL&lt;/span&gt;
twistd&lt;span class="w"&gt; &lt;/span&gt;-no&lt;span class="w"&gt; &lt;/span&gt;web&lt;span class="w"&gt; &lt;/span&gt;--path&lt;span class="w"&gt; &lt;/span&gt;–https&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;443&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;localhost.crt&lt;span class="w"&gt; &lt;/span&gt;-k&lt;span class="w"&gt; &lt;/span&gt;localhost.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Flask from the CLI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;FLASK_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;development&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hello.py&lt;span class="w"&gt; &lt;/span&gt;flask&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--cert&lt;span class="w"&gt; &lt;/span&gt;localhost.crt&lt;span class="w"&gt; &lt;/span&gt;--key&lt;span class="w"&gt; &lt;/span&gt;localhost.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is an option to generate self-signed cert on the fly,
but it didn't work for me (&lt;code&gt;NET::ERR_CERT_AUTHORITY_INVALID&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;FLASK_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;development&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hello.py&lt;span class="w"&gt; &lt;/span&gt;flask&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--cert&lt;span class="o"&gt;=&lt;/span&gt;adhoc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;All together&lt;/h2&gt;
&lt;p&gt;The simplest solution for files:
we can serve local files to Observable with two lines (and the &lt;code&gt;ngrok&lt;/code&gt; setup) with just:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http-server&lt;span class="w"&gt; &lt;/span&gt;--cors
ngrok&lt;span class="w"&gt; &lt;/span&gt;http&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then pointing Observable to the ngrok https &lt;a href="https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn"&gt;URI&lt;/a&gt; it gives you.
It should be clear how to combine any of the CORS solutions with ngrok for https.
To combine the CORS and SSL, with the self signed certs: first generate the certs as above, then:&lt;/p&gt;
&lt;h3&gt;Node simple server (http-server)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http-server&lt;span class="w"&gt; &lt;/span&gt;--cors&lt;span class="w"&gt; &lt;/span&gt;-S&lt;span class="w"&gt; &lt;/span&gt;--cert&lt;span class="w"&gt; &lt;/span&gt;localhost.crt&lt;span class="w"&gt; &lt;/span&gt;--key&lt;span class="w"&gt; &lt;/span&gt;localhost.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Python simple server&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;http.server&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SimpleHTTPRequestHandler&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ssl&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CORSRequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SimpleHTTPRequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;end_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Access-Control-Allow-Origin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;observablehq.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;SimpleHTTPRequestHandler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;CORSRequestHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrap_socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;keyfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost.key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;certfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost.crt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server_side&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then run from the command line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 script.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Flask&lt;/h3&gt;
&lt;p&gt;Already done!
Just take &lt;code&gt;hello.py&lt;/code&gt; with the CORS headers,
and run it with the certs passed in.&lt;/p&gt;
&lt;p&gt;Or you can run &lt;code&gt;python hello.py&lt;/code&gt; and set the certs inside the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ssl_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost.crt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost.key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Connect to Observable&lt;/h2&gt;
&lt;p&gt;The last part is just fun now.
Spin up an Observable notebook,
import d3 (&lt;code&gt;d3 = require("d3@6")&lt;/code&gt;),
and load our Flask API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://localhost:5000/api/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Programming"></category><category term="observable"></category><category term="web development"></category><category term="development environment"></category></entry><entry><title>Boston Marathon 2020: Take 2</title><link href="https://andyreagan.github.io/2020/09/13/boston-marathon-2020-take-2/" rel="alternate"></link><published>2020-09-13T00:00:00+02:00</published><updated>2020-09-13T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2020-09-13:/2020/09/13/boston-marathon-2020-take-2/</id><summary type="html">&lt;p&gt;The COVID-19 pandemic not only delayed the Boston Marathon until September,
but cancelled it entirely.
The organizers moved to a virtual format, and of course, I had to do it.&lt;/p&gt;
&lt;p&gt;On Strava:&lt;/p&gt;
&lt;iframe height='405' width='590' frameborder='0' allowtransparency='true' scrolling='no' src='https://www.strava.com/activities/4053907192/embed/c9bf0ea1cb144408c8fd94db612134f6dacb80d5'&gt;&lt;/iframe&gt;

&lt;p&gt;And if you don’t get motion sick, and want to hear me complain about running with a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The COVID-19 pandemic not only delayed the Boston Marathon until September,
but cancelled it entirely.
The organizers moved to a virtual format, and of course, I had to do it.&lt;/p&gt;
&lt;p&gt;On Strava:&lt;/p&gt;
&lt;iframe height='405' width='590' frameborder='0' allowtransparency='true' scrolling='no' src='https://www.strava.com/activities/4053907192/embed/c9bf0ea1cb144408c8fd94db612134f6dacb80d5'&gt;&lt;/iframe&gt;

&lt;p&gt;And if you don’t get motion sick, and want to hear me complain about running with a vest, here you go:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/EEW8Hw3Z8IQ" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="Fitness"></category><category term="running"></category><category term="race report"></category></entry><entry><title>Atom vs RStudio</title><link href="https://andyreagan.github.io/2020/06/08/atom-vs-rstudio/" rel="alternate"></link><published>2020-06-08T00:00:00+02:00</published><updated>2020-06-08T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2020-06-08:/2020/06/08/atom-vs-rstudio/</id><summary type="html">&lt;p&gt;Let's talk about workflow.&lt;/p&gt;
&lt;p&gt;Most R users that I know use RStudio.&lt;/p&gt;
&lt;p&gt;Most programmers that I know use a text editor like Emacs,
or use what is embedded into an IDE like PyCharm or IntelliJ.
https://jstaf.github.io/2018/03/25/atom-ide.html&lt;/p&gt;
&lt;p&gt;There are some things to like …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's talk about workflow.&lt;/p&gt;
&lt;p&gt;Most R users that I know use RStudio.&lt;/p&gt;
&lt;p&gt;Most programmers that I know use a text editor like Emacs,
or use what is embedded into an IDE like PyCharm or IntelliJ.
https://jstaf.github.io/2018/03/25/atom-ide.html&lt;/p&gt;
&lt;p&gt;There are some things to like about RStudio (especially once you &lt;a href="https://www.r-bloggers.com/a-perfect-rstudio-layout/"&gt;get the layout right&lt;/a&gt;),
but it's a still a primarily &lt;em&gt;point-and-click&lt;/em&gt; experience.
I want to be able to do text editor things that should never need a mouse:
open and close files,
comment out lines,
edit many lines of text at the same time.
At the same time I want to be able to do IDE things without excessive (or any) pointing and clicking around:
run bits of code,
run entire scripts,
view the contents of dataframes,
find where functions are defined.
All of this is possible in &lt;strong&gt;Atom using Hydrogen&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let's run through a few examples of what this looks like in day-to-day use,
and then I'll share the nitty gritty on getting Atom+Hydrogen set up (it's not &lt;em&gt;quite&lt;/em&gt; as streamlined as just downloading RStudio).&lt;/p&gt;
&lt;h2&gt;Create a file and start the editor&lt;/h2&gt;
&lt;p&gt;First, we need a file. Start in the project directory.&lt;/p&gt;
&lt;h3&gt;Atom&lt;/h3&gt;
&lt;p&gt;Start Atom with &lt;code&gt;atom .&lt;/code&gt; or jump through the file creation with &lt;code&gt;atom scratch.R&lt;/code&gt;. If you just opened Atom with &lt;code&gt;atom .&lt;/code&gt; (which I usually do), just &lt;code&gt;^x ^f&lt;/code&gt;, type the path (let's just create &lt;code&gt;scratch.R&lt;/code&gt;) and start typing. So far, we've spent a few seconds at the keyboard to create the file and type out &lt;code&gt;x = 10&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;RStudio&lt;/h3&gt;
&lt;p&gt;We can start RStudio the same way, &lt;code&gt;RStudio .&lt;/code&gt;, and create the new file with &lt;code&gt;Command+N&lt;/code&gt;.
We can give it the filename by saving, &lt;code&gt;Command+s&lt;/code&gt;. If the file already existed, we'd need to click the Files pane, navigate to it, and click the filename.
Click on the file, and type in &lt;code&gt;x = 10&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Run code&lt;/h2&gt;
&lt;p&gt;Now let's go ahead and start running code.&lt;/p&gt;
&lt;h3&gt;Atom&lt;/h3&gt;
&lt;p&gt;To start the kernel first: Command+P, start typing "start" and hit enter to &lt;code&gt;Hydrogen: Start Local Kernel&lt;/code&gt;.
You'll have to hit enter again to select "R" and then boom, you &lt;code&gt;10&lt;/code&gt; printed after.
You could also just Shift+Enter on the line &lt;code&gt;x=10&lt;/code&gt; and Atom will go ahead and start the kernel for you (you'll still need to hit enter to confirm "R").&lt;/p&gt;
&lt;h3&gt;RStudio&lt;/h3&gt;
&lt;p&gt;This is about the same, Shift+Enter and your code runs in "Console" pane.&lt;/p&gt;
&lt;h2&gt;Write more code&lt;/h2&gt;
&lt;p&gt;This where RStudio and Atom really get different.
In Atom, with &lt;code&gt;atomic-emacs&lt;/code&gt;,
I can do all of the following things from the keyboard:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grab a block of code to indent, edit in multi-line mode, or comment it out.&lt;ul&gt;
&lt;li&gt;In Rstudio, you could select with the mouse and use the menu or a keyboard shortcut to comment lines, or auto-indent lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Move the cursor forward by whole words, and/or select parts of code this way.&lt;ul&gt;
&lt;li&gt;Again, this is a point and click in R.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I guess this is really the biggest differentiator for me in Atom:
the ability to manipulate raw text very quickly and easily,
without any clicking around or selecting things.
Making tasks that take 15 seconds only take 3 seconds (like executing a specific part of a line, or block of code) adds up!&lt;/p&gt;
&lt;h2&gt;Setting up Hydrogen&lt;/h2&gt;
&lt;p&gt;You still need base R,
and then to &lt;a href="https://github.com/IRkernel/IRkernel"&gt;install the IRKernel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In one line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Rscript&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;install.packages(&amp;quot;IRkernel&amp;quot;, repos=&amp;quot;http://cran.us.r-project.org&amp;quot;); IRkernel::installspec(name = &amp;quot;ir351&amp;quot;, displayname = &amp;quot;R 3.5.1&amp;quot;);&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install the following Atom packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://atom.io/packages/atom-language-r&lt;/li&gt;
&lt;li&gt;https://atom.io/packages/hydrogen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And in the Atom settings for Hydrogen,
under "language mapping",
set &lt;code&gt;{"ir351": "R"}&lt;/code&gt;.
You may not need to set this, I didn't need to, but just in case.&lt;/p&gt;
&lt;p&gt;Enjoy whichever editor you're using :)&lt;/p&gt;</content><category term="Programming"></category><category term="R"></category><category term="development environment"></category></entry><entry><title>Great Expectations of Vertica</title><link href="https://andyreagan.github.io/2020/05/29/great-expectations-of-vertica/" rel="alternate"></link><published>2020-05-29T00:00:00+02:00</published><updated>2020-05-29T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2020-05-29:/2020/05/29/great-expectations-of-vertica/</id><summary type="html">&lt;p&gt;Great Expectations is a useful tool in any data pipeline to ensure that data is what you expect.
While data validation and such have been compared to Data Science's "janitorial work",
others argue that it's really part of the analysis.
Either way,
I've had enough headaches with analysis being wrong …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Great Expectations is a useful tool in any data pipeline to ensure that data is what you expect.
While data validation and such have been compared to Data Science's "janitorial work",
others argue that it's really part of the analysis.
Either way,
I've had enough headaches with analysis being wrong and pipelines breaking downstream that
checking data at the source for some basic consistency is worth it.
The team at GE &lt;a href="https://github.com/superconductive/ge_tutorials"&gt;has tutorials for file backend and for postgres&lt;/a&gt;,
so let's try with Vertica via sqlalchemy.&lt;/p&gt;
&lt;p&gt;Now, first run Vertica:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5433&lt;/span&gt;:5433&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DATABASE_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo123&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jbfavre/vertica:9.2.0-7_debian-8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Confirm that you can connect to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;select &amp;#39;hello&amp;#39;;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;vsql&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5433&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-h&lt;span class="w"&gt; &lt;/span&gt;localhost&lt;span class="w"&gt; &lt;/span&gt;-U&lt;span class="w"&gt; &lt;/span&gt;dbadmin&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;-w&lt;span class="w"&gt; &lt;/span&gt;foo123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, GE uses Sqlachemy, so let's get a valid connection string using &lt;a href="https://github.com/bluelabsio/sqlalchemy-vertica-python/"&gt;sqlachemy-vertica-python&lt;/a&gt;.
First, here's how to do the installs in your global Python (no virtualenv) as installed via the OSX installer (as a "Framework"):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-U&lt;span class="w"&gt; &lt;/span&gt;pip
/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;great_expectations&lt;span class="w"&gt; &lt;/span&gt;sqlalchemy&lt;span class="w"&gt; &lt;/span&gt;sqlalchemy-vertica-python&lt;span class="w"&gt; &lt;/span&gt;vertica-python&lt;span class="w"&gt; &lt;/span&gt;pandas&lt;span class="w"&gt; &lt;/span&gt;ipython
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I use ipython, so you can use it to test the connection. Test it, in ipython:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# /Library/Frameworks/Python.framework/Versions/3.8/bin/ipython&lt;/span&gt;
import&lt;span class="w"&gt; &lt;/span&gt;sqlalchemy&lt;span class="w"&gt; &lt;/span&gt;as&lt;span class="w"&gt; &lt;/span&gt;sa
&lt;span class="nv"&gt;engine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sa.create_engine&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vertica+vertica_python://dbadmin:foo123@localhost:5433/docker&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
engine.connect&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Go ahead and load the example file from GE's tutorial to the database,
this may be the hardest part.
There is code here to load the NPI data file from an older version of the tutorial,
and the currently uncommented code below works for &lt;a href="https://github.com/superconductive/ge_tutorials"&gt;the most recent tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;vertica_python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt;

&lt;span class="c1"&gt;# older one:&lt;/span&gt;
&lt;span class="c1"&gt;# df = pd.read_csv(&amp;quot;data/npidata_pfile_20200511-20200517.csv&amp;quot;)&lt;/span&gt;
&lt;span class="c1"&gt;# newest:&lt;/span&gt;
&lt;span class="n"&gt;dtypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;vendor_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;rate_code_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;store_and_fwd_flag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;payment_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data/yellow_tripdata_sample_2019-01.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dtypes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;vertica_to_pandas_dtype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dtype_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Parse pandas data types and convert to valid Vertica data types.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;float&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dtype_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dtype_string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;numeric&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;datetime&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;varchar(&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;)&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="n"&gt;columns_with_types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vertica_to_pandas_dtype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtypes&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="n"&gt;column_name_listing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns_with_types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;column_with_dtype_listing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;columns_with_types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;

&lt;span class="n"&gt;conn_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dbadmin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo123&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;database&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;use_prepared_statements&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;vertica_python&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;conn_info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# older table&lt;/span&gt;
    &lt;span class="c1"&gt;# cur.execute(&amp;#39;CREATE TABLE npidata_pfile_20200511_20200517 ({0});&amp;#39;.format(column_with_dtype_listing))&lt;/span&gt;
    &lt;span class="c1"&gt;# yellowcab table:&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CREATE TABLE if not exists yellow_tripdata_sample_2019_01 (&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;);&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_with_dtype_listing&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;# copy the schema to a second table (so many ways to do this, just one)&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SELECT * INTO yellow_tripdata_staging FROM (select * from yellow_tripdata_sample_2019_01 limit 10) x;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# we could have limited to 0 rows, but let&amp;#39;s truncate those 10 instead&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TRUNCATE TABLE yellow_tripdata_staging;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;commit;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# with open(&amp;quot;data/yellow_tripdata_sample_2019-01.csv&amp;quot;, &amp;quot;rb&amp;quot;) as f:&lt;/span&gt;
    &lt;span class="c1"&gt;#     cur.copy(&amp;quot;COPY yellow_tripdata_sample_2019_01 ({0}) from stdin DELIMITER &amp;#39;,&amp;#39; &amp;quot;.format(column_name_listing),  f)&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;COPY yellow_tripdata_sample_2019_01 (&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s2"&gt;) from LOCAL &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; DELIMITER &amp;#39;,&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name_listing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data/yellow_tripdata_sample_2019-01.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;COPY yellow_tripdata_staging (&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s2"&gt;) from LOCAL &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; DELIMITER &amp;#39;,&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name_listing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data/yellow_tripdata_sample_2019-02.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# spot check that the data looks okay in the database&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;vertica_python&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;conn_info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select count(*) from yellow_tripdata_sample_2019_01;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select count(*) from yellow_tripdata_staging;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select * from yellow_tripdata_sample_2019_01 limit 1;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select * from yellow_tripdata_staging limit 1;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can run through the GE tutorial, using a database.
You have the connection string above, so you'll chose the database option, (the "other", it might still be option 6),
and create the sample expectations of this table.&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="data engineering"></category><category term="vertica"></category></entry><entry><title>Boston Marathon 2020: From a Basement Near You</title><link href="https://andyreagan.github.io/2020/04/20/boston-marathon-2020-from-a-basement-near-you/" rel="alternate"></link><published>2020-04-20T00:00:00+02:00</published><updated>2020-04-20T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2020-04-20:/2020/04/20/boston-marathon-2020-from-a-basement-near-you/</id><summary type="html">&lt;p&gt;The COVID-19 pandemic has led to the cancellation of most events,
including the Boston Marathon (which made it through the 1918 flu and 2 world wars).
Alas, I couldn't let my half-assed training go to "waste",
so I took to the basement.&lt;/p&gt;
&lt;p&gt;I'd already taken the time off from work …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The COVID-19 pandemic has led to the cancellation of most events,
including the Boston Marathon (which made it through the 1918 flu and 2 world wars).
Alas, I couldn't let my half-assed training go to "waste",
so I took to the basement.&lt;/p&gt;
&lt;p&gt;I'd already taken the time off from work,
so the hardest part of the whole marathon was going to be convincing my wife to get up earlier
with the kids while I wasn't working after taking care of them all night.
Turns out, that very well might have been the hardest part,
but she still supports many of my hair-brained ideas (see more later under "Sam Saves the Marathon").&lt;/p&gt;
&lt;p&gt;All-in-all, it was a lot of fun running on Zoom with lots of friends and family dialed in,
but I'm not sure I want to do it again!
The finish time was 2:50:50,
a big PR!
With only two wimpy fans blowing on me,
I started to overheat about halfway through.
My wife, Sam, saved me (with encouragement to ask her from Mr Connery!)
by setting up a big ol' box fan.&lt;/p&gt;
&lt;p&gt;Here's the finish where you can sort-of see the distance and time:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2020-04-20-virtual-boston-marathon/1.png" class="img-responsive"&gt;&lt;/p&gt;</content><category term="Fitness"></category><category term="running"></category><category term="race report"></category></entry><entry><title>Column level encryption on a Vertica Database</title><link href="https://andyreagan.github.io/2020/01/08/column-level-encryption-on-a-vertica-database/" rel="alternate"></link><published>2020-01-08T00:00:00+01:00</published><updated>2020-01-08T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2020-01-08:/2020/01/08/column-level-encryption-on-a-vertica-database/</id><summary type="html">&lt;p&gt;Vertica is a very powerful analytics database,
and security is important!
You might need to store sensitive data,
like SSN,
but you don't want the SSNs available to anyone who can see the table on the database.
To provide an additional layer of security,
we can encrypt the SSN itself …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vertica is a very powerful analytics database,
and security is important!
You might need to store sensitive data,
like SSN,
but you don't want the SSNs available to anyone who can see the table on the database.
To provide an additional layer of security,
we can encrypt the SSN itself and store the encrypted data.&lt;/p&gt;
&lt;p&gt;We can easily extend Vertica functionality now by building in Python functions,
so we'll do this in Python.
To get set up developing with Python for Vertica,
see my &lt;a href="https://andyreagan.github.io/2019/07/05/developing-python-on-vertica/"&gt;previous post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are many different algorithms around,
here we'll choose RSA.
If you're not familiar with RSA,
all you really need to know is that there are two keys:
(1) used to encrypt data (in RSA parlance, the public key)
and (2) use to decrypt the data (the private key).
The cryptography relies on a hard problem one way (factoring a multiple of two large primes),
that is very easy the other way (creating that number if you have both primes: you just multiply).&lt;/p&gt;
&lt;p&gt;Example: we have SSN data &lt;code&gt;111-22-3333&lt;/code&gt;.
Using an encryption key of &lt;code&gt;30820122300d0...&lt;/code&gt; (it's 512 characters of this),
we'll turn &lt;code&gt;111-22-3333&lt;/code&gt; into a long string of letters and numbers.
We could use the decryption key on that long string to get back the original SSN.&lt;/p&gt;
&lt;h2&gt;Create the encryption script in Python&lt;/h2&gt;
&lt;p&gt;Using the &lt;code&gt;pycrypto&lt;/code&gt; library, here's how we can construct a simple encryption script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# encrypt_lambda.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Crypto.PublicKey&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RSA&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;binascii&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RSA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;binPrivKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exportKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;binPubKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publickey&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exportKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bin2hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binStr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;binascii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexlify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hex2bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hexStr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;binascii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unhexlify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hexStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bin2hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RSA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;importKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hex2bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can test this by first installing &lt;code&gt;pycrypto&lt;/code&gt;, then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3&lt;span class="w"&gt; &lt;/span&gt;encrypt_lambda.py&lt;span class="w"&gt; &lt;/span&gt;30820122300d06092a864886f70d01010105000382010f003082010a0282010100df91d2e51370d260a25dbc0121ce0c999f0a0896f8e44c04b6d331be91fa74a7c51bf4c7dfa49835a18116520a685d6e314dfbd047dcdf999ffcfda3770dfb24776a0dda94d6795c517c9c304a3da893a837371811a64f66bcb743d40fbb2aba4701c5f4a536b740773d672db5ec48a538cda7bebda8dc3161a14cb26e371fb9eacf5f50cf7626d5d84daf7a34d3b2bdab336d89ff640afaced9c29aa86007b7da10db05c0298e84f4662663941dbe8bbe6a18732bb0ee4af1ac561b0e47f2beefe22a4179bada94d3fb154b4cfeca29eef5b8bf1198cd11167918de5cf3c2e30c2eabdee953f6d49804f441d29a9cbaa4553c08711afe14d624a200a2b30d8d0203010001&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;111223333&lt;/span&gt;
6d0eb35fd82302731c5649773b873e3a714c14af356f8dba6b07fc8ba3c1aa9fcd9b041dfb4c359574433bc0d38a14ab12f211ad1a2ef069a791b6dee006405af9e97f1012abf0458f2ae7f4557278bce4444c2a86491d304dedf63f4328ff14e53232bd64c4174a85cb9b52d00f285df80328686c10b67634424984f47d23803ceef9ddae1ab782b4816bb935e0cf28ae2dc9e76453610a3d62a0b6261703e8f6fa8100f310758a472331b8cb76024a59f93b887a8a3f9b6e4ddbcc650f8d42c2ef17f09209e7d2d007c9688a538052520c9578c5e70c7ef0479490d27f250e2915afb1e08674587bf63679651cc67ee973593f51f5d4157644d3a8ab9f14eb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For Vertica, we have to create the sdk classes,
name this one &lt;code&gt;rsa.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# rsa.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Crypto.PublicKey&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RSA&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;binascii&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;vertica_sdk&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bin2hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binStr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;binascii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexlify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hex2bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hexStr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;binascii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unhexlify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hexStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vertica_sdk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScalarFunction&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Very simple scalar function which adds its two integer inputs&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;processBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server_interface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg_reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res_writer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;server_interface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello! python_udxes_are_great&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg_reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# get the second argument&lt;/span&gt;
            &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg_reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bin2hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RSA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;importKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hex2bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;res_writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;res_writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;arg_reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;encrypt_factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vertica_sdk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScalarFunctionFactory&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getPrototype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;srv_interface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg_types&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arg_types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addVarchar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# add a second argument&lt;/span&gt;
        &lt;span class="n"&gt;arg_types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addVarchar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;return_type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addVarchar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getReturnType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;srv_interface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg_types&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;return_type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addVarchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;createScalarFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Deploy it on Vertica&lt;/h2&gt;
&lt;p&gt;Then we create the function on Vertica, using the SDK-friendly script above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;libfile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\&amp;#39;&amp;#39;`pwd`&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;DROP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LIBRARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rsalib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LIBRARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rsalib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;libfile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DEPENDS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/dbadmin/local/lib/python3.5/site-packages/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LANGUAGE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;-- Step 2: Create functions&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FUNCTION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;encrypt_factory&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LIBRARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rsalib&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can test the function directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;30820122300d06092a864886f70d01010105000382010f003082010a0282010100df91d2e51370d260a25dbc0121ce0c999f0a0896f8e44c04b6d331be91fa74a7c51bf4c7dfa49835a18116520a685d6e314dfbd047dcdf999ffcfda3770dfb24776a0dda94d6795c517c9c304a3da893a837371811a64f66bcb743d40fbb2aba4701c5f4a536b740773d672db5ec48a538cda7bebda8dc3161a14cb26e371fb9eacf5f50cf7626d5d84daf7a34d3b2bdab336d89ff640afaced9c29aa86007b7da10db05c0298e84f4662663941dbe8bbe6a18732bb0ee4af1ac561b0e47f2beefe22a4179bada94d3fb154b4cfeca29eef5b8bf1198cd11167918de5cf3c2e30c2eabdee953f6d49804f441d29a9cbaa4553c08711afe14d624a200a2b30d8d0203010001&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;111-53-8888&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also store keys in a table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;public_keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;public_keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;andys key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;30820122300d06092a864886f70d01010105000382010f003082010a0282010100df91d2e51370d260a25dbc0121ce0c999f0a0896f8e44c04b6d331be91fa74a7c51bf4c7dfa49835a18116520a685d6e314dfbd047dcdf999ffcfda3770dfb24776a0dda94d6795c517c9c304a3da893a837371811a64f66bcb743d40fbb2aba4701c5f4a536b740773d672db5ec48a538cda7bebda8dc3161a14cb26e371fb9eacf5f50cf7626d5d84daf7a34d3b2bdab336d89ff640afaced9c29aa86007b7da10db05c0298e84f4662663941dbe8bbe6a18732bb0ee4af1ac561b0e47f2beefe22a4179bada94d3fb154b4cfeca29eef5b8bf1198cd11167918de5cf3c2e30c2eabdee953f6d49804f441d29a9cbaa4553c08711afe14d624a200a2b30d8d0203010001&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;encrypted_ssn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;111-53-8888&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ssn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;full&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;outer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;public_keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;andys key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can sleep better knowing that the data is just a little bit safer!&lt;/p&gt;
&lt;p&gt;I'll leave the decryption up to you,
it should be simple now ;)&lt;/p&gt;</content><category term="Programming"></category><category term="vertica"></category><category term="security"></category></entry><entry><title>Analyzing Strava metadata</title><link href="https://andyreagan.github.io/2019/12/30/analyzing-strava-metadata/" rel="alternate"></link><published>2019-12-30T00:00:00+01:00</published><updated>2019-12-30T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2019-12-30:/2019/12/30/analyzing-strava-metadata/</id><summary type="html">&lt;p&gt;I love running,
and I love stroller running with my son even more.
Strava is my go-to fitness app and I've tagged all of my stroller runs
with a searchable tag so I can count the miles we've logged together,
mostly while he has slept!&lt;/p&gt;
&lt;p&gt;The search functionality on Strava's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I love running,
and I love stroller running with my son even more.
Strava is my go-to fitness app and I've tagged all of my stroller runs
with a searchable tag so I can count the miles we've logged together,
mostly while he has slept!&lt;/p&gt;
&lt;p&gt;The search functionality on Strava's site doesn't provide summaries like total miles,
but I can search my own data easily using Python.&lt;/p&gt;
&lt;h2&gt;Request your archive&lt;/h2&gt;
&lt;p&gt;Go to your settings:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2019-12-30-strava-metadata/step-01.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;Account page:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2019-12-30-strava-metadata/step-02.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;Click the download button:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2019-12-30-strava-metadata/step-03.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;Click this button:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2019-12-30-strava-metadata/step-04.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;Then you'll get an email with a link to your data.&lt;/p&gt;
&lt;h2&gt;Load up your data.&lt;/h2&gt;
&lt;p&gt;This part is simple,
and to make things even easier I'll use Pandas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;activities.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we can pull out all of the activies with type Run,
that contain the stroller tag, and sum up the miles all like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Activity Type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Run&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stroller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Activity Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#stroller&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;miles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;stroller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;  &lt;span class="c1"&gt;# filter&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Distance&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# select&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# convert dtype&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.609&lt;/span&gt;  &lt;span class="c1"&gt;# sum and convert to miles&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;miles&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's break that down: first, we select out two filters (type Run and stroller in the title),
then we convert the distance field to a float,
then we sum it up.
The last step converts km into miles.
I had actually first written it in one line,
as below,
but thought the above would be clearer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Activity Type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Run&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Activity Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#stroller&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Distance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.609&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All told, by the end of 2019 I'll have logged 857 miles with my little man.&lt;/p&gt;</content><category term="Fitness"></category><category term="sweat science"></category></entry><entry><title>Presque Isle Marathon</title><link href="https://andyreagan.github.io/2019/09/08/presque-isle-marathon/" rel="alternate"></link><published>2019-09-08T00:00:00+02:00</published><updated>2019-09-08T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2019-09-08:/2019/09/08/presque-isle-marathon/</id><content type="html">&lt;p&gt;PR Baby! Boston bound for 2020.&lt;/p&gt;
&lt;iframe height='405' width='590' frameborder='0' allowtransparency='true' scrolling='no' src='https://www.strava.com/activities/2691066468/embed/2e0692df9dc12cf1f22e8c6c538c26950a48ce70'&gt;&lt;/iframe&gt;</content><category term="Fitness"></category><category term="running"></category><category term="race report"></category></entry><entry><title>Exploring the science behind the Yasso 800</title><link href="https://andyreagan.github.io/2019/08/17/exploring-the-science-behind-the-yasso-800/" rel="alternate"></link><published>2019-08-17T00:00:00+02:00</published><updated>2019-08-17T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2019-08-17:/2019/08/17/exploring-the-science-behind-the-yasso-800/</id><summary type="html">&lt;p&gt;If you haven't heard of them,
&lt;a href="https://www.runnersworld.com/race-training/the-real-history-of-the-yasso-800s"&gt;Yasso 800s&lt;/a&gt; comprise a infamous running workout that touts itself to predict your marathon time.
The name was coined by Amby Burfoot,
paying homage to Runner's World editor Bart Yasso.&lt;/p&gt;
&lt;p&gt;While even Yasso himself has professed &lt;a href="https://www.runnersworld.com/runners-stories/a20810642/yasso-800s-make-no-sense/"&gt;he had no idea&lt;/a&gt; why the math worked …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you haven't heard of them,
&lt;a href="https://www.runnersworld.com/race-training/the-real-history-of-the-yasso-800s"&gt;Yasso 800s&lt;/a&gt; comprise a infamous running workout that touts itself to predict your marathon time.
The name was coined by Amby Burfoot,
paying homage to Runner's World editor Bart Yasso.&lt;/p&gt;
&lt;p&gt;While even Yasso himself has professed &lt;a href="https://www.runnersworld.com/runners-stories/a20810642/yasso-800s-make-no-sense/"&gt;he had no idea&lt;/a&gt; why the math worked,
many others have remained stumped.
No more!
First,
let's define the workout:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run 10 800-meter intervals, with 2–3 minutes rest.&lt;/li&gt;
&lt;li&gt;Take you average time for the intervals, replace the minutes with hours, the seconds with minutes, and that’s your marathon time!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you ran the repeats averaging 3:35 (minutes:seconds),
that means you’re ready to run 3:35 (hours:minutes) in the marathon.
Simple.&lt;/p&gt;
&lt;p&gt;The trick here is also simple:
you’re multiplying your time by 60,
but the distance by only 52.4 (.5 miles to 26.2 miles),
so the pace is slower.
Note that you have done 10 repeats so the pace of the repeats themselves is closer to what you can run for 5 miles.
Let your time for the repeats by t₁,
and the time for the marathon t₂.
Yasso says that t₂ = 60 ⋅ t₁.
So in the same amount of time,
you cover less distance.
In doing so,
we’re saying you pace will only be 52.4/60 = 87.3% of your pace on intervals,
so you’re running 87.3% of the pace you can for about 5 miles.&lt;/p&gt;
&lt;p&gt;That helped, right? Almost! Thanks to work done by &lt;a href="http://downloads.hindawi.com/journals/bmri/2018/8203062.pdf"&gt;academic&lt;/a&gt; &lt;a href="https://bmcsportsscimedrehabil.biomedcentral.com/articles/10.1186/s13102-016-0052-y"&gt;studies&lt;/a&gt;, we know that the pace/distance curve has another neat, mathematical property: it follows a power law. The power law curve is so-named because it resembles y = axᵇ , where x is raised to the b-th power.&lt;/p&gt;
&lt;h2&gt;Let’s check this formula ourselves&lt;/h2&gt;
&lt;p&gt;To understand this relationship, take a look at the record times at distances ranging from the 100 meters through the marathon. While no single athlete would be ready for events from the 100m through the marathon, we can consider the best times in event as a measure of what is possible. World record performances are here on &lt;a href="https://en.wikipedia.org/wiki/List_of_world_records_in_athletics#Men"&gt;Wikipedia&lt;/a&gt;, and we convert to CSV using &lt;a href="https://wikitable2csv.ggor.de/"&gt;this webpage&lt;/a&gt;. We end up with data like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2019-08-17-yasso/1.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;To understand the data, we’ll start by making a plot of pace vs distance.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2019-08-17-yasso/2.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;While that curve doesn’t look special to most, to those familiar with &lt;a href="vermontcomplexsystems.org"&gt;Complex Systems&lt;/a&gt; see that it has the makings of a power law. As we mentioned, analysis has already been done to show that the a &lt;a href="wikipedia.org/power_law"&gt;power law&lt;/a&gt; model will fit this data, and let’s take a look for ourselves. The first thing we need to is plot this data in log-log space.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2019-08-17-yasso/3.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;Hey, it (sortof) looks like a straight line now! Now we can fit a simple regression line to the data, and that will give us the coefficients on the power law model. The regression in log space gives us a fit show on the next plot. I’ve excluded the points in red that are slower than longer events.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2019-08-17-yasso/4.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;We found coefficients for pace = 17.85 ⋅ distance^(−0.1144).&lt;/p&gt;
&lt;h2&gt;Now let’s check Yasso’s math.&lt;/h2&gt;
&lt;p&gt;Earlier, we figured out that Yasso said marathon pace is 87% of your 800m pace (that you can repeat 10 times). As it turned out, that was the same as just multiplying the time by 60. For ourselves, we found a formula that gives us pace = 17.85 ⋅ distance^(−0.1144), based on the data, and that gives us a ratio of 82% from 5 miles to the marathon. So Yasso 800s are going to largely overestimate your pace for the marathon, if you’re running world record pace for both the 5mi and the marathon. If we compare our model to &lt;a href="http://downloads.hindawi.com/journals/bmri/2018/8203062.pdf"&gt;those fit on individual athletes&lt;/a&gt;, we do see that ours is “steeper”, such that it might be closer to 87% than 82%.&lt;/p&gt;
&lt;p&gt;For fun, we can play around with these formulas to make new workouts! Next time you’re curious about your marathon potential,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go run 4 x mile.&lt;/li&gt;
&lt;li&gt;Take your mile split in seconds, multiply by 0.5, and that’s your marathon time in minutes!†&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ll let you decide what to call this workout.&lt;/p&gt;
&lt;hr&gt;

&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;† Based on the formula we found, it should really be .55!&lt;/p&gt;</content><category term="Fitness"></category><category term="running"></category><category term="sweat science"></category></entry><entry><title>Developing Python on Vertica</title><link href="https://andyreagan.github.io/2019/07/05/developing-python-on-vertica/" rel="alternate"></link><published>2019-07-05T00:00:00+02:00</published><updated>2019-07-05T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2019-07-05:/2019/07/05/developing-python-on-vertica/</id><summary type="html">&lt;p&gt;Vertica is a very powerful analytics database,
and we can easily extend functionality now by building in Python functions.
This is great and all,
so here I'll focus on setting up a development environment for building a simple UDx.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://www.vertica.com/docs/9.2.x/HTML/Content/Authoring/ExtendingVertica/UDx/DevEnvironment.htm"&gt;documentation from Vertica&lt;/a&gt; is not super specific, so this may …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vertica is a very powerful analytics database,
and we can easily extend functionality now by building in Python functions.
This is great and all,
so here I'll focus on setting up a development environment for building a simple UDx.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://www.vertica.com/docs/9.2.x/HTML/Content/Authoring/ExtendingVertica/UDx/DevEnvironment.htm"&gt;documentation from Vertica&lt;/a&gt; is not super specific, so this may help!&lt;/p&gt;
&lt;p&gt;For the local setup, we'll be using https://github.com/jbfavre/docker-vertica/.
I'm going to focus on the CentOS version, since it is most similar to Amazon's RHEL images.
To get started (on OSX, you need the Docker client first):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;jbfavre/vertica:9.2.0-7_centos-7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also take a second to get &lt;a href="https://www.python.org/downloads/release/python-351/"&gt;Python 3.5.1 here&lt;/a&gt;.
Those are the two steps that require the most bandwidth!&lt;/p&gt;
&lt;p&gt;Now, run that thing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5433&lt;/span&gt;:5433&lt;span class="w"&gt; &lt;/span&gt;jbfavre/vertica:9.2.0-7_centos-7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Grab the name of the running container from &lt;code&gt;docker ps&lt;/code&gt; command, and set it to &lt;code&gt;$DOCKER_NAME&lt;/code&gt;, and copy in our Python source:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;DOCKER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;suspicious_chatelet
docker&lt;span class="w"&gt; &lt;/span&gt;cp&lt;span class="w"&gt; &lt;/span&gt;Downloads/Python-3.5.1.tgz&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$DOCKER_NAME&lt;/span&gt;:/home/dbadmin/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Phew! We're done with the parts that are specific to a local setup.
If you're working on a server somewhere, copy up the &lt;code&gt;Python-3.5.1.tgz&lt;/code&gt;
and put it at &lt;code&gt;/home/dbadmin/Python-3.5.1.tgz&lt;/code&gt;.
For good measure (i.e., if you copied with the root user) make sure it's owned by &lt;code&gt;dbadmin&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;chown&lt;span class="w"&gt; &lt;/span&gt;dbadmin&lt;span class="w"&gt; &lt;/span&gt;/home/dbadmin/Python-3.5.1.tgz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As root,
install all of the dependencies that you need for Python.
WARNING: these may not be everything that YOU need
(see alternative dependencies in an install like &lt;a href="https://gist.github.com/Sunlighter/87bbd2cd80971c7c0d4763ec1b5ea548"&gt;this&lt;/a&gt;)
or rely on the &lt;code&gt;python3&lt;/code&gt; that is available with the &lt;code&gt;yum&lt;/code&gt; installer directly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yum&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;openssl-devel&lt;span class="w"&gt; &lt;/span&gt;bzip2-devel&lt;span class="w"&gt; &lt;/span&gt;expat-devel&lt;span class="w"&gt; &lt;/span&gt;gdbm-devel&lt;span class="w"&gt; &lt;/span&gt;readline-devel&lt;span class="w"&gt; &lt;/span&gt;sqlite-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Grab a coffee.&lt;/p&gt;
&lt;p&gt;Switch to &lt;code&gt;dbadmin&lt;/code&gt; user and do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/dbadmin/Python-3.5.1
./configure
make
make&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Probably another coffee for that one!&lt;/p&gt;
&lt;p&gt;If you run the above as &lt;code&gt;dbadmin&lt;/code&gt;, which you should, skip the &lt;code&gt;make install&lt;/code&gt; line.
Or only do that last line as &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Maybe still as root, though again this should be fine (and preferable) as dbadmin user in the &lt;code&gt;/home/dbadmin&lt;/code&gt; directory. If you used root for anything above other than &lt;code&gt;make install&lt;/code&gt;, you might need to keep &lt;code&gt;root&lt;/code&gt; user active. Here goes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Python-3.5.1/python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;pyenv
pyenv/bin/pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-U&lt;span class="w"&gt; &lt;/span&gt;pip
pyenv/bin/pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you're within a firewall, you might need &lt;code&gt;--index-url=[your company's artifactory]&lt;/code&gt; for the pip install lines.
What is the &lt;code&gt;requirements.txt&lt;/code&gt; line? All of the packages that your function needs,
just like the requirements file from any python package.&lt;/p&gt;
&lt;p&gt;Finally you should be able to execute the SQL needed to build your function!
Put your code in &lt;code&gt;myfunction.py&lt;/code&gt; and then you can run &lt;code&gt;vsql&lt;/code&gt; as dbadmin, and do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="se"&gt;\s&lt;/span&gt;et&lt;span class="w"&gt; &lt;/span&gt;libfile&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\&amp;#39;&amp;#39;`pwd`&amp;#39;&lt;/span&gt;/myfunction.py&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;DROP LIBRARY mylib CASCADE;&lt;/span&gt;

&lt;span class="s1"&gt;CREATE LIBRARY mylib AS :libfile DEPENDS &amp;#39;&lt;/span&gt;/home/dbadmin/pyenv/lib/python3.5/site-packages/&lt;span class="s1"&gt;&amp;#39; LANGUAGE &amp;#39;&lt;/span&gt;Python&lt;span class="s1"&gt;&amp;#39;;&lt;/span&gt;
&lt;span class="s1"&gt;CREATE FUNCTION myfunction AS NAME &amp;#39;&lt;/span&gt;myfunction_factory&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;LIBRARY&lt;span class="w"&gt; &lt;/span&gt;mylib&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you run into permissions issues having done all of the Python stuff as &lt;code&gt;root&lt;/code&gt;,
you can get the function to build by opening up the virtual environment permissions
using these commands (as &lt;code&gt;root&lt;/code&gt; in &lt;code&gt;/home/dbadmin&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;find&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;-type&lt;span class="w"&gt; &lt;/span&gt;f&lt;span class="w"&gt; &lt;/span&gt;-exec&lt;span class="w"&gt; &lt;/span&gt;chmod&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;666&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\;&lt;/span&gt;
find&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;-type&lt;span class="w"&gt; &lt;/span&gt;d&lt;span class="w"&gt; &lt;/span&gt;-exec&lt;span class="w"&gt; &lt;/span&gt;chmod&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;777&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cheers!
I could build the python3 and package that into a Docker based off the original,
but that would be less fun for you.&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="vertica"></category></entry><entry><title>Boston Marathon 2019</title><link href="https://andyreagan.github.io/2019/04/15/boston-marathon-2019/" rel="alternate"></link><published>2019-04-15T00:00:00+02:00</published><updated>2019-04-15T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2019-04-15:/2019/04/15/boston-marathon-2019/</id><summary type="html">&lt;iframe height='405' width='590' frameborder='0' allowtransparency='true' scrolling='no' src='https://www.strava.com/activities/2292189157/embed/4cb5a296f8edaa8b8c76b4bc15d7d91084a8c8fb'&gt;&lt;/iframe&gt;

&lt;p&gt;What a day! Congrats to all the finishers.
I count myself very grateful to be at the start line of this one,
with my wife at 39 weeks pregnant.
Didn't have the run that I had hoped out there,
wrote some checks that my legs couldn't cash with a first …&lt;/p&gt;</summary><content type="html">&lt;iframe height='405' width='590' frameborder='0' allowtransparency='true' scrolling='no' src='https://www.strava.com/activities/2292189157/embed/4cb5a296f8edaa8b8c76b4bc15d7d91084a8c8fb'&gt;&lt;/iframe&gt;

&lt;p&gt;What a day! Congrats to all the finishers.
I count myself very grateful to be at the start line of this one,
with my wife at 39 weeks pregnant.
Didn't have the run that I had hoped out there,
wrote some checks that my legs couldn't cash with a first half closer to 1:27
with a lot of small surges.&lt;/p&gt;
&lt;p&gt;Instagram:&lt;/p&gt;
&lt;blockquote class="instagram-media" data-instgrm-captioned data-instgrm-permalink="https://www.instagram.com/p/BwSe6RFALy3/" data-instgrm-version="12" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"&gt;&lt;div style="padding:16px;"&gt; &lt;a href="https://www.instagram.com/p/BwSe6RFALy3/" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"&gt; &lt;div style=" display: flex; flex-direction: row; align-items: center;"&gt; &lt;div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"&gt;&lt;/div&gt; &lt;div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"&gt; &lt;div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"&gt;&lt;/div&gt; &lt;div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="padding: 19% 0;"&gt;&lt;/div&gt; &lt;div style="display:block; height:50px; margin:0 auto 12px; width:50px;"&gt;&lt;svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"&gt;&lt;g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"&gt;&lt;g transform="translate(-511.000000, -20.000000)" fill="#000000"&gt;&lt;g&gt;&lt;path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div style="padding-top: 8px;"&gt; &lt;div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;"&gt; View this post on Instagram&lt;/div&gt;&lt;/div&gt;&lt;div style="padding: 12.5% 0;"&gt;&lt;/div&gt; &lt;div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"&gt;&lt;div&gt; &lt;div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"&gt;&lt;/div&gt; &lt;div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"&gt;&lt;/div&gt; &lt;div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="margin-left: 8px;"&gt; &lt;div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"&gt;&lt;/div&gt; &lt;div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="margin-left: auto;"&gt; &lt;div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"&gt;&lt;/div&gt; &lt;div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"&gt;&lt;/div&gt; &lt;div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; &lt;p style=" margin:8px 0 0 0; padding:0 4px;"&gt; &lt;a href="https://www.instagram.com/p/BwSe6RFALy3/" style=" color:#000; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none; word-wrap:break-word;" target="_blank"&gt;less than glamorous at mile 23...when my legs gave up at ~mile 20. on pace through the first hills to 18, almost to 20, but heartbreak broke me. encouraging texts for @sspis1 and cheers from @dmreagan32 kept me moving. 3:20ish finish. . right quad started to fail around 18, and everything was cramping by 22 and I was walking. A generous application of cramping cream at the med tent allowed me to mostly run the final 1.5... until my left leg completely locked 200 yards from the finish line and I came to a dead stop. The crowds were amazing as I started to hobble, eventually into a &amp;#34;jog&amp;#34; through the line. . What a day! Congrats to all the finishers! . . #boston2019 #bostonmarathon&lt;/a&gt;&lt;/p&gt; &lt;p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;"&gt;A post shared by &lt;a href="https://www.instagram.com/instandyreagan/" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px;" target="_blank"&gt; Andy Reagan&lt;/a&gt; (@instandyreagan) on &lt;time style=" font-family:Arial,sans-serif; font-size:14px; line-height:17px;" datetime="2019-04-15T19:59:36+00:00"&gt;Apr 15, 2019 at 12:59pm PDT&lt;/time&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;script async src="//www.instagram.com/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;Race morning with Olson:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2019-04-15-boston-2019/20190415_064516.jpg" class="img-responsive" style="transform: rotate(0deg);"&gt;&lt;/p&gt;
&lt;p&gt;Drop-off point, a 2 mile walk from the start was as close as my Mom could get me.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2019-04-15-boston-2019/20190415_083851.jpg" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;Colby!
&lt;img src="/images/2019-04-15-boston-2019/20190415_092744.jpg" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;Sufferage. Took a selfie to text to my wife at this point.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2019-04-15-boston-2019/IMG_20190415_155935_102.jpg" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;More suffering.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2019-04-15-boston-2019/Screenshot_20190418-110426_Chrome.jpg" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;Running the final mile.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2019-04-15-boston-2019/Screenshot_20190418-110415_Chrome.jpg" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2019-04-15-boston-2019/Screenshot_20190426-203046_Chrome.jpg" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2019-04-15-boston-2019/Screenshot_20190418-110503_Chrome.jpg" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;Thanks for MarathonPhoto for the unscrupulously screengrabbed and watermarked pictures.&lt;/p&gt;</content><category term="Fitness"></category><category term="running"></category><category term="race report"></category></entry><entry><title>Scoring arbitrarily large datasets with Pandas + Sklearn</title><link href="https://andyreagan.github.io/2019/04/10/scoring-arbitrarily-large-datasets-with-pandas-sklearn/" rel="alternate"></link><published>2019-04-10T00:00:00+02:00</published><updated>2019-04-10T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2019-04-10:/2019/04/10/scoring-arbitrarily-large-datasets-with-pandas-sklearn/</id><summary type="html">&lt;p&gt;The workhorses of data analysis and modeling in the &lt;a href="http://jakevdp.github.io/blog/2014/05/09/why-python-is-slow/"&gt;Python&lt;/a&gt; universe are undoubtedly &lt;a href="http://wesmckinney.com/blog/apache-arrow-pandas-internals/"&gt;Pandas&lt;/a&gt; and &lt;a href="https://jakevdp.github.io/PythonDataScienceHandbook/05.02-introducing-scikit-learn.html"&gt;Sklearn&lt;/a&gt;.
I won't extoll their virtues here, but focus on solving one limiting problem.
One of the major limitations of these libraries is the size of data they can handle.&lt;/p&gt;
&lt;p&gt;In Pandas, the rule of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The workhorses of data analysis and modeling in the &lt;a href="http://jakevdp.github.io/blog/2014/05/09/why-python-is-slow/"&gt;Python&lt;/a&gt; universe are undoubtedly &lt;a href="http://wesmckinney.com/blog/apache-arrow-pandas-internals/"&gt;Pandas&lt;/a&gt; and &lt;a href="https://jakevdp.github.io/PythonDataScienceHandbook/05.02-introducing-scikit-learn.html"&gt;Sklearn&lt;/a&gt;.
I won't extoll their virtues here, but focus on solving one limiting problem.
One of the major limitations of these libraries is the size of data they can handle.&lt;/p&gt;
&lt;p&gt;In Pandas, the rule of thumb is needing 5x-10x the memory for the size of your data.
While that's fine for small datasets, things can quickly get out of hand.
At &lt;a href="https://datascience.massmutual.com/"&gt;MassMutual Data Science&lt;/a&gt;, we encountered this problem when we took a model we had trained locally,
and attempted to apply to it to the entire customer and prospect universe.
These datasets have upwards of 300 million records!&lt;/p&gt;
&lt;p&gt;There are a couple obvious directions to take this problem:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write this model on a scalable platform like Spark.&lt;/li&gt;
&lt;li&gt;Program the model into our database system.&lt;/li&gt;
&lt;li&gt;Just get a bigger machine.&lt;/li&gt;
&lt;li&gt;Break the dataset into small pieces and apply our code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For no particularly good reason, we had taken approach (4).
Of course, option (1) is a lot of work, if possible (a UDF for the model would always be possible).
Spark's dataframe API is quite a bit different than Pandas, so this would compromise a full rewrite.
Option (2) is only easy if we dealing with a regression model (and again, a rewrite of the data transform steps).
Option (3) seems fine, but it does have limits (and is expensive!).&lt;/p&gt;
&lt;p&gt;Anyway, let's see if we hack option (4) to work on a laptop.&lt;/p&gt;
&lt;p&gt;Our code looks basically like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transform_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;stuff&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;medians&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clf.pkl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;raw_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;clean_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transform_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;medians&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apply_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_scored.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can make this work by splitting our data into 10, or 100, parts to limit the memory needed to read the whole CSV.
The function is called like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3&lt;span class="w"&gt; &lt;/span&gt;score_data.py&lt;span class="w"&gt; &lt;/span&gt;data_part_1.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which writes the file &lt;code&gt;data_part_1_scored.csv&lt;/code&gt;.
Roughly, we expect that memory and computation time will scale linearly with the size of the data.
If we need to score 10 billion rows, we need to split our data many thousand times,
and this approach becomes impractical.
(How big can pieces be for given memory footprint? etc).&lt;/p&gt;
&lt;p&gt;The fix here is to only ever read &lt;code&gt;N&lt;/code&gt; rows of data at a time.
Transform and score these &lt;code&gt;N&lt;/code&gt;, write them out, and then read the next batch.
We can accomplish this by adding a function that works like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main_streaming&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;medians&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clf.pkl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;
    &lt;span class="n"&gt;score_header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;chunk_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;raw_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;score_header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;clean_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transform_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;medians&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apply_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# get the last part&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;raw_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;score_header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;clean_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transform_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;medians&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apply_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, we only ever accept chunksize=10000 rows into the python process.
We call our new script like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat&lt;span class="w"&gt; &lt;/span&gt;data_part_1.csv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;score_data.py&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;data_part_1_scored.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;but we also don't need to worry about the size anymore (just &lt;code&gt;data.csv&lt;/code&gt; instead of &lt;code&gt;data_part_1.csv&lt;/code&gt;).
We can send an arbitrarily large file here,
and scoring time will scale linearly.&lt;/p&gt;
&lt;p&gt;As an exercise for the reader,
use multiprocessing to transform and score batches on different cores!&lt;/p&gt;
&lt;p&gt;I went ahead and tested these memory and compute time assumptions by looking at&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Wall time.&lt;/li&gt;
&lt;li&gt;Memory use.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;of each of these strategies for 100K through 500K rows of data.
Here's what we found:&lt;/p&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/vega@5"&gt;&lt;/script&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/vega-lite@3"&gt;&lt;/script&gt;
&lt;!-- Import vega-embed --&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/vega-embed@4"&gt;&lt;/script&gt;

&lt;div id="one"&gt;&lt;/div&gt;

&lt;p&gt;As expected, time scales linearly, up to 500K rows.
For memory:&lt;/p&gt;
&lt;div id="two"&gt;&lt;/div&gt;

&lt;script type="text/javascript"&gt;
  var spec = "https://gist.githubusercontent.com/andyreagan/488042d212f6ca0c4d44ab3a8116e15a/raw/a4dc6513a09512f024fb360085c12fe1c18c2311/totaltime.vg.json";
  vegaEmbed('#one', spec).then(function(result) {
    // Access the Vega view instance (https://vega.github.io/vega/docs/api/view/) as result.view
  }).catch(console.error);
  var spec = "https://gist.githubusercontent.com/andyreagan/488042d212f6ca0c4d44ab3a8116e15a/raw/a4dc6513a09512f024fb360085c12fe1c18c2311/memory.vg.json";
  vegaEmbed('#two', spec).then(function(result) {
    // Access the Vega view instance (https://vega.github.io/vega/docs/api/view/) as result.view
  }).catch(console.error);
  var spec = "https://gist.githubusercontent.com/andyreagan/488042d212f6ca0c4d44ab3a8116e15a/raw/a4dc6513a09512f024fb360085c12fe1c18c2311/chunksize.vg.json";
  vegaEmbed('#three', spec).then(function(result) {
    // Access the Vega view instance (https://vega.github.io/vega/docs/api/view/) as result.view
  }).catch(console.error);
&lt;/script&gt;

&lt;p&gt;Again this is what we expected: memory remains constant for the streaming process.
We can easily extrapolate that a 3M line file would need ~30GB of memory!
A little bit more envelop math and we can see that it will take ~1.5 days to
score our 300M records.
The next optimization to apply is then to use all of the cores available,
and we'll stop here before re-inventing too many wheels.&lt;/p&gt;
&lt;p&gt;One more fun chart to look at how chunk size for streaming affects the time
and memory of our job.
The chunksize=1 job is still running :)&lt;/p&gt;
&lt;div id="three"&gt;&lt;/div&gt;</content><category term="Programming"></category><category term="pandas"></category><category term="ML"></category></entry><entry><title>Writing LaTeX in Atom</title><link href="https://andyreagan.github.io/2018/07/20/writing-latex-in-atom/" rel="alternate"></link><published>2018-07-20T00:00:00+02:00</published><updated>2018-07-20T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2018-07-20:/2018/07/20/writing-latex-in-atom/</id><summary type="html">&lt;p&gt;Atom is a code editor.
The defaults try to "complete" words from your writing, and don't highlight spelling.
After many months of using a code editor to write,
it's clear that I've gone backwards and I should at least be using spell checking!&lt;/p&gt;
&lt;p&gt;These two settings vastly improve the latex …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Atom is a code editor.
The defaults try to "complete" words from your writing, and don't highlight spelling.
After many months of using a code editor to write,
it's clear that I've gone backwards and I should at least be using spell checking!&lt;/p&gt;
&lt;p&gt;These two settings vastly improve the latex experience in Atom:&lt;/p&gt;
&lt;h2&gt;Add latex to spellcheck file types.&lt;/h2&gt;
&lt;p&gt;Go to the &lt;code&gt;spell-check&lt;/code&gt; package settings (it’s a core package), and add &lt;code&gt;text.tex.latex&lt;/code&gt; to the list of languages.&lt;/p&gt;
&lt;p&gt;Here's the reference that guided me: &lt;a href="https://discuss.atom.io/t/how-to-enable-spell-checking-for-another-language/4895/12"&gt;https://discuss.atom.io/t/how-to-enable-spell-checking-for-another-language/4895/12&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Turn off autocompletion in latex files.&lt;/h2&gt;
&lt;p&gt;Go to the &lt;code&gt;autocomplete-plus&lt;/code&gt; package (also a core package) and add &lt;code&gt;*.tex&lt;/code&gt; to the blacklist of file types.&lt;/p&gt;
&lt;p&gt;Here's the reference: &lt;a href="https://github.com/atom/autocomplete-atom-api/issues/19"&gt;https://github.com/atom/autocomplete-atom-api/issues/19&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Happy TeXing!&lt;/h2&gt;</content><category term="Programming"></category><category term="latex"></category></entry><entry><title>Tricks for coercing Pandas into parquet</title><link href="https://andyreagan.github.io/2018/05/29/tricks-for-coercing-pandas-into-parquet/" rel="alternate"></link><published>2018-05-29T00:00:00+02:00</published><updated>2018-05-29T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2018-05-29:/2018/05/29/tricks-for-coercing-pandas-into-parquet/</id><summary type="html">&lt;p&gt;For coercing pandas date times (stored as numpy datetime):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtypes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;M8[ns]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;
    &lt;span class="c1"&gt;# https://stackoverflow.com/questions/32827169/python-reduce-precision-pandas-timestamp-dataframe&lt;/span&gt;
    &lt;span class="c1"&gt;# apply(lambda x: x.replace(microsecond=0))&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;datetime64[s]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For coercing python datetime (here, a datetime.date, there …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For coercing pandas date times (stored as numpy datetime):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtypes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;M8[ns]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;
    &lt;span class="c1"&gt;# https://stackoverflow.com/questions/32827169/python-reduce-precision-pandas-timestamp-dataframe&lt;/span&gt;
    &lt;span class="c1"&gt;# apply(lambda x: x.replace(microsecond=0))&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;datetime64[s]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For coercing python datetime (here, a datetime.date, there may be other options with datetime.datetime (I’ve included my failed attempts that may work there as comments)):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# df.date.values.to_timestamp()&lt;/span&gt;
&lt;span class="c1"&gt;# pd.Timestamp(df.date)&lt;/span&gt;
&lt;span class="c1"&gt;# df.date.values.astype(np.int64)&lt;/span&gt;
&lt;span class="c1"&gt;# df.loc[~df.date.isnull(),&amp;#39;date&amp;#39;].values.astype(np.int64)&lt;/span&gt;
&lt;span class="c1"&gt;# df.date.values[0].timestamp()&lt;/span&gt;
&lt;span class="c1"&gt;# pd.Timestamp(df.date.values[0],unit=&amp;#39;s&amp;#39;)&lt;/span&gt;
&lt;span class="c1"&gt;# pd.Timestamp(df.date.values[0].timestamp(),unit=&amp;#39;s&amp;#39;)&lt;/span&gt;
&lt;span class="c1"&gt;# df.date.values[0].isoformat()&lt;/span&gt;
&lt;span class="c1"&gt;# df.date.apply(lambda x: x.isoformat())&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnull&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For timedeltas in pandas, &lt;code&gt;timedelta64[ns]&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timedelta_days&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For mixed float and string, encoded as pandas &lt;code&gt;object&lt;/code&gt; type and &lt;code&gt;np.nan&lt;/code&gt; for nulls (this throws error):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isfloat&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;col&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nan&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You need these two, inefficient helpers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;isint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;isfloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When things come in with bytes type, and you get a memoryview error, hit your dataframe with this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stringify_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;O&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;memoryview&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnull&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnull&lt;/span&gt;&lt;span class="p"&gt;(),:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tobytes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ascii&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ignore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnull&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnull&lt;/span&gt;&lt;span class="p"&gt;(),:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ascii&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ignore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ascii&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ignore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Programming"></category><category term="python"></category><category term="pandas"></category></entry><entry><title>Some notes about running D3 inside Jupyter</title><link href="https://andyreagan.github.io/2018/04/27/some-notes-about-running-d3-inside-jupyter/" rel="alternate"></link><published>2018-04-27T00:00:00+02:00</published><updated>2018-04-27T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2018-04-27:/2018/04/27/some-notes-about-running-d3-inside-jupyter/</id><summary type="html">&lt;p&gt;Many visualization packages rely on using D3 in the browser, and those include:
&lt;a href="https://github.com/plotly/plotly.py/blob/master/plotly/widgets/graph_widget.py#L26"&gt;Plotly&lt;/a&gt;,
&lt;a href="https://github.com/vega/ipyvega/blob/master/vega/base.py"&gt;Vega&lt;/a&gt;,
and &lt;a href="https://github.com/mpld3/mpld3/blob/master/mpld3/_display.py"&gt;mpld3&lt;/a&gt;
(links point to the code for how these projects get JS interacting with Jupyter, using IPython’s &lt;a href="https://ipython.org/ipython-doc/3/api/generated/IPython.display.html"&gt;display module&lt;/a&gt;).
Some people have
&lt;a href="http://makeyourowntextminingtoolkit.blogspot.co.uk/2016/09/interactive-d3v4js-in-jupyter-notebook.html"&gt;no&lt;/a&gt;
&lt;a href="http://blog.thedataincubator.com/2015/08/embedding-d3-in-an-ipython-notebook/"&gt;idea&lt;/a&gt;
&lt;a href="http://www.machinalis.com/blog/embedding-interactive-charts-on-an-ipython-nb/"&gt;why&lt;/a&gt;
&lt;a href="https://multithreaded.stitchfix.com/blog/2015/12/15/d3-jupyter/"&gt;it’s&lt;/a&gt;
&lt;a href="https://www.authorea.com/users/3/articles/3904-data-driven-interactive-science-with-d3-js-plots-and-ipython-notebooks/_show_article"&gt;so&lt;/a&gt;
&lt;a href="http://stackoverflow.com/questions/41149260/d3-js-reference-error-in-jupyter-notebook-from-local-copy"&gt;hard&lt;/a&gt;,
and I’ll count …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many visualization packages rely on using D3 in the browser, and those include:
&lt;a href="https://github.com/plotly/plotly.py/blob/master/plotly/widgets/graph_widget.py#L26"&gt;Plotly&lt;/a&gt;,
&lt;a href="https://github.com/vega/ipyvega/blob/master/vega/base.py"&gt;Vega&lt;/a&gt;,
and &lt;a href="https://github.com/mpld3/mpld3/blob/master/mpld3/_display.py"&gt;mpld3&lt;/a&gt;
(links point to the code for how these projects get JS interacting with Jupyter, using IPython’s &lt;a href="https://ipython.org/ipython-doc/3/api/generated/IPython.display.html"&gt;display module&lt;/a&gt;).
Some people have
&lt;a href="http://makeyourowntextminingtoolkit.blogspot.co.uk/2016/09/interactive-d3v4js-in-jupyter-notebook.html"&gt;no&lt;/a&gt;
&lt;a href="http://blog.thedataincubator.com/2015/08/embedding-d3-in-an-ipython-notebook/"&gt;idea&lt;/a&gt;
&lt;a href="http://www.machinalis.com/blog/embedding-interactive-charts-on-an-ipython-nb/"&gt;why&lt;/a&gt;
&lt;a href="https://multithreaded.stitchfix.com/blog/2015/12/15/d3-jupyter/"&gt;it’s&lt;/a&gt;
&lt;a href="https://www.authorea.com/users/3/articles/3904-data-driven-interactive-science-with-d3-js-plots-and-ipython-notebooks/_show_article"&gt;so&lt;/a&gt;
&lt;a href="http://stackoverflow.com/questions/41149260/d3-js-reference-error-in-jupyter-notebook-from-local-copy"&gt;hard&lt;/a&gt;,
and I’ll count myself squarely in that group
(caveat: those links are mostly random references to the topic).&lt;/p&gt;
&lt;p&gt;The part that makes things confusing is that Jupyter uses RequireJS,
which doesn’t allow you to do the simple things easily:
load d3 from a file
(via &lt;code&gt;&amp;lt;script src=...&lt;/code&gt; or by pushing the JS file as a string into the &lt;code&gt;Javascript()&lt;/code&gt; function from IPython).
I could be wrong about this,
sometimes using the script tag to load d3 works,
but it definitely doesn’t work for jquery
(it’s non-trivial for jquery: http://requirejs.org/docs/jquery.html).&lt;/p&gt;
&lt;p&gt;Of all the approaches to get D3 in the browser,
the ones that seem to do it right use RequireJS to load either a local or CDN copy of D3.
Here’s a good one:
https://github.com/ResidentMario/py_d3.
This is also exactly how MPLD3 does the load of D3, and their code is very clear.&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;Other projects:
https://github.com/jdfreder/ipython-d3networkx/
https://mail.scipy.org/pipermail/ipython-dev/2014-April/013835.html&lt;/p&gt;</content><category term="Programming"></category><category term="d3"></category><category term="javascript"></category><category term="python"></category></entry><entry><title>How to groupby in Pandas with a missing group</title><link href="https://andyreagan.github.io/2018/04/25/how-to-groupby-in-pandas-with-a-missing-group/" rel="alternate"></link><published>2018-04-25T00:00:00+02:00</published><updated>2018-04-25T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2018-04-25:/2018/04/25/how-to-groupby-in-pandas-with-a-missing-group/</id><summary type="html">&lt;p&gt;This is a note intended for my future self.
Here’s how to do it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have a list of the values that you expect for each group.&lt;/li&gt;
&lt;li&gt;Iterate over that list, and look up the values using &lt;code&gt;.loc&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Say I want to group by months, but not all of the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a note intended for my future self.
Here’s how to do it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have a list of the values that you expect for each group.&lt;/li&gt;
&lt;li&gt;Iterate over that list, and look up the values using &lt;code&gt;.loc&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Say I want to group by months, but not all of the months will have data.
Here I’ll iterate over the known month range, and fill in as I go.
Starting with a DataFrame contain the columns BP_ID, CAL_YR, CAL_MO, and COMM_AMT_FYC (with potentially many records (or 0!) per month), we do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;case_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;fyc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;month_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CAL_YR&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CAL_MO&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="n"&gt;case_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;fyc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COMM_AMT_FYC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)),((&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;BP_ID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;month&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;case_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;case_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fyc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fyc&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It seems inefficient, but it should get the job done.
It takes about half a second to do for the small dataframes I’m working with.
In other words, I’ll do 57K of these in 30min.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/@andyreagan/how-to-groupby-in-pandas-with-a-missing-group-655b20d7826f"&gt;This post on Medium&lt;/a&gt;&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="pandas"></category></entry><entry><title>Boston 2018</title><link href="https://andyreagan.github.io/2018/04/16/boston-2018/" rel="alternate"></link><published>2018-04-16T00:00:00+02:00</published><updated>2018-04-16T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2018-04-16:/2018/04/16/boston-2018/</id><summary type="html">&lt;iframe height='405' width='590' frameborder='0' allowtransparency='true' scrolling='no' src='https://www.strava.com/activities/1512264672/embed/5c156b1535b242d41fd467738583deb6ee37bd31'&gt;&lt;/iframe&gt;

&lt;p&gt;This was an incredible experience.&lt;/p&gt;
&lt;p&gt;The crowds were just amazing,
and seeing my son Olson at mile 6 in the rain and cold was amazing.
With the weather, Olson on my mind, and the huge crowds, parts of the race were very emotional.&lt;/p&gt;
&lt;p&gt;At about mile 11-13, I sped up …&lt;/p&gt;</summary><content type="html">&lt;iframe height='405' width='590' frameborder='0' allowtransparency='true' scrolling='no' src='https://www.strava.com/activities/1512264672/embed/5c156b1535b242d41fd467738583deb6ee37bd31'&gt;&lt;/iframe&gt;

&lt;p&gt;This was an incredible experience.&lt;/p&gt;
&lt;p&gt;The crowds were just amazing,
and seeing my son Olson at mile 6 in the rain and cold was amazing.
With the weather, Olson on my mind, and the huge crowds, parts of the race were very emotional.&lt;/p&gt;
&lt;p&gt;At about mile 11-13, I sped up to stay warm at Marc's suggestion with a tight back,
he had to hold off.
I felt like I was flying for the next 10 miles,
cruised over the rollers, and was passing ~3,000 runners over this hour.
Turns out, I didn't speed up much at all,
it must have been everyone else slowing down!&lt;/p&gt;
&lt;p&gt;I really had to hang on for the finish,
and got a PR in 2:59:41!&lt;/p&gt;
&lt;h2&gt;Core body temp report&lt;/h2&gt;
&lt;p&gt;Started dropping 7:30am waiting in tents for the race,
dropped a lot more 9-10am outside in the rain pre-race,
and then I mostly warmed up during the first 6 miles which I had a thick rain jacket.&lt;/p&gt;
&lt;p&gt;Tossed that and basically maintained a good temp through the end.&lt;/p&gt;
&lt;p&gt;After the race,
soaked and shuffling through finish area,
started to get bad.
I got really cold (as did very many) in that time,
and remained cold outside for about two hours before getting a ride to a friend’s apartment to shower.
Was maybe warmed back up by 4pm (3 hours after finishing).&lt;/p&gt;
&lt;h2&gt;Recovery&lt;/h2&gt;
&lt;p&gt;Happened slowly and was aided by an IPA-fueled afterparty at home.&lt;/p&gt;</content><category term="Fitness"></category><category term="running"></category><category term="race report"></category></entry><entry><title>UVM Twitter data notes</title><link href="https://andyreagan.github.io/2017/11/25/uvm-twitter-data-notes/" rel="alternate"></link><published>2017-11-25T00:00:00+01:00</published><updated>2017-11-25T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2017-11-25:/2017/11/25/uvm-twitter-data-notes/</id><summary type="html">&lt;p&gt;First, important dates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2008-09-11: We have the deca-hose from here, with a higher % of the tweets at the beginning and down to 10% now (with the total volume increasing greatly over that time). Geo is (was) roughly 1% of all tweets, first with a "coordinates" and then with the "places …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;First, important dates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2008-09-11: We have the deca-hose from here, with a higher % of the tweets at the beginning and down to 10% now (with the total volume increasing greatly over that time). Geo is (was) roughly 1% of all tweets, first with a "coordinates" and then with the "places" field.&lt;/li&gt;
&lt;li&gt;2009-11-11: The first geo-tweet we have on the books is here: &lt;code&gt;gzip -cd zipped-raw/2009-11-11/2009-11-11-11-15.gz | less&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2014-03-07-13-53: turned the spritzer to filter for geo tweets, pulling ~3000K per minute. Some small fraction of these didn't have a lat/lon, just had a "location”, this was about 10%. Around this time, there were ~850 geo tweets (lat/lon) per minute coming in from the gardenhose.&lt;/li&gt;
&lt;li&gt;2014-04-14: twitter upgraded their backend and we starting getting 7-10K geo tweets per minute from the spritzer.&lt;/li&gt;
&lt;li&gt;Unknown dates: There have been various outages of the geo spritzer over the past two years, but we have most of it, I think (why aren't we running 3 of them?)&lt;/li&gt;
&lt;li&gt;Unknown date: At some point, the overall volume slowed back down to 3K/minute from the geo spritzer&lt;/li&gt;
&lt;li&gt;2016-12-07: Data change from Gardenhose to GNIP decahose&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There is a database living at UVM that Morgan built to store the geo tweets starting in 2011 in SQL...it got really big despite UVM saying they could handle it, I don’t know how to use this database&lt;ul&gt;
&lt;li&gt;Morgan: This seems correct to me. SQL was a fine solution the first year we used it for the geotagged tweets, but appears to be woefully insufficient with the current magnitude of data. One reason for this is that SQL scales vertically (i.e. with faster machines) rather than horizontally (i.e. with parallelization). Hadoop is an example that benefits from horizontal scaling, but there are others. With a beautiful tool like the VACC already in place, it seems to me that horizontal scaling is a viable option.&lt;/li&gt;
&lt;li&gt;SSH to bluemoon server&lt;/li&gt;
&lt;li&gt;`mysql -u mrfrank -p -h webdb-large1.uvm.edu -e "use MRFRANK_2; INSERT SQL COMMANDS HERE!!!!!"``&lt;/li&gt;
&lt;li&gt;you will need password, ask Morgan&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jake build a geo database that pre-processed each tweet to place it in hierarchical boxes by country/state/county (us-analogy, these are more general) and accessed by the incredibly reliable &lt;code&gt;pullTweets.pl&lt;/code&gt; script (it's txt files for each minute stored in folders by location, all zipped up, that can be searched through without unzipping it to disk). With the decline in volume, I think that this stopped happening about a month ago, and the database isn't being updated (I could very well be wrong).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;FAQ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Twitter says that if you pull two geo streams, they will be the same tweets (should we check? may be able to get more data by running two streams with different bounding boxes... also the speed of the scraper may matter (ruby chugger seems to be at least as fast as anything I could write in python)). how similar at the geo tweets from the spritzer and the gardenhose?&lt;ul&gt;
&lt;li&gt;Jake: I did a few tests re: volumes and multiple streams/filters a little while back and am sorry to report that (1) two (spritzer) streams running simultaneously off of the same access key produce nearly identical data (I have not acutely quantified this, but just ran a quick diff---one or two tweets were different), and (2) two disjoint hemisphere streams collectively produce the same volume as one global stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The new tweets are mostly "places" tweets, and lat/lon is going away. Probably related to some business decision by twitter to integrate with foursquare (which they have), but where does this leave us?&lt;/li&gt;
&lt;li&gt;How reliable are the "places"? If there is also lat/lon in the tweet, do they generally agree?&lt;/li&gt;
&lt;li&gt;Are there tweets with both lat/lon and “places” specified?&lt;ul&gt;
&lt;li&gt;Yes, though it is a small fraction of the overall stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do the tweets we’re currently collecting include the “places” specified tweets?&lt;ul&gt;
&lt;li&gt;Yes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Am I right in assuming that the spritzer has a filter set for locations?&lt;ul&gt;
&lt;li&gt;Yes, it is the bounding box for the whole world.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other observations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jake: As long as 10% of all tweets are tagged with some form of location, then application of the same filter to the garden hose will not result in reduced volume there. Presumably we could estimate the current proportion of tweets tagged with location from the spritzer, but Twitter seems to be pretty tight-lipped about their sampling methods:
https://twittercommunity.com/t/is-the-sample-streaming-api-truly-random/14942&lt;/li&gt;
&lt;li&gt;Jake, Re accuracy: My assumption is that the 'places' are reasonably accurate. It appears that they default to a detected location (once enabled), and my guess would be that most folks don't spend too much time switching locations for each tweet. However, even if this data is good, there will forever be a new cohort of data doubters who fear duplicitous behavior.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we find that the centroids for the "places" are close to the exact geo location, we can start using those for the pullTweets database.&lt;/p&gt;
&lt;h2&gt;Analysis of "places" Tweets&lt;/h2&gt;
&lt;p&gt;Okay so here are the most recent numbers. these are the fields that we're looking for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;tweet&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;coordinates&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;ref:&lt;span class="w"&gt; &lt;/span&gt;https://dev.twitter.com/overview/api/tweets#obj-coordinates&lt;span class="o"&gt;)&lt;/span&gt;
tweet&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;geo&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;---&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;was&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;old&lt;span class="w"&gt; &lt;/span&gt;place&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;coordinates
tweet&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;place&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;ref:&lt;span class="w"&gt; &lt;/span&gt;https://dev.twitter.com/overview/api/places&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I did a parse for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;tweets that contain any of them: "any".&lt;/li&gt;
&lt;li&gt;tweets that contain the coordinate field: "coordinates”;&lt;/li&gt;
&lt;li&gt;tweets that contain only the coordinates field: "coordinates-only”.&lt;/li&gt;
&lt;li&gt;tweets that contain only the places field: "place-only".&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Did this for both the spritzer and the main stream, here are the numbers from &lt;code&gt;wc&lt;/code&gt; (the first number is the count of Tweets):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="m"&gt;2016&lt;/span&gt;-02-15-00-00-any.gz
&lt;span class="m"&gt;7815&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;305189&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;23191117&lt;/span&gt;

&lt;span class="m"&gt;2016&lt;/span&gt;-02-15-00-00-any-spritzer.gz
&lt;span class="m"&gt;43128&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1679248&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;127526514&lt;/span&gt;

&lt;span class="m"&gt;2016&lt;/span&gt;-02-15-00-00-coordinates.gz
&lt;span class="m"&gt;1029&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;37231&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2942433&lt;/span&gt;

&lt;span class="m"&gt;2016&lt;/span&gt;-02-15-00-00-coordinates-only.gz
&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;180&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;11608&lt;/span&gt;

&lt;span class="m"&gt;2016&lt;/span&gt;-02-15-00-00-coordinates-only-spritzer.gz
&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;773&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;69684&lt;/span&gt;

&lt;span class="m"&gt;2016&lt;/span&gt;-02-15-00-00-coordinates-spritzer.gz
&lt;span class="m"&gt;5655&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;207164&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16125655&lt;/span&gt;

&lt;span class="m"&gt;2016&lt;/span&gt;-02-15-00-00-place-only.gz
&lt;span class="m"&gt;6786&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;267958&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;20248684&lt;/span&gt;

&lt;span class="m"&gt;2016&lt;/span&gt;-02-15-00-00-place-only-spritzer.gz
&lt;span class="m"&gt;37473&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1472084&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;111400859&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Total in the spritzer is 46643 and total in the 10% feed is 398616.&lt;/p&gt;
&lt;h3&gt;Observations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;there are 3K tweets on the spritzer that have none of these? what's up with those?&lt;/li&gt;
&lt;li&gt;VERY few (effectively none) have only the coordinates (likely folks using an out-of-date version of the Twitter app).&lt;/li&gt;
&lt;li&gt;close to a 6X boost for all categories on the spritzer.&lt;/li&gt;
&lt;li&gt;13% of the tweets with "place" also have "coordinates".&lt;/li&gt;
&lt;li&gt;we're still getting the same number of coordinates tweets from the spritzer as total geo tweets (place or coords) from the 10% stream.&lt;/li&gt;
&lt;li&gt;1.9% of tweets in the main stream have "any": we can then estimate that there are 78K total "any" tweets. we're only seeing 43K of these on the spritzer. so either we're still missing some (almost half) on the spritzer, or the 10%
over-samples the geo.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How good is the center of bounding boxes?&lt;/h3&gt;
&lt;p&gt;Next, I'll see how close the the place is to the coordinates for that subset.&lt;/p&gt;
&lt;p&gt;So 6455 of the 6473 tweets that I tested (almost all) were inside the bounding box, with a mean distance of 52km from the centroid.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Distances" src="/images/2017-11-15-uvm-twitter-data-notes/distances.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Log10" src="/images/2017-11-15-uvm-twitter-data-notes/distances-log10.png"&gt;&lt;/p&gt;
&lt;p&gt;What the distances from the centroid look like. (note: everything in kilometers)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tell me, what does “bounding box” mean in this context
if the centroid is 52km from the tweet? Is it a county?&lt;ul&gt;
&lt;li&gt;I think that these "places" are all sorts of things. Farrell Hall is one, so is the city of Burlington, so is the United States.
Each place just comes with 4 points to describe it, and most of the points are within that bounding box.
We &lt;em&gt;could&lt;/em&gt; query more details on the place from Twitter's API, which I think is a more detailed geo fence than the bounding box.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;More next steps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use data for a longer timeframe (this is only 15 minutes worth).&lt;/li&gt;
&lt;li&gt;Look at the outlier tweets...&lt;/li&gt;
&lt;li&gt;Bin by the size of the bounding box (a USA box is likely to have a tweet further from the centroid), maybe small bounding boxes are most useful for the location?&lt;/li&gt;
&lt;li&gt;Cross reference the place database with the retail store locations (download their place database?).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Maybe these will be useful for specific projects, and we can test the tweet data as necessary.&lt;/p&gt;
&lt;h3&gt;Final thoughts&lt;/h3&gt;
&lt;p&gt;The statements that 13% of the tweets with "place" also have "coordinates" and 1.9% of tweets in the main stream have “any" indicate that the coordinate-tagged tweets alone now comprise a meager 0.2% of the stream in general (i.e., a drop from ~1%)?. Twitter made it harder to geo-locate with GPS when they integrated with FourSquare.&lt;/p&gt;
&lt;p&gt;The policy decision by Twitter to allow for the soft 'place' location (and its adoption by users) has watered down the data that Twitter is collecting from its users!&lt;/p&gt;</content><category term="Programming"></category><category term="hedonometer"></category></entry><entry><title>Run rabbit run</title><link href="https://andyreagan.github.io/2017/11/23/run-rabbit-run/" rel="alternate"></link><published>2017-11-23T00:00:00+01:00</published><updated>2017-11-23T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2017-11-23:/2017/11/23/run-rabbit-run/</id><content type="html">&lt;p&gt;A brief moment of glory:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2017-11-23-trot/2017-11-23andy-reagan-bunny-suit-turkey-trot-run-race.gif" /&gt;&lt;/p&gt;
&lt;iframe height='405' width='590' frameborder='0' allowtransparency='true' scrolling='no' src='https://www.strava.com/activities/1287230193/embed/0adf742e35744a6eccfe46b5379ff22607bbf199'&gt;&lt;/iframe&gt;</content><category term="Fitness"></category><category term="running"></category><category term="race report"></category></entry><entry><title>Sentiment analysis methods for understanding large-scale texts: a case for using continuum-scored words and word shift graphs</title><link href="https://andyreagan.github.io/2017/11/14/sentiment-analysis-methods-for-understanding-large-scale-texts-a-case-for-using-continuum-scored-words-and-word-shift-graphs/" rel="alternate"></link><published>2017-11-14T00:00:00+01:00</published><updated>2017-11-14T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2017-11-14:/2017/11/14/sentiment-analysis-methods-for-understanding-large-scale-texts-a-case-for-using-continuum-scored-words-and-word-shift-graphs/</id><summary type="html">&lt;p&gt;As a grad student trying to understand the emotional content of some unreadably large collection of texts, a typical night in grad school can often go something like this: You’re up late at night planning a new research study, thinking about trying some of this fancy sentiment-based text analysis …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a grad student trying to understand the emotional content of some unreadably large collection of texts, a typical night in grad school can often go something like this: You’re up late at night planning a new research study, thinking about trying some of this fancy sentiment-based text analysis. You resort to your favorite search engine with the query “sentiment analysis package python.” We have all been there, except maybe with R instead of Python (the latter being my favorite).&lt;/p&gt;
&lt;p&gt;Unfortunately, despite advances in our understanding of how to perform sentiment analysis in recent years, the first method off the shelf will rarely be the best choice. Making matters worse, it can be nearly impossible to navigate the immense literature on the topic.&lt;/p&gt;
&lt;p&gt;Fortunately, we’ve figured out that there are only a few things that you need to know to get started using sentiment analysis.&lt;/p&gt;
&lt;p&gt;Using four large text corpora, we did a bake-off of sorts for dozens of tools. The methods fall into two broad categories: Supervised and unsupervised, with supervised methods relying on tagged training dataset to learn rules. Without a large training dataset, and with the desire to have a general purpose white-box tool (things can go very wrong](https://motherboard.vice.com/en_us/article/j5jmj8/google-artificial-intelligence-bias) with black box machine learning), we stick to unsupervised methods. In our recent paper in EPJ Data Science, we find that dictionary-based (unsupervised) sentiment analysis methods perform reliably on large documents (&amp;gt;10,000 words) with a few things in place:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We show that a dictionary-based method will only perform reliably across corpora if the dictionary covers a sufficiently large enough portion of a given text’s lexicon when weighted by word usage frequency.  Summary: Make sure that your dictionary has most of the words in your documents!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We explicitly demonstrate that it is necessary to examine the words which contribute to sentiment ratings. Common contextual error is something we can readily identify and correct for through word shifts, but would remain hidden to naive learning methods without new training. Given our results, we emphasize that doing any type of analysis without looking at the words is a fraught activity. Here is an example word shift graph for the saddest day that we have measured on Twitter, and you can see that there are positive words (e.g. ‘prayer’) alongside the negative words making this a very sad day:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;iframe src="https://hedonometer.org/embed/main/2017-10-02/" width="590" height="550" frameborder="0" scrolling="no"&gt;&lt;/iframe&gt;

&lt;p&gt;Here is an example word shift graph for a happier-than-average day on Twitter, International Women’s Day on March 3 this year:&lt;/p&gt;
&lt;iframe src="https://hedonometer.org/embed/main/2017-03-08/" width="590" height="550" frameborder="0" scrolling="no"&gt;&lt;/iframe&gt;

&lt;ul&gt;
&lt;li&gt;In addition, we show that a dictionary-based method will generate more meaningful word shift graphs if words are scored on a continuous scale. To interpret a sentiment score and understand the story behind the numbers, meaningful word shifts graphs are essential. The nuances in language are captured better.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that you have some ideas about what to look for in a dictionary, we suggest you look at Table 1 in &lt;a href="https://epjdatascience.springeropen.com/articles/10.1140/epjds/s13688-017-0121-9"&gt;our paper&lt;/a&gt;, and go measure some happiness!&lt;/p&gt;</content><category term="Science"></category><category term="hedonometer"></category></entry><entry><title>Linking files from GitHub in CodePen</title><link href="https://andyreagan.github.io/2017/11/08/linking-files-from-github-in-codepen/" rel="alternate"></link><published>2017-11-08T00:00:00+01:00</published><updated>2017-11-08T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2017-11-08:/2017/11/08/linking-files-from-github-in-codepen/</id><summary type="html">&lt;p&gt;In the course I teach at UC Berkeley in the MIDS program, we use CodePen to build interactive web graphics.
There are a host of reasons to use CodePen, but setting that aside for now, let's talk about how to host data files for CodePen.
CodePen lacks a way for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the course I teach at UC Berkeley in the MIDS program, we use CodePen to build interactive web graphics.
There are a host of reasons to use CodePen, but setting that aside for now, let's talk about how to host data files for CodePen.
CodePen lacks a way for us to store full files alongside our HTML pages, and since we're using CodePen to data vis, we need data!
Naturally, we'll load data from GitHub, where it should be (&lt;em&gt;with the exception of files over 50MB, those are too big for GitHub and probably too big to load into the browser!&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;In the course, we look at a map that myself and team of Data Scientists at MassMutual built during our Data Days for Good project.
We made a visualization of data from the Pioneer Valley Planning Commission, the PVPC, and you can see the map that we made here: &lt;a href="http://massmutual.github.io/pvpc_map"&gt;http://massmutual.github.io/pvpc_map&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To load the data files used in this map into a CodePen that can be edited, the easiest way is just click on the files in the repository, all the way down to the "raw" view of the files.
You'll end up with a link like this:
&lt;code&gt;https://raw.githubusercontent.com/massmutual/pvpc_map/master/data/pvpc_map/pvpc_towns.csv?token=AC33CYRi-2bMOocYNFelx_iQ9rccQDzcks5aC85gwA%3D%3D&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which works just fine.&lt;/p&gt;
&lt;h2&gt;But, crucially, the token at the end of the URL above will go stale!&lt;/h2&gt;
&lt;p&gt;To get around this, we instead need to load the data from the GitHub Pages hosting here: &lt;code&gt;https://massmutual.github.io/pvpc_map/data/pvpc_map/pvpc_towns.csv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This gives us a stable URL for the data file, and we're off to developing more visualization features.
Here is the CodePen for the map:
&lt;a href="https://codepen.io/MIDS-W209/pen/xLBrRy"&gt;https://codepen.io/MIDS-W209/pen/xLBrRy&lt;/a&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="github"></category></entry><entry><title>A grad’s view: Solving real problems</title><link href="https://andyreagan.github.io/2017/09/29/a-grads-view-solving-real-problems/" rel="alternate"></link><published>2017-09-29T00:00:00+02:00</published><updated>2017-09-29T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2017-09-29:/2017/09/29/a-grads-view-solving-real-problems/</id><summary type="html">&lt;p&gt;This is a re-port of an article I wrote for the MassMutal blog: &lt;a href="https://blog.massmutual.com/post/a-grads-view-solving-real-problems"&gt;https://blog.massmutual.com/post/a-grads-view-solving-real-problems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Just this past May, I graduated from the University of Vermont and the Computational Story Lab research group to work as a senior data scientist with MassMutual. While there are many …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a re-port of an article I wrote for the MassMutal blog: &lt;a href="https://blog.massmutual.com/post/a-grads-view-solving-real-problems"&gt;https://blog.massmutual.com/post/a-grads-view-solving-real-problems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Just this past May, I graduated from the University of Vermont and the Computational Story Lab research group to work as a senior data scientist with MassMutual. While there are many differences between being a lifelong student (read: PhD student) versus working in industry, the overlap is huge and I have been able to settle right in at MassMutual.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Differences&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The biggest difference is what defines value. Research in machine learning is valued by novel algorithms and marginal improvements in classification accuracies. But, in business, our data science efforts and machine learning algorithms provide value by making improvements to the customer experience.&lt;/p&gt;
&lt;p&gt;While spending months of effort developing an improved algorithm and moving accuracy from 90 percent to 92 percent would be heralded in academic journals, moving a process from 50 percent to 90 percent is where all the gains are. (&lt;em&gt;Related&lt;/em&gt;: &lt;a href="https://blog.massmutual.com/post/data-science-and-living-mutual"&gt;Data science and MassMutual&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Overlap&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One of the biggest reasons that things are so similar is that the Data Science team at MassMutual has co-opted and applied many of the practices that work well at universities. I found it easy to feel at home with weekly lab meetings, a culture of learning from peers complete with a mentorship structure, and an interval review process for project write-ups akin to journal papers (without any, ahem, rude reviewers).&lt;/p&gt;
&lt;p&gt;Add this to the fact that the Computational Story Lab’s use of machine learning and computation are used as tools to study interesting problems, and it’s a match.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What universities could learn&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;On the flip side, what I have learned in my few months at MassMutual could go a long way to improving research.&lt;/p&gt;
&lt;p&gt;We have a Data Engineering team to support the computing and data platform (excitement from Day 1), track our work in a way that helps keep projects moving, follow a consistent coding style across the team, and ensure that our models are reproducible. The latter part, building reproducible models with a consistent project structure, has been an effort that I and another team member, Paul Shearer, worked on and implemented recently.&lt;/p&gt;
&lt;p&gt;Finally, while our focus is on solving business problems, that isn’t to say that there isn’t any science going on. Our models to predict longevity utilize new methods that I still haven’t wrapped my head around. We tweak state-of-the-practice methodology for tricky problems, and use experimentation to track the results of our models and improve them.&lt;/p&gt;
&lt;p&gt;We’re bringing applied machine learning to areas across the company, and it’s an exciting place to be!&lt;/p&gt;
&lt;p&gt;More from MassMutual…&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.massmutual.com/post/grad-school-and-problem-solving-at-massmutual"&gt;MassMutual’s grad program: How it works&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://datascience.massmutual.com/development"&gt;MassMutual’s Data Science Development Program&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.massmutual.com/category/live-mutual"&gt;Live Mutual: Lessons and stories&lt;/a&gt;&lt;/p&gt;</content><category term="Professional"></category></entry><entry><title>Boston-bound for 2018</title><link href="https://andyreagan.github.io/2017/09/10/boston-bound-for-2018/" rel="alternate"></link><published>2017-09-10T00:00:00+02:00</published><updated>2017-09-10T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2017-09-10:/2017/09/10/boston-bound-for-2018/</id><content type="html">&lt;p&gt;Well, I never thought it would happen.
Today I qualified for the Boston Marathon with a 3:00:04 showing at the Presque Isle Marathon.&lt;/p&gt;
&lt;iframe height='405' width='590' frameborder='0' allowtransparency='true' scrolling='no' src='https://www.strava.com/activities/1180631963/embed/ec6353ad2f3fa0fcf9762dc78efa8bf53822bcb5'&gt;&lt;/iframe&gt;</content><category term="Fitness"></category><category term="running"></category><category term="race report"></category></entry><entry><title>Enabling Jupyter notebook dashboards</title><link href="https://andyreagan.github.io/2017/05/04/enabling-jupyter-notebook-dashboards/" rel="alternate"></link><published>2017-05-04T00:00:00+02:00</published><updated>2017-05-04T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2017-05-04:/2017/05/04/enabling-jupyter-notebook-dashboards/</id><summary type="html">&lt;p&gt;If you perform EDA using jupyter notebooks, it’s really easy to share those results with some moderate interaction via a jupyter dashboard. Here are the basic steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Build the analysis, etc. Assuming this is done locally. Install the dashboard layout extension and lay out some sweet graphs. Optional: decorate …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;If you perform EDA using jupyter notebooks, it’s really easy to share those results with some moderate interaction via a jupyter dashboard. Here are the basic steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Build the analysis, etc. Assuming this is done locally. Install the dashboard layout extension and lay out some sweet graphs. Optional: decorate some graph function with &lt;code&gt;@interact&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commit to github/bitbucket. An example: git commit -am "so much wow"; git push github exploratory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ssh to server. Pull commit down on the server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Back to local. Scp the data files up to the server, in the same place they were locally. It comes in handy to have put them in a folder called &lt;code&gt;data&lt;/code&gt;. This looks like &lt;code&gt;scp -r data myserver:project-dir/&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ssh back to server. Install virtualenv, all necessary libs (numpy, pandas, etc).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the dashboard layout (you definitely need it now, if you didn’t do the layout in step 1): &lt;a href="https://github.com/jupyter/dashboards"&gt;https://github.com/jupyter/dashboards&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable widgets &lt;code&gt;jupyter nbextension enable --py --sys-prefix widgetsnbextension&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Launch server, point browser, choose dashboard view, run notebook!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ve done this all in a screen environment to leave it running. Overhead should be minimal on the server. Before launching the notebook server, I put my necessary credentials into environment variables as well.&lt;/p&gt;
&lt;p&gt;Another potentially important step is to password protect the server. This can be done by calling &lt;code&gt;jupyter notebook password&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This way, you don’t need the other two dashboard pieces (the bundler or standalone server). Although if someone were to set those up, it could make this process even easier!&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category></entry><entry><title>Should I set metadata manually in pyspark?</title><link href="https://andyreagan.github.io/2017/05/04/should-i-set-metadata-manually-in-pyspark/" rel="alternate"></link><published>2017-05-04T00:00:00+02:00</published><updated>2017-05-04T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2017-05-04:/2017/05/04/should-i-set-metadata-manually-in-pyspark/</id><summary type="html">&lt;p&gt;Well, let’s do a simple test and find out if it speeds up the process of one-hot encoding a variable in our data. There are other reasons to set it, and we’ll get to those. Starting with the very helpful code snippet from &lt;a href="https://github.com/awesome-spark/spark-gotchas/blob/master/06_data_preparation.md"&gt;spark-gotchas&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyspark …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Well, let’s do a simple test and find out if it speeds up the process of one-hot encoding a variable in our data. There are other reasons to set it, and we’ll get to those. Starting with the very helpful code snippet from &lt;a href="https://github.com/awesome-spark/spark-gotchas/blob/master/06_data_preparation.md"&gt;spark-gotchas&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyspark&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SparkContext&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyspark.sql&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyspark.sql.functions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withMeta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SparkContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_active_spark_context&lt;/span&gt;
    &lt;span class="n"&gt;jmeta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_gateway&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jvm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Metadata&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_jc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;as&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jmeta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withMeta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;withMeta&lt;/span&gt;


&lt;span class="n"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ml_attr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;label_with_meta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nominal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;vals&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]}}&lt;/span&gt;


&lt;span class="n"&gt;df_with_meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;label_with_meta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withMeta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;df_with_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;

&lt;span class="c1"&gt;## True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, I will write functions to do a one hot encoding with and without metadata. Without metadata:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testWithoutMetadata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;OHEncoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OneHotEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputCol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;outputCol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;label_OH&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;df_transformed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OHEncoder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And with metadata:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testMetadata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ml_attr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;label_with_meta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nominal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;vals&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]}}&lt;/span&gt;
    &lt;span class="n"&gt;OHEncoderMeta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OneHotEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputCol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;label_with_meta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                  &lt;span class="n"&gt;outputCol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;label_OH_with_meta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;df_with_meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;label_with_meta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withMeta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;df_with_meta_transformed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OHEncoderMeta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_with_meta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see how in the above, I used the withMeta function from above.
Now, the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createDataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)))),[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;testWithoutMetadata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createDataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)))),[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;testMetadata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The speed difference for 100,000 data points: 4.66s to 4.16s. A half second speedup on a single executor. In essence, this amounts to how long it too spark to look up the range on the column for which we didn’t provide metadata (check the scala). Was it worth it? Probably not.&lt;/p&gt;
&lt;p&gt;Onward!&lt;/p&gt;
&lt;p&gt;Final note — there are still likely to be cases where the metadata is useful to spark, such as:
1. Avoiding using a stringIndexer, which is quite a bit slower than the one-hot encoder.
2. Providing the variable type to a classification method such as a Random Forest, which can take advantage of variable types.
3. Doing a one-hot encoding where the full range of values is not included in the training set. You can pass the known full range in as metadata, and your pipeline will reflect this.&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="pyspark"></category></entry><entry><title>Spring 2017 Berekely DataViz Project Roundup</title><link href="https://andyreagan.github.io/2017/04/28/spring-2017-berekely-dataviz-project-roundup/" rel="alternate"></link><published>2017-04-28T00:00:00+02:00</published><updated>2017-04-28T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2017-04-28:/2017/04/28/spring-2017-berekely-dataviz-project-roundup/</id><summary type="html">&lt;p&gt;Some really fantastic work from the teams in W209 this semester. Links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://rileyrustad.github.io/W209_Final/?demographic=Custom&lt;/li&gt;
&lt;li&gt;https://sharmila-velamur.github.io/trumpworld/home.html&lt;/li&gt;
&lt;li&gt;https://ramseynoj.github.io/history_of_refugee_migration/metrocosm/imigration-paths.html&lt;/li&gt;
&lt;li&gt;http://people.ischool.berkeley.edu/~yhzhao/food_access.html#dashboard_2&lt;/li&gt;
&lt;li&gt;http://people.ischool.berkeley.edu/~rthamman/W209_Project_Final …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Some really fantastic work from the teams in W209 this semester. Links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://rileyrustad.github.io/W209_Final/?demographic=Custom&lt;/li&gt;
&lt;li&gt;https://sharmila-velamur.github.io/trumpworld/home.html&lt;/li&gt;
&lt;li&gt;https://ramseynoj.github.io/history_of_refugee_migration/metrocosm/imigration-paths.html&lt;/li&gt;
&lt;li&gt;http://people.ischool.berkeley.edu/~yhzhao/food_access.html#dashboard_2&lt;/li&gt;
&lt;li&gt;http://people.ischool.berkeley.edu/~rthamman/W209_Project_Final/Final.html&lt;/li&gt;
&lt;/ul&gt;</content><category term="Teaching"></category><category term="berkeley"></category></entry><entry><title>Modular papers with LaTeX</title><link href="https://andyreagan.github.io/2017/03/23/modular-papers-with-latex/" rel="alternate"></link><published>2017-03-23T00:00:00+01:00</published><updated>2017-03-23T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2017-03-23:/2017/03/23/modular-papers-with-latex/</id><summary type="html">&lt;p&gt;Earlier this week I wrote about how to &lt;a href="https://medium.com/@andyreagan/structuring-academic-project-directories-3d959684fba1#.xvmvhqz1y"&gt;structure an academic project directory&lt;/a&gt; and one of those directories was &lt;code&gt;paper&lt;/code&gt;. The project write-ups (read: papers) will live here. My tool of choice for writing is LaTeX. It is not for everyone, and since you’re this far I’m going …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Earlier this week I wrote about how to &lt;a href="https://medium.com/@andyreagan/structuring-academic-project-directories-3d959684fba1#.xvmvhqz1y"&gt;structure an academic project directory&lt;/a&gt; and one of those directories was &lt;code&gt;paper&lt;/code&gt;. The project write-ups (read: papers) will live here. My tool of choice for writing is LaTeX. It is not for everyone, and since you’re this far I’m going to assume that you’re already a fan!&lt;/p&gt;
&lt;p&gt;While templates for many academic journals are available from &lt;a href="https://www.sharelatex.com/templates/journals/national-academy-of-sciences-%28pnas%29"&gt;ShareLaTeX&lt;/a&gt;, &lt;a href="https://www.overleaf.com/gallery/tagged/academic-journal"&gt;Overleaf&lt;/a&gt;, and often the journals themselves, they share a common problem: each template is a new file with the content copied into it. One of main reasons that we use LaTeX is the clean &lt;em&gt;separation of content and style&lt;/em&gt;, and having a new, single tex file for each journal violates this principle. We can overcome this by using multiple files for the content of our writing. To start, we can take a paper that has files looking like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;emotional-arcs-EPJ-template.tex
bmc-mathphys.bst
bmcart.cls
everything.bib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Into one that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;emotional-arcs-EPJ.tex
emotional-arcs.body.tex
emotional-arcs.abs.tex
bmc-mathphys.bst
bmcart.cls
everything.bib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We’ve taken the both and the abstract out, and included them inside the EPJ template using &lt;code&gt;\input{\filenamebase.abs}&lt;/code&gt; and &lt;code&gt;\input{\filenamebase.body}&lt;/code&gt; where for convenience we define the working name of the paper only once in the file with &lt;code&gt;\newcommand{filenamebase}{emotional-arcs}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Immediately, we can now easily switch between formats and rely on the same body and abstract files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;emotional-arcs-EPJ.tex
emotional-arcs-revtex4.tex
emotional-arcs.body.tex
emotional-arcs.abs.tex
bmc-mathphys.bst
bmcart.cls
unsrtabbrv.bst
everything.bib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Expanding on this idea, we’ll end up with a directory that looks just like the first academic paper directory I ever encountered, one laid out by &lt;a href="http://www.uvm.edu/pdodds/"&gt;Peter Dodds&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bmc-mathphys.bst
bmcart.cls
emotional-arcs-EPJ-supp.tex
emotional-arcs-EPJ.tex
emotional-arcs-dissertation-supplementary.tex
emotional-arcs-dissertation.tex
emotional-arcs-revtex4.tex
emotional-arcs.abs.tex
emotional-arcs.acknowledgments.tex
emotional-arcs.author.EPJ.tex
emotional-arcs.author.tex
emotional-arcs.biblio.tex
emotional-arcs.body.captions.tex
emotional-arcs.body.figures.tex
emotional-arcs.body.nocite.tex
emotional-arcs.body.nofigures.tex
emotional-arcs.body.tables.tex
emotional-arcs.body.tex
emotional-arcs.coverletter.tex
emotional-arcs.inputs.txt
emotional-arcs.kwd.tex
emotional-arcs.nbooks.tex
emotional-arcs.settings.tex
emotional-arcs.supplementary.SOM.tex
emotional-arcs.supplementary.SVD-all.tex
emotional-arcs.supplementary.SVD.tex
emotional-arcs.supplementary.construction.tex
emotional-arcs.supplementary.extras.tex
emotional-arcs.supplementary.networks.tex
emotional-arcs.supplementary.null.tex
emotional-arcs.supplementary.prediction.tex
emotional-arcs.supplementary.ringsort.tex
emotional-arcs.supplementary.stories.tex
emotional-arcs.supplementary.tex
emotional-arcs.supplementary.wards-all.tex
emotional-arcs.supplementary.wards.tex
emotional-arcs.title.tex
everything.bib
makefile
unsrtabbrv.bst
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wow, that’s a lot of files! And for your sake, I didn’t even include all of the automatically generated files. For starters, we can note that all five of these files are generated by a Python script from our body file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;emotional-arcs.body.captions.tex
emotional-arcs.body.figures.tex
emotional-arcs.body.nocite.tex
emotional-arcs.body.nofigures.tex
emotional-arcs.body.tables.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That allowed us to include the figures after the main text in our EPJ template. For this procedure, on would run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PYTOOLDIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;split_body.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PAPER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.body.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which a line straight from the makefile. The Python code to do this is over at: &lt;a href="https://github.com/andyreagan/kitchentabletools-python"&gt;https://github.com/andyreagan/kitchentabletools-python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other things that are now possible include making a &lt;code&gt;-combined.tex&lt;/code&gt; file for pulling in all of the inputs (see &lt;code&gt;input-inputs.py&lt;/code&gt; for that script), and copying the combined file into a directory with the figures locally (renamed fig01,fig01, etc).&lt;/p&gt;
&lt;p&gt;Some of the &lt;code&gt;.tex&lt;/code&gt; files aren’t even ones that we wrote: Python also spit out some of the tables (&lt;code&gt;*.SVD-all.tex&lt;/code&gt;) and parameters (&lt;code&gt;*.nbooks.tex&lt;/code&gt;) from the analysis itself. Made an update to the code? No problem, the figures and parameter files are refreshed all we need to do is run &lt;code&gt;make all&lt;/code&gt; to build the paper!&lt;/p&gt;
&lt;p&gt;For a repository with an example layout, see &lt;a href="https://github.com/petersheridandodds/universal-paper-template"&gt;https://github.com/petersheridandodds/universal-paper-template&lt;/a&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="latex"></category></entry><entry><title>Structuring academic project directories</title><link href="https://andyreagan.github.io/2017/03/21/structuring-academic-project-directories/" rel="alternate"></link><published>2017-03-21T00:00:00+01:00</published><updated>2017-03-21T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2017-03-21:/2017/03/21/structuring-academic-project-directories/</id><summary type="html">&lt;p&gt;Organizing the basic structure of your computer is tremendously helpful in keeping track of things. You’re a good person, so I’ll start by assuming that you’re already using unix. Still, it’s easy to get overwhelmed when poking through old directories that full of folders named “attempt1 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Organizing the basic structure of your computer is tremendously helpful in keeping track of things. You’re a good person, so I’ll start by assuming that you’re already using unix. Still, it’s easy to get overwhelmed when poking through old directories that full of folders named “attempt1”, “attempt2”, etc. Ryan Gallagher, a fellow student from the &lt;a href="http://compstorylab.org/"&gt;Computational Story Lab&lt;/a&gt;, who is defending his Master’s Thesis today (good luck Ryan!), sums up the problem like this:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;past me from June 21st is why we can&amp;#39;t have nice things &lt;a href="https://t.co/r5cMselk6G"&gt;pic.twitter.com/r5cMselk6G&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ryan Gallagher (@ryanjgallag) &lt;a href="https://twitter.com/ryanjgallag/status/843845937097334784?ref_src=twsrc%5Etfw"&gt;March 20, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;In the great tradition of stealing, most of my setup is inspired by (read: copied from) my PhD Advisor &lt;a href="http://uvm.edu/pdodds/"&gt;Peter Dodds&lt;/a&gt;. Next, we’ll take a look at the project directories themselves.
For projects that I have worked on, the strategies employed are varied (of course), but the best structure I have found has a division of labour like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The root directory for the project. Inside here are all of the relevant folders. Don’t set up a git repo up here, that’s one thing that have the code/paper/etc in separate folders is going to help with.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For all of the code. If it’s Python, R, MATLAB, Perl, Julia, a Jupyter notebook…it belongs here. Now that the code is in it’s own folder, you can keep it under a clean version control, share with colleagues, and publish it to github for #openscience!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;paper/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All of the tex files!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;data/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The data. The code can look for &lt;code&gt;../data&lt;/code&gt; to get everything it needs. Some caveats here: it’s often large (not to be included in GitHub), and not always in this directory. Code and data aren’t easy (or always sensible) to separate: YMMV.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;figures/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Written to by the scripts, and read from for the paper. Also, tables go here! You might as well call it “shared”.
And that’s it! Other folders that show up a lot at the top level include &lt;code&gt;presentations&lt;/code&gt;, &lt;code&gt;media&lt;/code&gt;, and &lt;code&gt;output&lt;/code&gt; for non-figure code output.&lt;/p&gt;</content><category term="Programming"></category></entry><entry><title>Digital Humanities in 2017</title><link href="https://andyreagan.github.io/2017/01/11/digital-humanities-in-2017/" rel="alternate"></link><published>2017-01-11T00:00:00+01:00</published><updated>2017-01-11T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2017-01-11:/2017/01/11/digital-humanities-in-2017/</id><summary type="html">&lt;p&gt;I received this message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tyler
Jan 9&lt;/p&gt;
&lt;p&gt;Hello Mr. Reagan,&lt;/p&gt;
&lt;p&gt;Recently I read your paper "The emotional arcs of stories are dominated by six basic shapes", and it fascinated me. I'd love to learn more about how data scientists are able to deconstruct and graph language; where can I find …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I received this message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tyler
Jan 9&lt;/p&gt;
&lt;p&gt;Hello Mr. Reagan,&lt;/p&gt;
&lt;p&gt;Recently I read your paper "The emotional arcs of stories are dominated by six basic shapes", and it fascinated me. I'd love to learn more about how data scientists are able to deconstruct and graph language; where can I find similar research papers like this one, in the fields of literature and computational/data science?&lt;/p&gt;
&lt;p&gt;Any help would be appreciated. Thanks in advance,
Tyler&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A quick response from me on some work to look into:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Andy Reagan
11:29 AM&lt;/p&gt;
&lt;p&gt;Tyler,&lt;/p&gt;
&lt;p&gt;Thanks for reaching out! There are a number of people working the area whose work is really interesting, and this area is broadly called the "digital humanities". That name, and some of the original ideas were inspired by Moretti (see the book "Distant Reading"). You could also start by checking out the work being done by Ben Schmidt, David Bamman, and David Elson- I've seen excellent papers from all of them.&lt;/p&gt;
&lt;p&gt;If you let me know more specifically what you're interested in, I might be able to provide some more specific resources.&lt;/p&gt;
&lt;p&gt;Cheers,
Andy&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Professional"></category><category term="emotional-arcs"></category></entry><entry><title>The Shapes of Stories</title><link href="https://andyreagan.github.io/2016/11/07/the-shapes-of-stories/" rel="alternate"></link><published>2016-11-07T00:00:00+01:00</published><updated>2016-11-07T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2016-11-07:/2016/11/07/the-shapes-of-stories/</id><summary type="html">&lt;p&gt;This is a repost of my original at our &lt;a href="http://www.uvm.edu/storylab/2016/11/07/emotional-arcs/"&gt;StoryLab blog&lt;/a&gt;_&lt;/p&gt;
&lt;p&gt;Stories help us encode and understand our collective existence, underpin cultures, and help frame the possible. Describing the ecology of all human stories is an essential scientific enterprise. With the advent of the internet and massive digitization this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a repost of my original at our &lt;a href="http://www.uvm.edu/storylab/2016/11/07/emotional-arcs/"&gt;StoryLab blog&lt;/a&gt;_&lt;/p&gt;
&lt;p&gt;Stories help us encode and understand our collective existence, underpin cultures, and help frame the possible. Describing the ecology of all human stories is an essential scientific enterprise. With the advent of the internet and massive digitization this vital work has become, in part, a data-driven one.&lt;/p&gt;
&lt;p&gt;There are many aspects of stories to characterize and here we take on just one: The overall emotional trajectory.&lt;/p&gt;
&lt;p&gt;In a lecture recorded in 1985, Kurt Vonnegut introduced the idea of quantifying the emotional arcs of stories. He suggested that “Man-in-a-hole” is a primary kind of shape in the dimension of good-ill fortune. “Somebody gets into trouble… gets out of it again. People LOVE that story!” If you haven’t seen the video, it’s less than 5 minutes long and a rewarding experience:&lt;/p&gt;
&lt;iframe class="youtube-player" width="554" height="300" type="text/html" src="http://www.youtube.com/embed/oP3c1h8v2ZQ?version=3&amp;amp;rel=1&amp;amp;fs=1&amp;amp;autohide=2&amp;amp;showsearch=0&amp;amp;showinfo=1&amp;amp;iv_load_policy=1&amp;amp;wmode=transparent" allowfullscreen="true" style="border:0;"&gt;&lt;/iframe&gt;

&lt;p&gt;Vonnegut pointed out that computers would be perfectly suited to the task of finding good-ill fortune trajectories, and with this inspiration and today’s computing power, we tested his instincts on a large supply of books. We extracted and analyzed the emotional arcs of 1,722 novels from the Project Gutenberg corpus using sentiment analysis, and found six common shapes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rags-to-riches,&lt;/li&gt;
&lt;li&gt;Tragedy,&lt;/li&gt;
&lt;li&gt;Man-in-a-hole (see below for more),&lt;/li&gt;
&lt;li&gt;Icarus,&lt;/li&gt;
&lt;li&gt;Cindarella,&lt;/li&gt;
&lt;li&gt;Oedipus.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s a graphical overview of our process:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.uvm.edu/storylab/wp-content/uploads/paper-schematic-150.png"&gt;&lt;img class="img-responsive" src="http://www.uvm.edu/storylab/wp-content/uploads/paper-schematic-150-760x1024.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It seems that in the space of all possible emotional arcs, we tend to prefer a handful of comprehensible building block shapes.&lt;/p&gt;
&lt;p&gt;We have interactive visualizations of the emotional arcs of thousands of books (and movies) at &lt;a href="http://hedonometer.org/books/v3/1777/"&gt;hedonometer.org&lt;/a&gt;. Details can be found in the publication in &lt;a href="http://link.springer.com/article/10.1140%2Fepjds%2Fs13688-016-0093-1"&gt;EPJ Data Science&lt;/a&gt; and the paper's &lt;a href="http://compstorylab.org/share/papers/reagan2016b/"&gt;online appendices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One more thing: Tomorrow is the 2016 US Presidential Election. Slogans are, when done well, powerful indicators of a larger narrative. The slogan "Make America Great Again", first used in &lt;a href="https://en.wikipedia.org/wiki/Make_America_Great_Again"&gt;Ronald Reagan's 1980 presidential campaign&lt;/a&gt; (and at times by other politicians including Bill Clinton), induces a remarkably full dynamic that matches Vonnegut's Man-in-a-hole trajectory. In fact, it's a much stronger framing as Man-in-a-hole does not suggest a trajectory through time by itself (&lt;a href="https://en.wikipedia.org/wiki/The_Metamorphosis"&gt;The Metamorphosis&lt;/a&gt; would roughly fit for example though the “hole” changes in nature). In four words, “Make America Great Again” manages to indicate a perceived state of the past and present, and a desired future:
&lt;a href="http://www.uvm.edu/storylab/wp-content/uploads/make-_-great-again-cropped-002.jpeg"&gt;&lt;img class="img-responsive" src="http://www.uvm.edu/storylab/wp-content/uploads/make-_-great-again-cropped-002-1024x489.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our stance here is apolitical—we are attempting to analyze stories scientifically, and we saw that “Make America Great Again” fits one of Vonnegut’s basic shapes.&lt;/p&gt;
&lt;p&gt;And our work on emotional arcs is just one part of understanding the ecology of stories.
There is much more to do: Extracting and comparing plots, character paths, comparing across cultures and time periods.
But all this now seems possible.&lt;/p&gt;</content><category term="Science"></category><category term="emotional-arcs"></category></entry><entry><title>O2X Summit Challenge!</title><link href="https://andyreagan.github.io/2016/10/01/o2x-summit-challenge/" rel="alternate"></link><published>2016-10-01T00:00:00+02:00</published><updated>2016-10-01T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2016-10-01:/2016/10/01/o2x-summit-challenge/</id><summary type="html">&lt;p&gt;After grabbing a couple hours of sleep, I had an awesome time running the &lt;a href="https://o2x.com/summit-challenge/"&gt;O2X Summit Challenge&lt;/a&gt; on Saturday with &lt;a href="https://www.strava.com/athletes/642263"&gt;Chris Danforth&lt;/a&gt; and &lt;a href="https://www.strava.com/athletes/3824994"&gt;Jarlath O'Neil-Dunne&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's my &lt;a href="https://www.strava.com/activities/730863922"&gt;Strava data&lt;/a&gt;.
The course was considerably more challenging (and interesting) than I'd expected- way more fun than running up the access road. There …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After grabbing a couple hours of sleep, I had an awesome time running the &lt;a href="https://o2x.com/summit-challenge/"&gt;O2X Summit Challenge&lt;/a&gt; on Saturday with &lt;a href="https://www.strava.com/athletes/642263"&gt;Chris Danforth&lt;/a&gt; and &lt;a href="https://www.strava.com/athletes/3824994"&gt;Jarlath O'Neil-Dunne&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's my &lt;a href="https://www.strava.com/activities/730863922"&gt;Strava data&lt;/a&gt;.
The course was considerably more challenging (and interesting) than I'd expected- way more fun than running up the access road. There were ups, downs, lots of rough bushwhacking and even crawling through rocks, and up ladders!&lt;/p&gt;
&lt;p&gt;Perhaps the most fun part was the actual &lt;em&gt;racing&lt;/em&gt; that happened during the race: usually a 5k or 10k is a time trial (you go out, and run your own pace regardless of the other people), but near the top I was actually racing for the finish with two others! Putting in an attack that was quickly shut down, catching 3rd place again, and then a sprint finish. Awesome. I have only really &lt;em&gt;raced&lt;/em&gt; one other time in a triathlon/running race that I can remember (going to the AG in a Shelburne Sprint Tri years ago), and it's an entirely different experience (bike racing, for example, is always a head to head race...but running is different for us average people most of the time).&lt;/p&gt;
&lt;p&gt;I'll definitely be back!
Check out the Strava effort above for photos, here is my favorite:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2016-10-01-O2X/2016-O2X-team.jpg" class="img-responsive"&gt;&lt;/p&gt;</content><category term="Fitness"></category><category term="running"></category><category term="race report"></category></entry><entry><title>A record that needs breaking</title><link href="https://andyreagan.github.io/2016/09/29/a-record-that-needs-breaking/" rel="alternate"></link><published>2016-09-29T00:00:00+02:00</published><updated>2016-09-29T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2016-09-29:/2016/09/29/a-record-that-needs-breaking/</id><summary type="html">&lt;p&gt;It's been about 5 years since I first stumbled across the Human Powered Land Speed [World] Record, and the competition for the record is certainly stiff.
It just got broken a &lt;a href="http://www.redbull.com/us/en/bike/stories/1331751185607/human-powered-speed-record-holder-interview"&gt;couple weeks ago&lt;/a&gt; with a run of 89MPH!!&lt;/p&gt;
&lt;p&gt;Looking through the records, I had originally noticed that the tandem …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's been about 5 years since I first stumbled across the Human Powered Land Speed [World] Record, and the competition for the record is certainly stiff.
It just got broken a &lt;a href="http://www.redbull.com/us/en/bike/stories/1331751185607/human-powered-speed-record-holder-interview"&gt;couple weeks ago&lt;/a&gt; with a run of 89MPH!!&lt;/p&gt;
&lt;p&gt;Looking through the records, I had originally noticed that the tandem record is &lt;em&gt;slower&lt;/em&gt; than the single person record...and since top speed is simply a matter of power overcoming drag, it should be faster!
Here's the &lt;a href="http://www.ihpva.org/hpvarecl.htm#nom12"&gt;record&lt;/a&gt; and some description of the &lt;a href="http://www.recumbents.com/wisil/whpsc2016/speedchallenge.htm"&gt;most recent event they had&lt;/a&gt;, for breaking records.&lt;/p&gt;
&lt;p&gt;I was able to find some details on the &lt;a href="http://www.recumbents.com/wisil/lem/glowworm/default.htm"&gt;current record holder&lt;/a&gt;, the &lt;a href="http://www.easyracers.com/racing.html"&gt;one before that&lt;/a&gt;, and &lt;a href="https://books.google.com/books?id=_VEEAAAAMBAJ&amp;amp;pg=PA85&amp;amp;lpg=PA85&amp;amp;dq=Vector+Tandem+al+voigt&amp;amp;source=bl&amp;amp;ots=I3brPbY16P&amp;amp;sig=8yxEvzYR3oYv8JAuGGcFdVnuXj0&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwiplrmkp7XPAhUKLyYKHdZnDZoQ6AEIHjAA#v=onepage&amp;amp;q=Vector%20Tandem%20al%20voigt&amp;amp;f=false"&gt;from the 70's&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The back-to-back seems like an odd choice, but perhaps it makes the most sense.
Either way, I'd love to take a shot at this one.&lt;/p&gt;</content><category term="Fitness"></category><category term="cycling"></category><category term="sweat science"></category></entry><entry><title>Javascript Vis Libraries</title><link href="https://andyreagan.github.io/2016/09/26/javascript-vis-libraries/" rel="alternate"></link><published>2016-09-26T00:00:00+02:00</published><updated>2016-09-26T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2016-09-26:/2016/09/26/javascript-vis-libraries/</id><summary type="html">&lt;p&gt;Overlooking building a visualization using native DOM manipulation (or jQuery, React.js), there are a whole bunch of libraries to help make visualizations.
Here are just some:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://d3js.org/"&gt;d3.js&lt;/a&gt; BSD&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mbostock.github.io/protovis/"&gt;protoviz&lt;/a&gt; (d3.js predecessor)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dimplejs.org/"&gt;dimple.js&lt;/a&gt; (d3.js wrapper)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://c3js.org/"&gt;C3.js&lt;/a&gt; (d3.js wrapper)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://d3plus.org/"&gt;D3plus&lt;/a&gt; (d3.js wrapper)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/metrics-graphics"&gt;Metrics Graphs …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Overlooking building a visualization using native DOM manipulation (or jQuery, React.js), there are a whole bunch of libraries to help make visualizations.
Here are just some:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://d3js.org/"&gt;d3.js&lt;/a&gt; BSD&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mbostock.github.io/protovis/"&gt;protoviz&lt;/a&gt; (d3.js predecessor)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dimplejs.org/"&gt;dimple.js&lt;/a&gt; (d3.js wrapper)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://c3js.org/"&gt;C3.js&lt;/a&gt; (d3.js wrapper)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://d3plus.org/"&gt;D3plus&lt;/a&gt; (d3.js wrapper)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/metrics-graphics"&gt;Metrics Graphs&lt;/a&gt; (d3.js wrapper)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://epochjs.github.io/epoch/"&gt;Epoch&lt;/a&gt; (d3.js wrapper)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vega.github.io/vega/"&gt;Vega&lt;/a&gt; (d3.js wrapper)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nvd3.org/examples/"&gt;NVD3&lt;/a&gt; (d3.js wrapper)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://processingjs.org/"&gt;processing.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://threejs.org/"&gt;three.js&lt;/a&gt; (* &lt;a href="http://data-arts.appspot.com/globe/"&gt;wow&lt;/a&gt;, and * &lt;a href="http://www.fallen.io/ww2/"&gt;fallen&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pixijs.com/"&gt;PixiJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bokeh.pydata.org/en/latest/docs/user_guide/bokehjs.html#userguide-bokehjs"&gt;BokehJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.highcharts.com/"&gt;Highcharts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.flotcharts.org/"&gt;Flot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.fusioncharts.com/"&gt;FusionCharts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plot.ly/"&gt;Plotly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jfree.org/jfreechart/"&gt;JFreeChart&lt;/a&gt; LGPL&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;Google Charts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://echarts.baidu.com/"&gt;Echarts (by Baidu)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sigmajs.org/"&gt;Sigma JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/danvk/dygraphs"&gt;dygraphs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/search?q=data+visualization"&gt;and many more&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Programming"></category><category term="javascript"></category><category term="d3"></category></entry><entry><title>AWS FAQ</title><link href="https://andyreagan.github.io/2016/08/26/aws-faq/" rel="alternate"></link><published>2016-08-26T00:00:00+02:00</published><updated>2016-08-26T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2016-08-26:/2016/08/26/aws-faq/</id><summary type="html">&lt;p&gt;Always a little tricky to figure out the details of these things.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/ec2/instance-types/"&gt;list of instance details&lt;/a&gt;
&lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html"&gt;block device mapping&lt;/a&gt;
^ scrolling way down, how to get metadata about the device
the bottom of this is super useful:
&lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/add-instance-store-volumes.html"&gt;aws guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;this &lt;a href="http://serverfault.com/questions/433703/how-to-use-instance-store-volumes-storage-in-amazon-ec2"&gt;helpful post&lt;/a&gt; clearly read the above.
I didn't find that I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Always a little tricky to figure out the details of these things.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/ec2/instance-types/"&gt;list of instance details&lt;/a&gt;
&lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html"&gt;block device mapping&lt;/a&gt;
^ scrolling way down, how to get metadata about the device
the bottom of this is super useful:
&lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/add-instance-store-volumes.html"&gt;aws guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;this &lt;a href="http://serverfault.com/questions/433703/how-to-use-instance-store-volumes-storage-in-amazon-ec2"&gt;helpful post&lt;/a&gt; clearly read the above.
I didn't find that I needed to use mkfs for it work, the second drive just wasn't mounted.&lt;/p&gt;</content><category term="Programming"></category><category term="sysadmin"></category><category term="aws"></category></entry><entry><title>D3.js and Reactjs</title><link href="https://andyreagan.github.io/2016/08/05/d3js-and-reactjs/" rel="alternate"></link><published>2016-08-05T00:00:00+02:00</published><updated>2016-08-05T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2016-08-05:/2016/08/05/d3js-and-reactjs/</id><summary type="html">&lt;p&gt;The world of Javascript is complicated (some might say, insane).
I recently discovered that to use the newest version of Javascript (ES 2015), there are a whole suite of build tools and transpilers that will turn your ES2015 code into JS that can run on current (IE9+) browsers. Okay!&lt;/p&gt;
&lt;p&gt;A …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The world of Javascript is complicated (some might say, insane).
I recently discovered that to use the newest version of Javascript (ES 2015), there are a whole suite of build tools and transpilers that will turn your ES2015 code into JS that can run on current (IE9+) browsers. Okay!&lt;/p&gt;
&lt;p&gt;A popular new technology for from end web UI is Reactjs.
It's developed and released by Facebook, and solves problems for them by using components.
So, it must be useful for everyone, right?&lt;/p&gt;
&lt;p&gt;If you use D3 to build awesome web graphics, then you might think so.
But the problems that it solves are already solved by D3, namely DOM manipulation.
The following post goes into a few different ways of getting them to play together, but I'll throw up the caution flag that you're just making things more complicated.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://oli.me.uk/2015/09/09/d3-within-react-the-right-way/"&gt;D3 within React the right way&lt;/a&gt; by Oliver Caldwell.
Impressive work, and he totally understands how both of these technologies work, deeply. Kudos!&lt;/p&gt;
&lt;p&gt;Perhaps a benchmark of the performance gain or loss by these approaches would help answer if there is any reason at all, because it's not making the code much prettier.
I'll be sticking with the module pattern for building re-usable D3!&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;</content><category term="Programming"></category><category term="javascript"></category><category term="d3"></category></entry><entry><title>Visiting the IBM Watson Research Center</title><link href="https://andyreagan.github.io/2016/04/13/visiting-the-ibm-watson-research-center/" rel="alternate"></link><published>2016-04-13T00:00:00+02:00</published><updated>2016-04-13T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2016-04-13:/2016/04/13/visiting-the-ibm-watson-research-center/</id><summary type="html">&lt;p&gt;Fellow &lt;a href="http://compstorylab.org/"&gt;Computational Story Lab&lt;/a&gt; researcher &lt;a href="http://www.uvm.edu/~eclark/"&gt;Eric Clark&lt;/a&gt; is spending a few months working with scientists at the &lt;a href=""&gt;Watson Research Center&lt;/a&gt;.
The project that he is a part of is really exciting, and you can read more about ``Operation Blue Sky'' in the &lt;a href="http://www.forbes.com/sites/emilymullin/2016/04/07/pfizer-ibm-launch-ambitious-internet-of-things-for-parkinsons-research/#da9309c24d62"&gt;Forbes press release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I went down for a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Fellow &lt;a href="http://compstorylab.org/"&gt;Computational Story Lab&lt;/a&gt; researcher &lt;a href="http://www.uvm.edu/~eclark/"&gt;Eric Clark&lt;/a&gt; is spending a few months working with scientists at the &lt;a href=""&gt;Watson Research Center&lt;/a&gt;.
The project that he is a part of is really exciting, and you can read more about ``Operation Blue Sky'' in the &lt;a href="http://www.forbes.com/sites/emilymullin/2016/04/07/pfizer-ibm-launch-ambitious-internet-of-things-for-parkinsons-research/#da9309c24d62"&gt;Forbes press release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I went down for a day to give a talk to their weekly machine learning seminar about some of the research that I've been doing with Chris Danforth and Peter Dodds at the `Lab.
In particular, I got to share some of the latest work we've been doing to visualize happiness and understand the stories in data.&lt;/p&gt;
&lt;p&gt;The research center and the people there are amazing, and the projects they have going are fascinating.
You aren't allowed to take any pictures though, so you'll have to take my word for it!
It was a pleasure to speak, tour the center, and meet the people on Eric's team.&lt;/p&gt;</content><category term="Professional"></category></entry><entry><title>Novel data assimilation improvements for limited observations</title><link href="https://andyreagan.github.io/2016/02/11/novel-data-assimilation-improvements-for-limited-observations/" rel="alternate"></link><published>2016-02-11T00:00:00+01:00</published><updated>2016-02-11T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2016-02-11:/2016/02/11/novel-data-assimilation-improvements-for-limited-observations/</id><summary type="html">&lt;p&gt;NOTE: This is a repost of the original on the &lt;a href="http://www.uvm.edu/storylab/2016/02/11/novel-data-assimilation-improvements-for-limited-observations/"&gt;Computational Story Lab blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The availability of data on the current state of Earth's atmosphere/ocean/land system continues to improve. As the state-of-the-art weather models and supercomputing power allow for higher resolution forecasts, down to 1km resolution on massively …&lt;/p&gt;</summary><content type="html">&lt;p&gt;NOTE: This is a repost of the original on the &lt;a href="http://www.uvm.edu/storylab/2016/02/11/novel-data-assimilation-improvements-for-limited-observations/"&gt;Computational Story Lab blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The availability of data on the current state of Earth's atmosphere/ocean/land system continues to improve. As the state-of-the-art weather models and supercomputing power allow for higher resolution forecasts, down to 1km resolution on massively parallel computers, data assimilation techniques are needed to quickly combine the mass of available data.&lt;/p&gt;
&lt;p&gt;Here at the University of Vermont, we employ a &lt;a href="http://www.uvm.edu/storylab/2013/03/18/chaos-in-an-atmosphere-hanging-on-a-wall/" target="_blank"&gt;CFD model of a thermosyphon&lt;/a&gt; as a testbed for data assimilation techniques. Our latest research, published in &lt;a href="https://t.co/dzjUyyszhE" target="_blank"&gt;PLoS ONE&lt;/a&gt;, shows that by using information about the direction of uncertainty propagation within a forecast ensemble can improve prediction skill.&lt;/p&gt;
&lt;p&gt;In order to utilize an adaptively localized covariance, we combine a Ensemble Transform Kalman Filter (ETKF) with model estimates of flow velocity to adapt the localization parameters. Below we see an ensemble of initially random forecasts come closer to the true model state, using data assimilation.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.uvm.edu/storylab/wp-content/uploads/CaiJXdlW0AAIkfe.png" rel="attachment wp-att-1707"&gt;&lt;img class="aligncenter wp-image-1707" src="http://www.uvm.edu/storylab/wp-content/uploads/CaiJXdlW0AAIkfe.png" alt="CaiJXdlW0AAIkfe" width="600" height="441" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Modest improvements in forecast skill are shown to be possible, pushing the envelope of prediction just a bit further into the future. For more detail, take a look at the open-access paper: &lt;a href="http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0148134"&gt;http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0148134&lt;/a&gt;&lt;/p&gt;</content><category term="Science"></category><category term="data-assimilation"></category></entry><entry><title>Using github pages for a project</title><link href="https://andyreagan.github.io/2016/01/12/using-github-pages-for-a-project/" rel="alternate"></link><published>2016-01-12T00:00:00+01:00</published><updated>2016-01-12T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2016-01-12:/2016/01/12/using-github-pages-for-a-project/</id><summary type="html">&lt;p&gt;If you're unfamiliar with git, start by reading this: &lt;a href="http://tom.preston-werner.com/2009/05/19/the-git-parable.html"&gt;the git parable&lt;/a&gt;. It was recommended to my by Prof. Jim Bagrow, and I wasted a lot of time trying to understand git before reading it.&lt;/p&gt;
&lt;p&gt;Now, we're going to use git (and the git hosting site: github) to version control …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you're unfamiliar with git, start by reading this: &lt;a href="http://tom.preston-werner.com/2009/05/19/the-git-parable.html"&gt;the git parable&lt;/a&gt;. It was recommended to my by Prof. Jim Bagrow, and I wasted a lot of time trying to understand git before reading it.&lt;/p&gt;
&lt;p&gt;Now, we're going to use git (and the git hosting site: github) to version control and share our project. First things first, if you don't want to share your code to world right away, since you're a student go ahead and grab the &lt;a href="http://andyreagan.github.io/2016/01/12/using-github-pages-for-a-project/"&gt;github student pack&lt;/a&gt; (thanks Mark for pointing this out). Among other things, it includes 5 free private repositories hosted on github.&lt;/p&gt;
&lt;p&gt;Getting right to it, if you're not using git already in your project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then go ahead and just add everything (but don't include your huge (&amp;gt;50MB) data files).&lt;/p&gt;
&lt;p&gt;Do your first commit, connect to github, and push your master branch up to github. If that's unclear, there are better explanations on the web than any I could offer (see the parable above).&lt;/p&gt;
&lt;p&gt;Now, create a new branch like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;--orphan&lt;span class="w"&gt; &lt;/span&gt;gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I found that here: &lt;a href="http://bitflop.com/tutorials/how-to-create-a-new-and-empty-branch-in-git.html"&gt;random git help&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And carefully remove everything in it that you don't want on the website version. (Keep stuff you're sharing, and don't remove stuff not tracked by git!). I won't fully recommend this command: &lt;code&gt;\rm -rf *&lt;/code&gt;. Now, commit that branch, and push it to github:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-am&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;first commit of gh-pages branch&lt;/span&gt;
&lt;span class="s2"&gt;git push origin gh-pages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Assuming you added github as origin).&lt;/p&gt;
&lt;p&gt;You now have a github pages project for your repo! Your URL (consult the &lt;a href="https://help.github.com/articles/user-organization-and-project-pages"&gt;github docs&lt;/a&gt; if you want to know more) is &lt;code&gt;http(s)://&amp;lt;orgname&amp;gt;.github.io/&amp;lt;projectname&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You're done! Checkout master to keep working, grab files from that into gh-pages (checkout gh-pages and do &lt;code&gt;git checkout master myfile&lt;/code&gt;), create an index.html in the root of your gh-pages, have fun!&lt;/p&gt;</content><category term="Programming"></category><category term="github"></category></entry><entry><title>All about deployment</title><link href="https://andyreagan.github.io/2015/08/08/all-about-deployment/" rel="alternate"></link><published>2015-08-08T00:00:00+02:00</published><updated>2015-08-08T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2015-08-08:/2015/08/08/all-about-deployment/</id><summary type="html">&lt;p&gt;The tools of the current day full-stack data science grad student come from the land of software developers, they have bizzare names, are changing constantly, and sometimes have super powers.
The grand pubah of reproducible research would be a mac mini shipped with every publication, and once turned on, would …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The tools of the current day full-stack data science grad student come from the land of software developers, they have bizzare names, are changing constantly, and sometimes have super powers.
The grand pubah of reproducible research would be a mac mini shipped with every publication, and once turned on, would make the whole paper, from scratch.
This is unreasonable, of course, so we settle for things like version control and virtual environments.&lt;/p&gt;
&lt;p&gt;To this end, the most complete level of isolation can be achieved with a living, breathing virtual machine.
With Vagrant, Ansible, and of course Git, we can do it.&lt;/p&gt;
&lt;p&gt;Vagrant: use a shell script to provision, or install in ssh session and rebox?
I'll try using a shell script, but this road seems dangerous.&lt;/p&gt;
&lt;p&gt;Fine tuning with documentation.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ansible.com/home"&gt;Ansible&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://uwsgi-docs.readthedocs.org/en/latest/Python.html?highlight=virtualenv"&gt;UWSGI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.vagrantup.com/v2/getting-started/index.html"&gt;Vagrant&lt;/a&gt;&lt;/p&gt;</content><category term="Programming"></category><category term="sysadmin"></category></entry><entry><title>Make every for-loop parallel in Julia</title><link href="https://andyreagan.github.io/2015/07/20/make-every-for-loop-parallel-in-julia/" rel="alternate"></link><published>2015-07-20T00:00:00+02:00</published><updated>2015-07-20T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2015-07-20:/2015/07/20/make-every-for-loop-parallel-in-julia/</id><summary type="html">&lt;p&gt;If reading the &lt;a href="http://julia.readthedocs.org/"&gt;documentation&lt;/a&gt; is confusing, making any for-loop into a parallel loop is rediculously easy.
Just add the parallel macro!
If it's code that needs to execute before moving on, just pass an operator to to macro.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# non-parallel loop&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;some_function …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;If reading the &lt;a href="http://julia.readthedocs.org/"&gt;documentation&lt;/a&gt; is confusing, making any for-loop into a parallel loop is rediculously easy.
Just add the parallel macro!
If it's code that needs to execute before moving on, just pass an operator to to macro.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# non-parallel loop&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and this becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# parallel loop&lt;/span&gt;
&lt;span class="nd"&gt;@parallel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;, you're done!
If you find that the code moves on too quickly, just add an operator to force it to wait:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# parallel loop&lt;/span&gt;
&lt;span class="n"&gt;my_zero_result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@parallel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Julia!&lt;/p&gt;</content><category term="Programming"></category><category term="julia"></category></entry><entry><title>Cross repository version control, using symbolic links</title><link href="https://andyreagan.github.io/2015/07/09/cross-repository-version-control-using-symbolic-links/" rel="alternate"></link><published>2015-07-09T00:00:00+02:00</published><updated>2015-07-09T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2015-07-09:/2015/07/09/cross-repository-version-control-using-symbolic-links/</id><summary type="html">&lt;p&gt;So, you've been writing lots and lots of awesome code.
As your codebase amasses, you can rely on snippets that you've already written, in different projects, by copying them around and upgrading as you go: productivity++.
And, because you're a good person, you use &lt;code&gt;git&lt;/code&gt; to version control your projects …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So, you've been writing lots and lots of awesome code.
As your codebase amasses, you can rely on snippets that you've already written, in different projects, by copying them around and upgrading as you go: productivity++.
And, because you're a good person, you use &lt;code&gt;git&lt;/code&gt; to version control your projects.&lt;/p&gt;
&lt;p&gt;But now, you have so many cool functions that you want to use them everything, and are left with 20 different versions across projects, each with the their own goodies.
Combining them into one library is painstaking, but you do it, and import that library into each of your projects.&lt;/p&gt;
&lt;p&gt;Every time you upgrade it for a project, you have to load the latest version into each project, and make sure it all still works.
The pain of updating and versioning your own code has overwhelmed you.&lt;/p&gt;
&lt;p&gt;So you put all the shared code into it's own project, and symbolically link it from all of your other projects.
Success!
But now, when you upload to github, and deploy through git, only the link get's included, and not the file.
Damnit!&lt;/p&gt;
&lt;p&gt;Git doesn't follow symbolic links and this is generally good practice.
But, you need it to.
Here is my super ugly solution: use the &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt; and &lt;code&gt;post-commit&lt;/code&gt; to replace the links with the files, commit, then replaces the files back with the links!
Only problem now is that &lt;code&gt;git&lt;/code&gt; thinks that the mode has changed between every commit...too bad.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# .git/hooks/pre-commit&lt;/span&gt;
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="nv"&gt;LINKED_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Users/andyreagan/work/2015/07-hedotools/js
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$GIT_DIR&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;..
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;FILE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;d3.andy.js&lt;span class="w"&gt; &lt;/span&gt;hedotools.init.js&lt;span class="w"&gt; &lt;/span&gt;hedotools.shifter.js&lt;span class="w"&gt; &lt;/span&gt;topojson.js&lt;span class="w"&gt; &lt;/span&gt;urllib.js
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="se"&gt;\r&lt;/span&gt;m&lt;span class="w"&gt; &lt;/span&gt;js/&lt;span class="nv"&gt;$FILE&lt;/span&gt;
cp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$LINKED_DIR&lt;/span&gt;/&lt;span class="nv"&gt;$FILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;js
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;js/&lt;span class="nv"&gt;$FILE&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# .git/hooks/post-commit&lt;/span&gt;
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="nv"&gt;LINKED_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Users/andyreagan/work/2015/07-hedotools/js
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$GIT_DIR&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;../js

&lt;span class="c1"&gt;# now, copy over the files&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;FILE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;d3.andy.js&lt;span class="w"&gt; &lt;/span&gt;hedotools.init.js&lt;span class="w"&gt; &lt;/span&gt;hedotools.shifter.js&lt;span class="w"&gt; &lt;/span&gt;topojson.js&lt;span class="w"&gt; &lt;/span&gt;urllib.js
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="se"&gt;\r&lt;/span&gt;m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$FILE&lt;/span&gt;
ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$LINKED_DIR&lt;/span&gt;/&lt;span class="nv"&gt;$FILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$FILE&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Programming"></category><category term="git"></category></entry><entry><title>labMTsimple: upgrades!</title><link href="https://andyreagan.github.io/2015/03/10/labmtsimple-upgrades/" rel="alternate"></link><published>2015-03-10T00:00:00+01:00</published><updated>2015-03-10T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2015-03-10:/2015/03/10/labmtsimple-upgrades/</id><summary type="html">&lt;p&gt;As part of an ongoing effort to evaluate different sentiment analysis tools, I've pushed a handful of upgrades to labMTsimple.
Namely:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python 3 compatible&lt;/li&gt;
&lt;li&gt;New module "speedy," aiming for speed (also using numpy)&lt;/li&gt;
&lt;li&gt;Class-based sentiment object&lt;/li&gt;
&lt;li&gt;ANEW, MPQA, and Liu's dictionaries are included&lt;/li&gt;
&lt;li&gt;Using "marisa-trie" and "datrie" for fast prefix …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;As part of an ongoing effort to evaluate different sentiment analysis tools, I've pushed a handful of upgrades to labMTsimple.
Namely:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python 3 compatible&lt;/li&gt;
&lt;li&gt;New module "speedy," aiming for speed (also using numpy)&lt;/li&gt;
&lt;li&gt;Class-based sentiment object&lt;/li&gt;
&lt;li&gt;ANEW, MPQA, and Liu's dictionaries are included&lt;/li&gt;
&lt;li&gt;Using "marisa-trie" and "datrie" for fast prefix matching&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's all available on &lt;a href="https://github.com/andyreagan/labMT-simple"&gt;github&lt;/a&gt; as well as on &lt;a href="https://pypi.python.org/pypi/labMTsimple/2.2.2.1"&gt;pypi&lt;/a&gt; for installation via pip.&lt;/p&gt;
&lt;p&gt;Of course, the vectors produced for the labMT set in english by the speedy module are ordered the same.
Also, no other languages for labMT on speedy yet.&lt;/p&gt;
&lt;p&gt;Stay tuned for the results of performance tests from these other dictionaries on a variety of corpuses.&lt;/p&gt;</content><category term="Programming"></category><category term="hedonometer"></category><category term="python"></category></entry><entry><title>The big happy</title><link href="https://andyreagan.github.io/2015/02/28/the-big-happy/" rel="alternate"></link><published>2015-02-28T00:00:00+01:00</published><updated>2015-02-28T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2015-02-28:/2015/02/28/the-big-happy/</id><summary type="html">&lt;p&gt;This month the latest, big happy, research paper from our group the Computational Storylab was published (&lt;a href="http://www.pnas.org/content/early/2015/02/04/1411678112"&gt;journal link&lt;/a&gt;).
In the press, this paper has been very strong, with lots of coverage that includes the New York Times, CBS, CNN, and Science magazine.
We've collated some of the most popular articles …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This month the latest, big happy, research paper from our group the Computational Storylab was published (&lt;a href="http://www.pnas.org/content/early/2015/02/04/1411678112"&gt;journal link&lt;/a&gt;).
In the press, this paper has been very strong, with lots of coverage that includes the New York Times, CBS, CNN, and Science magazine.
We've collated some of the most popular articles, and I've put them on the hedonometer &lt;a href="http://hedonometer.org/press.html"&gt;press page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All this coverage has meant lots of extra work for some people involved with paper, myself included.
The interviews of my advisors Peter Dodds and Chris Danforth have shown up in each of the press pieces, which has left me to scramble together a couple visualizations.&lt;/p&gt;
&lt;p&gt;In particular, the week before the article appeared in the NYT, I've been working hard to update the city and state rankings with the final 2014 numbers, and doing a one-off anaylsis of the NYT by section.
With word vectors in hand from Jake Williams who parsed the NYT data with perl magic, I put together a showcase that ranks and compares the individual sections of the times.&lt;/p&gt;
&lt;p&gt;Here's an image that links to full visualization:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hedonometer.org/showcase/nyt/" target="_blank"&gt;&lt;img src="/images/2015-02-28-new-hedonometer-viz/2015-02-28-nyt-viz-screen.png" class="img-responsive"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Most recently, we learned this past Monday that John Tierney of the NYT was going to be interviewed on CBS This Morning and I spent most of the day putting together a comparsion of the anchors.
They sent us the complete transcript of their show since the beginning of 2015, and I put all of the tools that I've built to use in making a speedy viz.
This is online here, with the video of Tierney being intervied at the bottom:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hedonometer.org/showcase/cbs/" target="_blank"&gt;&lt;img src="/images/2015-02-28-new-hedonometer-viz/2015-02-28-cbs-viz-screen.png" class="img-responsive"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Science"></category><category term="hedonometer"></category></entry><entry><title>Visualizing Neural Networks</title><link href="https://andyreagan.github.io/2015/02/14/visualizing-neural-networks/" rel="alternate"></link><published>2015-02-14T00:00:00+01:00</published><updated>2015-02-14T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2015-02-14:/2015/02/14/visualizing-neural-networks/</id><summary type="html">&lt;p&gt;This semester I'm taking Applied Artificial Neural Network with Professor Donna Rizzo, and I'm learning a lot about what the heck neural network are (and what they're good for).
In addition to coding up the algorithms in MATLAB, we've been encouraged to explore what's going on to build our intiutions …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This semester I'm taking Applied Artificial Neural Network with Professor Donna Rizzo, and I'm learning a lot about what the heck neural network are (and what they're good for).
In addition to coding up the algorithms in MATLAB, we've been encouraged to explore what's going on to build our intiutions of the different approaches.
So, after getting it to work in MATLAB, I coded a Bidirectional Associative Memory network in Javascript and used some d3 action to make a plot of the behavior.&lt;/p&gt;
&lt;p&gt;Here is a look at the state space of a few different, with lines showing the trajectories taken under iteration of the network.
Starting at any given node with state A, the weight matrix W sends you to a new state B along a black line.
Then the transpose of the wieght matrix W sends your back from B along the green dashed line.
For different training data (different memories coded into the weight matrix) we get very different behavior.&lt;/p&gt;
&lt;p&gt;3D binary state space with stable associated memories:&lt;/p&gt;
&lt;p&gt;&lt;img src="/demos/2015-02AANN/network1.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;3D binary state space with unstable associated memories:&lt;/p&gt;
&lt;p&gt;&lt;img src="/demos/2015-02AANN/network2.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;5D binary state space with an unstable highly associated memory:&lt;/p&gt;
&lt;p&gt;&lt;img src="/demos/2015-02AANN/network3.png" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;You can check out a &lt;a href="http://andyreagan.github.io/files/2015-02AANN-demo/BAM.html"&gt;live example here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course, the full code is available under hw03 of the &lt;a href="https://github.com/andyreagan/CSYS359"&gt;github&lt;/a&gt;.&lt;/p&gt;</content><category term="Science"></category><category term="d3"></category><category term="javascript"></category></entry><entry><title>Towards the certificate of study in complex systems</title><link href="https://andyreagan.github.io/2015/02/01/towards-the-certificate-of-study-in-complex-systems/" rel="alternate"></link><published>2015-02-01T00:00:00+01:00</published><updated>2015-02-01T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2015-02-01:/2015/02/01/towards-the-certificate-of-study-in-complex-systems/</id><summary type="html">&lt;p&gt;I'm taking three classes this semester to finish my coursework for the Certificate of Study in Complex Systems.
Having recently finished my quals, these classes will round out my plan of study with 1.5 years left to write and teach.
The classes that I'm taking are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Evolutionary Robotics with …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;I'm taking three classes this semester to finish my coursework for the Certificate of Study in Complex Systems.
Having recently finished my quals, these classes will round out my plan of study with 1.5 years left to write and teach.
The classes that I'm taking are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Evolutionary Robotics with Professor Josh Bongard&lt;/li&gt;
&lt;li&gt;Modeling Complex Systems with Professor Maggie Eppstein&lt;/li&gt;
&lt;li&gt;Applied Artificial Neural Network with Professor Donna Rizzo&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm really excited about each of these courses!
I get to first build robots and think about cognition, then model things that are interesting in the real world, and finally learn about how computers learn.&lt;/p&gt;
&lt;p&gt;The class projects that I'm going to take on in each course can hopefully fit together and if they prove to be worthwhile, could turn into the papers that I'll need to write to finish my PhD.
I have a lot of ideas that will be kept top secret, but stay tuned!&lt;/p&gt;
&lt;p&gt;All of my code for the courses is going up on github (full transparency!) and you can check each of those out here, referenced by their UVM course number:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/andyreagan/ludobots"&gt;CSYS295&lt;/a&gt; also online on &lt;a href="http://www.reddit.com/r/ludobots/comments/2rs8tu/take_this_online_robotics_course_alongside/"&gt;reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/andyreagan/CSYS302"&gt;CSYS302&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/andyreagan/CSYS359"&gt;CSYS359&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Professional"></category></entry><entry><title>The 5x(ODE exam)x4</title><link href="https://andyreagan.github.io/2014/10/14/the-5xode-examx4/" rel="alternate"></link><published>2014-10-14T00:00:00+02:00</published><updated>2014-10-14T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2014-10-14:/2014/10/14/the-5xode-examx4/</id><content type="html">&lt;p&gt;Leg 1:&lt;/p&gt;
&lt;iframe height='405' width='590' frameborder='0' allowtransparency='true' scrolling='no' src='http://www.strava.com/activities/207403252/embed/0fcc3758bfe2392e3d6ed082c0b16c6df9fd61a8'&gt;&lt;/iframe&gt;

&lt;p&gt;Leg 2:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2014-10-14-ode-run/odeexam.jpg" class="img-responsive"&gt;&lt;/p&gt;
&lt;p&gt;Leg 3:&lt;/p&gt;
&lt;iframe height='405' width='590' frameborder='0' allowtransparency='true' scrolling='no' src='http://www.strava.com/activities/207403240/embed/a45e94e634501143eaab8154cc6feb6930c3e239'&gt;&lt;/iframe&gt;</content><category term="Fitness"></category><category term="running"></category></entry><entry><title>Developing with hedonometer.org</title><link href="https://andyreagan.github.io/2014/10/02/developing-with-hedonometerorg/" rel="alternate"></link><published>2014-10-02T00:00:00+02:00</published><updated>2019-12-30T00:00:00+01:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2014-10-02:/2014/10/02/developing-with-hedonometerorg/</id><summary type="html">&lt;p&gt;~This is a draft.~&lt;/p&gt;
&lt;p&gt;Edit: 2019-12-30 this &lt;em&gt;was&lt;/em&gt; a draft, I'm just going to publish it.&lt;/p&gt;
&lt;p&gt;Long story short, you'll need to clone the git repository on bitbucket (if you don't have a bitbucket account let me know and I'll move it to github, they're the same kind of thing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;~This is a draft.~&lt;/p&gt;
&lt;p&gt;Edit: 2019-12-30 this &lt;em&gt;was&lt;/em&gt; a draft, I'm just going to publish it.&lt;/p&gt;
&lt;p&gt;Long story short, you'll need to clone the git repository on bitbucket (if you don't have a bitbucket account let me know and I'll move it to github, they're the same kind of thing).
Then you can add a remote that is the linode, (you ssh keys are already in all of the new user accounts on the linode under which the apps run), change the code, and then push to the linode.&lt;/p&gt;
&lt;p&gt;For me editing the master branch (this is fine since you're just changing text) looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;master&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# update the local version&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pyenv/bin/activate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# initialize python virtual environment&lt;/span&gt;
./manage.py&lt;span class="w"&gt; &lt;/span&gt;runserver&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;54043&lt;/span&gt;
&lt;span class="c1"&gt;# edit the code&lt;/span&gt;
&lt;span class="c1"&gt;# all the changes are viewable at 127.0.0.1:54043&lt;/span&gt;
C-c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# to close the server&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;status&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# check what you changed&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;newfile.html&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# add any new files&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-am&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;simple commit&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# commit all changes to watched files&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;master&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# push to the bitbucket&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;production&lt;span class="w"&gt; &lt;/span&gt;master&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# push to the linode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The remote should look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;happy%&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;-v
origin&lt;span class="w"&gt; &lt;/span&gt;https://andrewreagan@bitbucket.org/andrewreagan/linode-backup.git&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;fetch&lt;span class="o"&gt;)&lt;/span&gt;
origin&lt;span class="w"&gt; &lt;/span&gt;https://andrewreagan@bitbucket.org/andrewreagan/linode-backup.git&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;push&lt;span class="o"&gt;)&lt;/span&gt;
production&lt;span class="w"&gt; &lt;/span&gt;prod@hedonometer.org:prod.git&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;fetch&lt;span class="o"&gt;)&lt;/span&gt;
production&lt;span class="w"&gt; &lt;/span&gt;prod@hedonometer.org:prod.git&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;push&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dev@hedonometer.org:dev.git&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;fetch&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dev@hedonometer.org:dev.git&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;push&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which is setup with &lt;code&gt;git remote add production prod@hedonometer.org:prod.git&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The specific files that you'll want to edit are in &lt;code&gt;hedonometer/templates/hedonometer/*.html&lt;/code&gt;.
Once you've cloned the repository, you can set up the virtual python environment using &lt;code&gt;virtualenv pyenv&lt;/code&gt;, installed from &lt;code&gt;brew install virtualenv&lt;/code&gt;. Then source the virtualenv, and use pip to install the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.6&lt;/span&gt;
&lt;span class="n"&gt;South&lt;/span&gt;
&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tastypie&lt;/span&gt;
&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sekizai&lt;/span&gt;
&lt;span class="n"&gt;MySQL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Oh, also, for the site to run locally, you need a local mysql server and to put the connection settings into your environment. Getting the mysql server running (installed with &lt;code&gt;brew install mysql&lt;/code&gt;) was annoying at best, but then once you've got it running and created a database, my local environment settings are in a .env file in the repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;******
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;django.db.backends.mysql
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;testdb
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;arret3
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_STATIC_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Users/andyreagan/work/2014/2014-09hedonometer/mysite/static
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;minify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yuicompressor&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So...wow that sounds a lot more complicated than I thought it would be.&lt;/p&gt;
&lt;p&gt;A lot of the fuss is to get the site running locally, but as long as you don't need to see changes until they're on the site, you wouldn't need to get the site running locally...you could just clone the git repository, and push changes up the site.&lt;/p&gt;</content><category term="Programming"></category><category term="hedonometer"></category><category term="sysadmin"></category></entry><entry><title>Django on Linode: My Deployment Strategy</title><link href="https://andyreagan.github.io/2014/09/30/django-on-linode-my-deployment-strategy/" rel="alternate"></link><published>2014-09-30T00:00:00+02:00</published><updated>2014-10-06T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2014-09-30:/2014/09/30/django-on-linode-my-deployment-strategy/</id><summary type="html">&lt;p&gt;Over the past six months, I definitely haven't figured out the best Django deployment strategy, but I've come a long way. The following is all set up on a &lt;a href="https://www.linode.com/"&gt;linode&lt;/a&gt; running Ubuntu 12.04.5 LTS.
There are a few key considerations to the setup of hedonometer.org:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We're using …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Over the past six months, I definitely haven't figured out the best Django deployment strategy, but I've come a long way. The following is all set up on a &lt;a href="https://www.linode.com/"&gt;linode&lt;/a&gt; running Ubuntu 12.04.5 LTS.
There are a few key considerations to the setup of hedonometer.org:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We're using a virtual machine for full control over the server&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;, because it's a python MVC framework and has good templating&lt;/li&gt;
&lt;li&gt;Data files stored statically for visualizations (asynchronous loads)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d3js.org/"&gt;d3&lt;/a&gt; for the data visualization&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Evolution of the server&lt;/h2&gt;
&lt;p&gt;At first, the whole thing was running off of the django development server, directly through nginx.
This lasted a long time.
To edit code on the server...it was edited live, through emacs (requiring root acess and port 22 open (at least only ssh keys)) and the django development server was restarted to show changes.
Static files we're collected, they were just edited in place, since this created another step in the way of editing.
Everything for the app was in &lt;code&gt;/usr/share/nginx/wiki/mysite&lt;/code&gt; due to some terrible folder creation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;hedonometer.org&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;nginx&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;django
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Too many times the site went down due to typos while editing, so I moved to having two separate folders, one served by nginx through dev.hedonometer.org, and the production through hedonometer.org.
This worked well enough, but the code was still edited on the server, in place, and the security was still lacking.
The files were now separated out in &lt;code&gt;/usr/share/nginx/dev&lt;/code&gt;, &lt;code&gt;/usr/share/nginx/prod&lt;/code&gt;, &lt;code&gt;/usr/share/nginx/data&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;hedonometer.org&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;nginx&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;django
dev.hedonometer.org&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;nginx&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;django
hedonometer.org/data&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;nginx&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/usr/share/nginx/data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then along came uWSGI. This got us away from the django development server, a good step forward...but we were just running two uwsgi servers from root.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;hedonometer.org&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;nginx&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;uwsgi&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;django
dev.hedonometer.org&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;nginx&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;uwsgi&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;django
hedonometer.org/data&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;nginx&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/usr/share/nginx/data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With a great leap, I spawned uWSGI in emporer mode, created user accounts with empty git repositories for each version of the site, and could push the site up through git, where uwsgi would restart with post commit hook, static files would be collected, etc.
The user accounts were &lt;code&gt;prod&lt;/code&gt; and &lt;code&gt;dev&lt;/code&gt;, so the site was hosted in &lt;code&gt;/home/prod/hedonometer&lt;/code&gt; and &lt;code&gt;/home/dev/hedonometer&lt;/code&gt;.
Getting a local version running with mysql on the mac was a pain, but then I could actually run the site locally.
And things were better.
Since most of the data is loaded from static data files, I started using full URL paths for the data.&lt;/p&gt;
&lt;p&gt;And that leaves us at now.
A final upgrade removed all of the private settings in python files, and moved them all to the environment...so that the whole project could be shared on &lt;a href="https://github.com/andyreagan/hedonometer"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Setting up this strategy&lt;/h2&gt;
&lt;p&gt;First, rip through the &lt;a href="https://www.linode.com/docs/security/securing-your-server"&gt;security guide&lt;/a&gt; from linode. By that, I mean take a good couple days.
Then:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.linode.com/docs/websites/nginx/websites-with-nginx-on-ubuntu-12-04-lts-precise-pangolin"&gt;Set up nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linode.com/docs/databases/mysql/using-mysql-relational-databases-on-ubuntu-12-04-lts-precise-pangolin"&gt;Get mysql running&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Basically, we're going to create a user account, some settings for uwsgi and nginx to serve this account, and start the bare git repository that will be used to host it.
I've pulled these settings together from a lot of different places, mainly the docs for each service, and I also want to acknowledge that I found a &lt;a href="http://bradenmacdonald.com/blog/2013/hosting-django-apps-ubuntu-nginx-uwsgi"&gt;blog post by Braden MacDonald&lt;/a&gt; that has a very similar strategy.
All of this can be accomplised with a long bash script, which I'll post someday, and here is the blow by blow:&lt;/p&gt;
&lt;p&gt;Since you followed the linode security guide, log in to your user account on the linode. For me, this is &lt;code&gt;user0&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;user0@hedonometer.org
su&lt;span class="w"&gt; &lt;/span&gt;root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We're going to create an app called &lt;code&gt;storybreaker&lt;/code&gt;, and serve it at &lt;code&gt;storybreaker.hedonometer.org&lt;/code&gt;. First, make it a database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;create database storybreaker&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mysql&lt;span class="w"&gt; &lt;/span&gt;--user&lt;span class="o"&gt;=&lt;/span&gt;root&lt;span class="w"&gt; &lt;/span&gt;--password&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_PASSWORD&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create a user account:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;useradd&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;/home/storybreaker&lt;span class="w"&gt; &lt;/span&gt;-G&lt;span class="w"&gt; &lt;/span&gt;www-data&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;-U&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;/bin/bash&lt;span class="w"&gt; &lt;/span&gt;storybreaker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Log into that user account and make the git repo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;su&lt;span class="w"&gt; &lt;/span&gt;storybreaker&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# log in as storybreaker&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt;
mkdir&lt;span class="w"&gt; &lt;/span&gt;.ssh&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;chmod&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.ssh&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;touch&lt;span class="w"&gt; &lt;/span&gt;.ssh/authorized_keys
mkdir&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;.git
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;.git
git&lt;span class="w"&gt; &lt;/span&gt;init&lt;span class="w"&gt; &lt;/span&gt;--bare
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;..
mkdir&lt;span class="w"&gt; &lt;/span&gt;storybreaker
mkdir&lt;span class="w"&gt; &lt;/span&gt;uwsgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, while you're in as &lt;code&gt;storybreaker&lt;/code&gt;, edit the post recieve hook in &lt;code&gt;~/storybreaker.git/hooks/post-recieve&lt;/code&gt; to do some stuff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;GIT_WORK_TREE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/storybreaker/storybreaker
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;-f

python&lt;span class="w"&gt; &lt;/span&gt;/home/storybreaker/storybreaker/manage.py&lt;span class="w"&gt; &lt;/span&gt;collectstatic&lt;span class="w"&gt; &lt;/span&gt;--noinput

&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/uwsgi
cp&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="o"&gt;{&lt;/span&gt;.base,.tmp&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;env = DJ_SECRET_KEY=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DJ_SECRET_KEY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;config.tmp
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;env = DJ_DEBUG=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DJ_DEBUG&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;config.tmp
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;env = DJ_DB_ENGINE=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_ENGINE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;config.tmp
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;env = DJ_DB_NAME=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;config.tmp
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;env = DJ_DB_USER=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_USER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;config.tmp
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;env = DJ_DB_PASSWORD=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_PASSWORD&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;config.tmp
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;env = DJ_DB_HOST=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_HOST&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;config.tmp
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;env = DJ_DB_PORT=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_PORT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;config.tmp
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;env = DJ_STATIC_ROOT=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DJ_STATIC_ROOT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;config.tmp
cp&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="o"&gt;{&lt;/span&gt;.tmp,&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where the &lt;code&gt;~/uwsgi/config.base&lt;/code&gt; looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;uwsgi&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# setting from braden&lt;/span&gt;
&lt;span class="nv"&gt;socket&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/storybreaker/uwsgi/socket
chmod-socket&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;666&lt;/span&gt;
&lt;span class="nv"&gt;master&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;processes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;

&lt;span class="c1"&gt;# for python&lt;/span&gt;
&lt;span class="nv"&gt;virtualenv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/storybreaker/storybreaker/pyenv
&lt;span class="nv"&gt;pythonpath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/storybreaker/storybreaker
&lt;span class="nv"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mysite.wsgi

&lt;span class="nv"&gt;pidfile2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/storybreaker/uwsgi/pid
&lt;span class="nv"&gt;daemonize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/storybreaker/uwsgi/log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sure to get a newline at the end of the &lt;code&gt;config.base&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And the &lt;code&gt;.env&lt;/code&gt; file storying the settings for the app looks like (make sure this is sourced in &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# /home/storybreaker/.env&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;not telling&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;FALSE
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;django.db.backends.mysql
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;storybreaker
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;not telling either&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_DB_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3306&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;DJ_STATIC_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/storybreaker/storybreaker/mysite/static
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So now you can see what the post recieve hook does: copy over the files, collect static, and make a new config file for uWSGI.
Once this new config file is copied over, the server will restart, because we're about to link to it the folder that the uWSGI emporer is watching.&lt;/p&gt;
&lt;p&gt;Copy over the ssh keys to their account:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat&lt;span class="w"&gt; &lt;/span&gt;~/.ssh/authorized_keys&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/home/storybreaker/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now is a good time to push up the app, test the database connection, and install the requirements in the &lt;code&gt;virtualenv&lt;/code&gt;.
To push from the local repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# locally&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;linode&lt;span class="w"&gt; &lt;/span&gt;storybreaker@hedonometer.org:storybreaker.git
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;linode&lt;span class="w"&gt; &lt;/span&gt;master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I store the requirements in a file called &lt;code&gt;requirements.txt&lt;/code&gt;, and so setting up from here (under the storybreaker user) looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# as storybreaker&lt;/span&gt;
env&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# check the the DJ_ settings are in the environment&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/storybreaker
./manage.py&lt;span class="w"&gt; &lt;/span&gt;dbshell&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# make sure we can log into the db&lt;/span&gt;
./manage.py&lt;span class="w"&gt; &lt;/span&gt;collectstatic&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# check static file collection&lt;/span&gt;
virtualenv&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# set up virtualenv&lt;/span&gt;
.&lt;span class="w"&gt; &lt;/span&gt;pyenv/bin/activate
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, if everything worked, we just need to create and link a nginx configuration, and link the uwsgi configuration.
The nginx config file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# the upstream component nginx needs to connect to&lt;/span&gt;
upstream&lt;span class="w"&gt; &lt;/span&gt;storybreaker&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;server&lt;span class="w"&gt; &lt;/span&gt;unix:///home/storybreaker/uwsgi/socket&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# for a file socket&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# configuration of the server&lt;/span&gt;
server&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# the port your site will be served on&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;listen&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# the domain name it will serve for&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;server_name&lt;span class="w"&gt; &lt;/span&gt;storybreaker.hedonometer.org&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;charset&lt;span class="w"&gt;     &lt;/span&gt;utf-8&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# max upload size&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;client_max_body_size&lt;span class="w"&gt; &lt;/span&gt;75M&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;# adjust to taste&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# set this for local development&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# add_header &amp;#39;Access-Control-Allow-Origin&amp;#39; &amp;#39;http://127.0.0.1:54043&amp;#39;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;rewrite&lt;span class="w"&gt;  &lt;/span&gt;^/&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\?&lt;/span&gt;.*&lt;span class="o"&gt;)&lt;/span&gt;?$&lt;span class="w"&gt;  &lt;/span&gt;/index.html&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;permanent&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;location&lt;span class="w"&gt; &lt;/span&gt;/static&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;autoindex&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/storybreaker/storybreaker/mysite/static&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# your Django project&amp;#39;s static files - amend as required&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;location&lt;span class="w"&gt; &lt;/span&gt;/data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;autoindex&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/usr/share/nginx/data&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# your Django project&amp;#39;s static files - amend as required&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Finally, send all non-media requests to the Django server.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;location&lt;span class="w"&gt; &lt;/span&gt;/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;uwsgi_pass&lt;span class="w"&gt; &lt;/span&gt;storybreaker&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;include&lt;span class="w"&gt; &lt;/span&gt;/home/storybreaker/uwsgi_params&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# the uwsgi_params file you installed&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# link this config&lt;/span&gt;
ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;/home/storybreaker/nginx.conf&lt;span class="w"&gt; &lt;/span&gt;/etc/nginx/sites-enabled/storybreaker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# from root, copy over this file we made&lt;/span&gt;
mv&lt;span class="w"&gt; &lt;/span&gt;/home/panometer/uwsgi/config&lt;span class="w"&gt; &lt;/span&gt;/etc/uwsgi/panometer.ini
&lt;span class="c1"&gt;# double check that they own this&lt;/span&gt;
chown&lt;span class="w"&gt; &lt;/span&gt;storbreaker:www-data&lt;span class="w"&gt; &lt;/span&gt;/etc/uwsgi/panometer.ini
&lt;span class="c1"&gt;# as panometer, make a link&lt;/span&gt;
su&lt;span class="w"&gt; &lt;/span&gt;panometer
ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;/etc/uwsgi/panometer.ini&lt;span class="w"&gt; &lt;/span&gt;~/uwsgi/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, just restart nginx and it should be working!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nginx&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Things I'm looking to do&lt;/h2&gt;
&lt;p&gt;To avoid duplicating, there are a whole host of issues that I still have, and I've posted them on the github repository: &lt;a href="https://github.com/andyreagan/hedonometer/issues"&gt;https://github.com/andyreagan/hedonometer/issues&lt;/a&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="hedonometer"></category><category term="sysadmin"></category></entry><entry><title>Hedonometer 2.0</title><link href="https://andyreagan.github.io/2014/09/29/hedonometer-20/" rel="alternate"></link><published>2014-09-29T00:00:00+02:00</published><updated>2014-09-29T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2014-09-29:/2014/09/29/hedonometer-20/</id><summary type="html">&lt;p&gt;This is reblog of &lt;a href="http://www.uvm.edu/storylab/"&gt;Computational Story Lab&lt;/a&gt;'s post title &lt;a href="http://www.uvm.edu/storylab/2014/09/29/hedonometer-2-0/"&gt;Hedonometer 2.0&lt;/a&gt; written by &lt;a href="http://www.uvm.edu/~pdodds/"&gt;Peter Dodds&lt;/a&gt;.&lt;/p&gt;
&lt;div id="attachment_1431" class="wp-caption alignleft"&gt;&lt;a href="http://hedonometer.org/maps.html"&gt;&lt;img src="http://compstorylab.org/wp-content/uploads/2014-09-15hedonometer-map-1024x764.png" alt="Geography of Happiness for the US" class="size-large wp-image-1431 img-responsive" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Geography of Happiness for the US&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Over the summer of 2014, we have worked very hard to bring many new pieces to our &lt;a href="http://www.hedonometer.org/"&gt;Hedonometer&lt;/a&gt;, and we’re pleased to tell you about what …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is reblog of &lt;a href="http://www.uvm.edu/storylab/"&gt;Computational Story Lab&lt;/a&gt;'s post title &lt;a href="http://www.uvm.edu/storylab/2014/09/29/hedonometer-2-0/"&gt;Hedonometer 2.0&lt;/a&gt; written by &lt;a href="http://www.uvm.edu/~pdodds/"&gt;Peter Dodds&lt;/a&gt;.&lt;/p&gt;
&lt;div id="attachment_1431" class="wp-caption alignleft"&gt;&lt;a href="http://hedonometer.org/maps.html"&gt;&lt;img src="http://compstorylab.org/wp-content/uploads/2014-09-15hedonometer-map-1024x764.png" alt="Geography of Happiness for the US" class="size-large wp-image-1431 img-responsive" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Geography of Happiness for the US&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Over the summer of 2014, we have worked very hard to bring many new pieces to our &lt;a href="http://www.hedonometer.org/"&gt;Hedonometer&lt;/a&gt;, and we’re pleased to tell you about what we’ve done, and where we’re going next.&lt;/p&gt;
&lt;div id="attachment_1433" class="wp-caption alignleft"&gt;&lt;a href="http://hedonometer.org"&gt;&lt;img src="http://compstorylab.org/wp-content/uploads/2014-09-11hedonometer-time-series-300x175.png" alt="Snapshot of Hedonometer 2.0&amp;#039;s happiness time series." class="size-medium wp-image-1433 img-responsive" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Snapshot of Hedonometer 2.0&amp;#8242;s happiness time series.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;All along, one of the central goals for the Hedonometer has been to provide a new instrument for society’s dashboard, one that measures population-level happiness in real time from any streaming text source. Like flying a plane, where we would never want just one dial with the limits “all good” and “uh-oh”, we need a sophisticated dashboard to quantify how well a population is faring. We want to see unconventional measures like ours added to traditional, easier-to-gauge quantities often concerned with economic activity. Money &lt;a href="http://en.wikipedia.org/wiki/Hedonic_treadmill"&gt;doesn’t&lt;/a&gt; &lt;a href="http://en.wikipedia.org/wiki/Easterlin_paradox"&gt;equal&lt;/a&gt; happiness. We hope the Hedonometer will enable individuals, journalists, policy makers, corporations, and other research teams in their various pursuits.&lt;/p&gt;
&lt;p&gt;Because our Hedonometer works for any large text, we’re able to explore other areas for basic science purposes, particularly the vast realm of sociotechnical systems and the &lt;a href="http://www.hedonometer.org/books.html"&gt;digital humanities&lt;/a&gt;. And some of our work will be simply just for fun (hopefully yours and ours).&lt;/p&gt;
&lt;div id="attachment_1436" class="wp-caption alignright"&gt;&lt;a href="http://hedonometer.org/books.html?book=Harry%20Potter%20and%20the%20Prisoner%20of%20Azkaban"&gt;&lt;img src="http://compstorylab.org/wp-content/uploads/2014-09-27prisoner-of-azkaban-300x203.png" alt="Harry Potter and the Prisoner of Azkaban." class="size-medium wp-image-1436 img-responsive" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Harry Potter and the Prisoner of Azkaban.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;As you’ll see below, we have many plans for the future. So far, we’ve received crucial support from the NSF and the MITRE Corporation, and we’re always looking for more ways to continue to lift our enterprise. If you’re interested in or have suggestions about funding our work, &lt;a href="http://hedonometer.org/funding.html"&gt;please contact us&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Okay—here’s what we’ve put together. We now have four main interactive views of emotion up and running:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A completely rebuilt global Twitter &lt;a href="http://www.hedonometer.org/index.html"&gt;happiness time series in English&lt;/a&gt;, updated daily and with powerful new word shifts;&lt;/li&gt;
&lt;li&gt;An interactive &lt;a href="http://www.hedonometer.org/maps.html"&gt;map of happiness&lt;/a&gt; for the 50 US States plus DC, also based on Twitter;&lt;/li&gt;
&lt;li&gt;A &lt;a href="http://www.hedonometer.org/cities.html"&gt;ranked list of cities&lt;/a&gt; by happiness for the US (Twitter again);&lt;/li&gt;
&lt;li&gt;and an explorable visualization of &lt;a href="http://www.hedonometer.org/books.html"&gt;the emotional plot trajectories of 10,000 books in 10 major languages&lt;/a&gt; including &lt;a href="http://hedonometer.org/books.html?book=Harry%20Potter%20and%20the%20Sorcerer%27s%20Stone"&gt;Harry Potter&lt;/a&gt; along with classic and obscure works.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We’ll go into more depth about how to use and share these visualizations in our following blog posts. As always, Hedonometer stands on a &lt;a href="http://hedonometer.org/about.html"&gt;team effort&lt;/a&gt; but we have to acknowledge and praise Andy Reagan (&lt;a href="http://www.uvm.edu/storylab/2014/09/29/hedonometer-2-0/www.twitter.com/@andyreagan"&gt;@andyreagan&lt;/a&gt;) for his incredible efforts in leading the charge to Hedonometer 2.0. Building things is fun.&lt;/p&gt;
&lt;p&gt;Some of the many new elements we’re looking to add in the next year are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Other kinds of real-time, population-scale meters based on word usage including sleep, food consumption, exercise, binge-drinking, and boredom. We’ll apply these meters to Twitter but they could in principle be used on any text.&lt;/li&gt;
&lt;li&gt;Global Twitter happiness time series and maps for all 10 languages: English, Spanish, French, German, Brazilian Portuguese, Indonesian, Korean, Simplified Chinese, Arabic, and Russian;&lt;/li&gt;
&lt;li&gt;Real-time Twitter happiness at 1 minute time scales.&lt;/li&gt;
&lt;li&gt;An interactive world map with the ability to explore at scales of country, state, city, and district (or equivalents).&lt;/li&gt;
&lt;li&gt;Simple ways to embed our interactive visualizations into webpages;&lt;/li&gt;
&lt;li&gt;A simple interface for uploading and comparing two texts, and for generating shareable visualizations;&lt;/li&gt;
&lt;li&gt;Phrase-based rather than word-based analysis in English;&lt;/li&gt;
&lt;li&gt;More stand-alone projects such as interactive visualizations of music lyrics over the last 60 years;&lt;/li&gt;
&lt;li&gt;Measures based on other major emotions such as fear, disgust, anger, and surprise.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We also have two longer-term, major projects in development:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A fast search facility in the Hedonometer for users to find the emotional spectrum around specific words or phrases. This is a computationally bundensome problem. We’ll be able to show how the emotional texture of how people are talking about an event or a product.&lt;/li&gt;
&lt;li&gt;Storybreaker: a real-time extractor of stories and narratives emerging around major events. Our algorithm will include emotion but our goal is to measure frames around issues and ultimately meaningful stories.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One last thing: we’ve moved our blog from &lt;a href="http://onehappybird.com/"&gt;onehappybird&lt;/a&gt; to &lt;a href="http://www.compstorylab.org/"&gt;compstorylab.org&lt;/a&gt;. All old links will still work.&lt;/p&gt;</content><category term="Science"></category><category term="hedonometer"></category></entry><entry><title>Using labMT-simple to make wordshifts</title><link href="https://andyreagan.github.io/2014/09/24/using-labmt-simple-to-make-wordshifts/" rel="alternate"></link><published>2014-09-24T00:00:00+02:00</published><updated>2014-09-24T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2014-09-24:/2014/09/24/using-labmt-simple-to-make-wordshifts/</id><summary type="html">&lt;p&gt;I just merged updates to the d3 wordshift plotting into labMTsimple, and combined with phantom crowbar (see previous post), it's easier than ever to use the labMT data set to compare texts.&lt;/p&gt;
&lt;p&gt;To make an html page with the shift, you'll just need to have labMT-simple installed.
To automate the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just merged updates to the d3 wordshift plotting into labMTsimple, and combined with phantom crowbar (see previous post), it's easier than ever to use the labMT data set to compare texts.&lt;/p&gt;
&lt;p&gt;To make an html page with the shift, you'll just need to have labMT-simple installed.
To automate the process into generating svg files, you'll need the phantom crowbar, which depends on phantomjs.
To go all the way to pdf, you'll also need inkscape.&lt;/p&gt;
&lt;p&gt;Let's get set up to make shifts automatically.
Since they're aren't many dependencies all the way down, start by getting phantomjs installed, then the phantom-crowbar.&lt;/p&gt;
&lt;h2&gt;Installing phantom-crowbar&lt;/h2&gt;
&lt;p&gt;For the phantomjs, I prefer to use homebrew:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew&lt;span class="w"&gt; &lt;/span&gt;update
brew&lt;span class="w"&gt; &lt;/span&gt;upgrade
brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;phantomjs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then to get the crowbar, clone the git repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~
git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/andyreagan/phantom-crowbar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To use it system-wide, I use the bash alias:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;phantom-crowbar&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/local/bin/phantomjs ~/phantom-crowbar/phantom-crowbar.js&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Without too much detail, I recommend adding this to your &lt;code&gt;~/.bash_profile&lt;/code&gt; so that it's loaded every time you start a terminal session.&lt;/p&gt;
&lt;h2&gt;Installing inkscape&lt;/h2&gt;
&lt;p&gt;You only need inkscape if you want to go from svg to pdf (and there are other ways too), but this one is easy with, again, homebrew.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;inkscape
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Installing labMTsimple&lt;/h2&gt;
&lt;p&gt;There are two ways to get it: using pip of cloning the git repo.
If you're not sure, use pip.
I think pip makes it easier to keep it up to date, etc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;labMTsimple
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Making your first shift&lt;/h2&gt;
&lt;p&gt;If you cloned the git repository, install the thing and then you can check out the example in &lt;code&gt;examples/example.py&lt;/code&gt;.
If you went with pip, see that file on &lt;a href="https://github.com/andyreagan/labMT-simple/blob/master/examples/example.py"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The basic idea is to generate the word vectors, and then pass them to &lt;code&gt;shiftHtml()&lt;/code&gt;.
In a little bit more detail, the key pieces are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# load the module&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;labMTsimple.storyLab&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="c1"&gt;# get word, and word score frequency vectors&lt;/span&gt;
&lt;span class="n"&gt;labMT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;labMTvector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;labMTwordList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;emotionFileReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stopval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;returnVector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# see the example file, but assuming there are two strings to score&lt;/span&gt;
&lt;span class="c1"&gt;# named &amp;quot;saturday&amp;quot; and &amp;quot;tuesday&amp;quot;, generate their word frequency vectors&lt;/span&gt;
&lt;span class="n"&gt;saturdayValence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;saturdayFvec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;emotion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;saturday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;labMT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;happsList&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;labMTvector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tuesdayValence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tuesdayFvec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;emotion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tuesday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;labMT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;happsList&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;labMTvector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# apply the traditional lens to the frequency vectors&lt;/span&gt;
&lt;span class="c1"&gt;# this sets the frequency of words with score between&lt;/span&gt;
&lt;span class="c1"&gt;# 4 and 6 (corresponding to stopval of 1)&lt;/span&gt;
&lt;span class="n"&gt;tuesdayStoppedVec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stopper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tuesdayFvec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;labMTvector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;labMTwordList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;stopVal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;saturdayStoppedVec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stopper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;saturdayFvec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;labMTvector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;labMTwordList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;stopVal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# generate an html file&lt;/span&gt;
&lt;span class="c1"&gt;# and make a static directory&lt;/span&gt;
&lt;span class="n"&gt;shiftHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labMTvector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;labMTwordList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tuesdayStoppedVec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;saturdayStoppedVec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wordshift.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That last call actually does quite a few things, in detail:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creates a directory called &lt;code&gt;static&lt;/code&gt;, in your working directory&lt;/li&gt;
&lt;li&gt;Copies in a handful of files into &lt;code&gt;static&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Writes a javascript file called &lt;code&gt;static/wordshift.js&lt;/code&gt; that has the lens, words, and both frequency vectors written out. The name is based off the root of the html file you've told it to write.&lt;/li&gt;
&lt;li&gt;Writes an html file, which loads all the javascript in static.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Phew! We've made the html file. You can open it directly in Chrome (or your browser of choice...IE not tested).&lt;/p&gt;
&lt;p&gt;The optional, final step is to make the svg and/or pdf:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;phantom-crowbar&lt;span class="w"&gt; &lt;/span&gt;wordshift.html&lt;span class="w"&gt; &lt;/span&gt;shiftsvg&lt;span class="w"&gt; &lt;/span&gt;wordshift.svg
inkscape&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;wordshift.svg&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;wordshift.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, check out wordshift.pdf for the file!
And I'm working on upgrades, like optionally removing the shift button or putting numbers on the axes, so look out for more.&lt;/p&gt;
&lt;p&gt;And feel free to tweet suggestions at &lt;a href="https://twitter.com/andyreagan"&gt;@andyreagan&lt;/a&gt;, and submit pull requests to the &lt;a href="https://github.com/andyreagan/labMT-simple"&gt;source code&lt;/a&gt;!&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="javascript"></category><category term="d3"></category><category term="hedonometer"></category></entry><entry><title>Announcing the Phantom Crowbar</title><link href="https://andyreagan.github.io/2014/09/19/announcing-the-phantom-crowbar/" rel="alternate"></link><published>2014-09-19T00:00:00+02:00</published><updated>2014-09-19T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2014-09-19:/2014/09/19/announcing-the-phantom-crowbar/</id><summary type="html">&lt;p&gt;Extract the raw SVG (and styles) from a webpage, from the command line!&lt;/p&gt;
&lt;p&gt;Motivated by the desire to use d3 to make figures automatically.&lt;/p&gt;
&lt;p&gt;Built on top of the wonderful, and more versatile, &lt;a href="http://nytimes.github.io/svg-crowbar/"&gt;svg-crowbar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm testing it on hedonometer.org, and remaining issues are converting to a PDF correctly. But …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Extract the raw SVG (and styles) from a webpage, from the command line!&lt;/p&gt;
&lt;p&gt;Motivated by the desire to use d3 to make figures automatically.&lt;/p&gt;
&lt;p&gt;Built on top of the wonderful, and more versatile, &lt;a href="http://nytimes.github.io/svg-crowbar/"&gt;svg-crowbar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm testing it on hedonometer.org, and remaining issues are converting to a PDF correctly. But this is likely a result of haphazard use of CSS styles in the page design.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;phantomjs&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;phantomjs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Clone this repository.&lt;/p&gt;
&lt;p&gt;Run the &lt;code&gt;phantom-crowbar.js&lt;/code&gt; with &lt;code&gt;phantomjs&lt;/code&gt;, passing the webpage, the id of the svg element to grab, and the output filename.
Here's the first line of test/run.sh:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;phantomjs&lt;span class="w"&gt; &lt;/span&gt;phantom-crowbar.js&lt;span class="w"&gt; &lt;/span&gt;http://hedonometer.org&lt;span class="w"&gt; &lt;/span&gt;timeseries&lt;span class="w"&gt; &lt;/span&gt;test1.svg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Uses&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inkscape&lt;/li&gt;
&lt;li&gt;CairoSVG&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;inkscape
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;CairoSVG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run tests with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
.&lt;span class="w"&gt; &lt;/span&gt;run.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Inkscape will throw a lot of warnings.
As mentioned above, there are still plenty of kinks to work out.&lt;/p&gt;</content><category term="Programming"></category><category term="javascript"></category><category term="d3"></category></entry><entry><title>Github pages with Pelican</title><link href="https://andyreagan.github.io/2014/09/04/github-pages-with-pelican/" rel="alternate"></link><published>2014-09-04T00:00:00+02:00</published><updated>2014-09-04T00:00:00+02:00</updated><author><name>Andy Reagan</name></author><id>tag:andyreagan.github.io,2014-09-04:/2014/09/04/github-pages-with-pelican/</id><summary type="html">&lt;p&gt;If I get this on github pages, it will be a miracle.&lt;/p&gt;
&lt;p&gt;So, I did. Here's how.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Note the date on this post, things may have changed.&lt;/li&gt;
&lt;li&gt;Be ready with homebrew (on your Mac) and a github account.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Install virtualenv (with pip).&lt;/p&gt;
&lt;p&gt;Create a new directory, i.e. "website", and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If I get this on github pages, it will be a miracle.&lt;/p&gt;
&lt;p&gt;So, I did. Here's how.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Note the date on this post, things may have changed.&lt;/li&gt;
&lt;li&gt;Be ready with homebrew (on your Mac) and a github account.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Install virtualenv (with pip).&lt;/p&gt;
&lt;p&gt;Create a new directory, i.e. "website", and start a virtual environment.
I use autoenv (brew install autoenv), which executes a .env file if it exists when you change into a directory.
Autoenv will ask you to confirm the .env file is correct.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;website
virtualenv&lt;span class="w"&gt; &lt;/span&gt;pyenv
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;source /Users/andyreagan/website/pyenv/bin/activate&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;.env
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now your prompt should be prefixed by "(pyenv)". Now start installing pelican.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pelican
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;markdown
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ghp-import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you're going to migrate over posts from somewhere else (wordpress for me), get pandoc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pandoc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can get started building the website with Pelican. First, make sure the github is set up. Follow the instructions on https://pages.github.com/, and leave the repository empty.
Clone it into your working directory (website) with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/andyreagan/andyreagan.github.io&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, build the website with Pelican. I just followed the tutorial on their documentation, which is excellent: http://docs.getpelican.com/en/3.4.0/quickstart.html&lt;/p&gt;
&lt;p&gt;Once you've got something showing in localhost, it's time to push it up to github. Hold your breath.
The publishing script that I use, very simple is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# publishsimple.sh&lt;/span&gt;

pelican&lt;span class="w"&gt; &lt;/span&gt;content&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;pelicanconf.py
ghp-import&lt;span class="w"&gt; &lt;/span&gt;output
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;gh-pages:master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some other goodies. All of this is well documented within Pelican's docs, but here it is. This is the tail of my pelicanconf.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# static paths will be copied without parsing their contents&lt;/span&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;files&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# get a homepage on the menu bar&lt;/span&gt;
&lt;span class="n"&gt;MENUITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,),]&lt;/span&gt;

&lt;span class="c1"&gt;# make the URL&amp;#39;s look nice&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;}/&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s1"&gt;/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;}/&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s1"&gt;/index.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;YEAR_ARCHIVE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{date:%Y}/index.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;MONTH_ARCHIVE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{date:%Y}/{date:%b}/index.html&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And I did fork my own theme. Copied over the theme from "pyenv/lib/python2.7/site-packages/pelican/themes/simple/templates/" into "theme/finnigan".
I also created the "static" folder alongside "templates," and put the "css" and "js" and "images" folders inside static.&lt;/p&gt;
&lt;p&gt;Then set this to be the theme in "pelicanconf.sh":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;theme/finnigan&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you've made it this far, start writing!&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="github"></category></entry></feed>